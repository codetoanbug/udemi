import { init as init$1, configureScope } from "@sentry/react";
export * from "@sentry/react";
export { Integrations } from "@sentry/react";
import {
  BrowserTracing,
  defaultRequestInstrumentationOptions,
} from "@sentry/tracing";
export { BrowserTracing } from "@sentry/tracing";
import { nextRouterInstrumentation } from "./performance/client.js";
export { nextRouterInstrumentation } from "./performance/client.js";
import { buildMetadata } from "./utils/metadata.js";
import { addIntegration } from "./utils/userIntegrations.js";
export { captureUnderscoreErrorException } from "./utils/_error.js";

// Treeshakable guard to remove all code related to tracing

/** Inits the Sentry NextJS SDK on the browser with the React SDK. */
function init(options) {
  buildMetadata(options, ["nextjs", "react"]);
  options.environment = options.environment || process.env.NODE_ENV;

  let integrations = options.integrations;

  // Guard below evaluates to true unless __SENTRY_TRACING__ is text-replaced with "false"
  if (typeof __SENTRY_TRACING__ === "undefined" || __SENTRY_TRACING__) {
    // Only add BrowserTracing if a tracesSampleRate or tracesSampler is set
    if (
      options.tracesSampleRate !== undefined ||
      options.tracesSampler !== undefined
    ) {
      integrations = createClientIntegrations(options.integrations);
    }
  }

  init$1({
    ...options,
    integrations,
  });

  configureScope((scope) => {
    scope.setTag("runtime", "browser");
    var filterTransactions = (event) =>
      event.type === "transaction" && event.transaction === "/404"
        ? null
        : event;
    filterTransactions.id = "NextClient404Filter";
    scope.addEventProcessor(filterTransactions);
  });
}

function createClientIntegrations(integrations) {
  var defaultBrowserTracingIntegration = new BrowserTracing({
    tracingOrigins: [
      ...defaultRequestInstrumentationOptions.tracingOrigins,
      /^(api\/)/,
    ],
    routingInstrumentation: nextRouterInstrumentation,
  });

  if (integrations) {
    return addIntegration(defaultBrowserTracingIntegration, integrations, {
      BrowserTracing: {
        keyPath: "options.routingInstrumentation",
        value: nextRouterInstrumentation,
      },
    });
  } else {
    return [defaultBrowserTracingIntegration];
  }
}

export { init };
//# sourceMappingURL=index.client.js.map
