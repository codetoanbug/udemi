import { getCurrentHub, addGlobalEventProcessor } from "@sentry/browser";
import * as FullStory from "@fullstory/browser";

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function () {
  __assign =
    Object.assign ||
    function __assign(t) {
      for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s)
          if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
      return t;
    };
  return __assign.apply(this, arguments);
};

/**
 * Returns true if Fullstory is installed correctly.
 */
function doesFullStoryExist() {
  return !!window[window["_fs_namespace"]];
}
/**
 * Get the project ID from a Sentry DSN
 * @param {string} dsn
 */
var getProjectIdFromSentryDsn = function (dsn) {
  return new URL(dsn).pathname.replace("/", "");
};
var isError = function (exception) {
  return exception.message !== undefined;
};
/**
 * Get the message and name properties from the original exception
 * @param {EventHint} hint
 */
var getOriginalExceptionProperties = function (hint) {
  if (hint && hint.originalException && isError(hint.originalException)) {
    var originalException = hint.originalException;
    var name_1 = originalException.name,
      message = originalException.message;
    return { name: name_1, message: message };
  }
  return {};
};
/**
 * Returns the sentry URL of the error. If we cannot get the URL, return a
 * string saying we cannot.
 */
function getSentryUrl(args) {
  var _a;
  try {
    // No docs on this but the SDK team assures me it works unless you bind another Sentry client
    var dsn = (
      ((_a = getCurrentHub().getClient()) === null || _a === void 0
        ? void 0
        : _a.getOptions()) || {}
    ).dsn;
    if (!dsn) {
      console.error("No sn");
      return "Could not retrieve url";
    }
    if (!args.hint) {
      console.error("No event hint");
      return "Could not retrieve url";
    }
    var projectId = getProjectIdFromSentryDsn(dsn);
    return (
      args.baseSentryUrl +
      "/organizations/" +
      args.sentryOrg +
      "/issues/?project=" +
      projectId +
      "&query=" +
      args.hint.event_id
    );
  } catch (err) {
    console.error("Error retrieving project ID from DSN", err);
    //TODO: Could put link to a help here
    return "Could not retrieve url";
  }
}

var SentryFullStory = /** @class */ (function () {
  function SentryFullStory(sentryOrg, options) {
    if (options === void 0) {
      options = {};
    }
    this.name = SentryFullStory.id;
    this.sentryOrg = sentryOrg;
    this.client = options.client || FullStory;
    this.baseSentryUrl = options.baseSentryUrl || "https://sentry.io";
  }
  SentryFullStory.prototype.setupOnce = function () {
    var _this = this;
    addGlobalEventProcessor(function (event, hint) {
      var self = getCurrentHub().getIntegration(SentryFullStory);
      // Run the integration ONLY when it was installed on the current Hub AND isn't a transaction
      if (self && event.type !== "transaction" && doesFullStoryExist()) {
        var getFullStoryUrl = function () {
          // getCurrentSessionURL isn't available until after the FullStory script is fully bootstrapped.
          // If an error occurs before getCurrentSessionURL is ready, make a note in Sentry and move on.
          // More on getCurrentSessionURL here: https://help.fullstory.com/develop-js/getcurrentsessionurl
          try {
            return (
              _this.client.getCurrentSessionURL(true) ||
              "Current session URL API not ready"
            );
          } catch (e) {
            var reason = e instanceof Error ? e.message : String(e);
            return "Unable to get url: " + reason;
          }
        };
        event.contexts = __assign(__assign({}, event.contexts), {
          fullStory: {
            fullStoryUrl: getFullStoryUrl(),
          },
        });
        try {
          _this.client.event(
            "Sentry Error",
            __assign(
              {
                sentryUrl: getSentryUrl({
                  baseSentryUrl: _this.baseSentryUrl,
                  sentryOrg: _this.sentryOrg,
                  hint: hint,
                }),
              },
              getOriginalExceptionProperties(hint)
            )
          );
        } catch (e) {
          console.debug("Unable to report sentry error details to FullStory");
        }
      }
      return event;
    });
  };
  SentryFullStory.id = "SentryFullStory";
  return SentryFullStory;
})();

export default SentryFullStory;
