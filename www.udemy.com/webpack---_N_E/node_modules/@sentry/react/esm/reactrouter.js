import { getGlobalObject } from "@sentry/utils";
import hoistNonReactStatics from "hoist-non-react-statics";
import * as React from "react";

var _jsxFileName =
  "/home/runner/work/sentry-javascript/sentry-javascript/packages/react/src/reactrouter.tsx";

// We need to disable eslint no-explict-any because any is required for the
// react-router typings.

var global = getGlobalObject();

let activeTransaction;

function reactRouterV4Instrumentation(history, routes, matchPath) {
  return createReactRouterInstrumentation(
    history,
    "react-router-v4",
    routes,
    matchPath
  );
}

function reactRouterV5Instrumentation(history, routes, matchPath) {
  return createReactRouterInstrumentation(
    history,
    "react-router-v5",
    routes,
    matchPath
  );
}

function createReactRouterInstrumentation(
  history,
  name,
  allRoutes = [],
  matchPath
) {
  function getInitPathName() {
    if (history && history.location) {
      return history.location.pathname;
    }

    if (global && global.location) {
      return global.location.pathname;
    }

    return undefined;
  }

  /**
   * Normalizes a transaction name. Returns the new name as well as the
   * source of the transaction.
   *
   * @param pathname The initial pathname we normalize
   */
  function normalizeTransactionName(pathname) {
    if (allRoutes.length === 0 || !matchPath) {
      return [pathname, "url"];
    }

    var branches = matchRoutes(allRoutes, pathname, matchPath);
    for (let x = 0; x < branches.length; x++) {
      if (branches[x].match.isExact) {
        return [branches[x].match.path, "route"];
      }
    }

    return [pathname, "url"];
  }

  var tags = {
    "routing.instrumentation": name,
  };

  return (
    customStartTransaction,
    startTransactionOnPageLoad = true,
    startTransactionOnLocationChange = true
  ) => {
    var initPathName = getInitPathName();
    if (startTransactionOnPageLoad && initPathName) {
      const [name, source] = normalizeTransactionName(initPathName);
      activeTransaction = customStartTransaction({
        name,
        op: "pageload",
        tags,
        metadata: {
          source,
        },
      });
    }

    if (startTransactionOnLocationChange && history.listen) {
      history.listen((location, action) => {
        if (action && (action === "PUSH" || action === "POP")) {
          if (activeTransaction) {
            activeTransaction.finish();
          }

          const [name, source] = normalizeTransactionName(location.pathname);
          activeTransaction = customStartTransaction({
            name,
            op: "navigation",
            tags,
            metadata: {
              source,
            },
          });
        }
      });
    }
  };
}

/**
 * Matches a set of routes to a pathname
 * Based on implementation from
 */
function matchRoutes(routes, pathname, matchPath, branch = []) {
  routes.some((route) => {
    var match = route.path
      ? matchPath(pathname, route)
      : branch.length
      ? branch[branch.length - 1].match // use parent match
      : computeRootMatch(pathname); // use default "root" match

    if (match) {
      branch.push({ route, match });

      if (route.routes) {
        matchRoutes(route.routes, pathname, matchPath, branch);
      }
    }

    return !!match;
  });

  return branch;
}

function computeRootMatch(pathname) {
  return { path: "/", url: "/", params: {}, isExact: pathname === "/" };
}

function withSentryRouting(Route) {
  var componentDisplayName = Route.displayName || Route.name;

  var WrappedRoute = (props) => {
    if (
      activeTransaction &&
      props &&
      props.computedMatch &&
      props.computedMatch.isExact
    ) {
      activeTransaction.setName(props.computedMatch.path);
      activeTransaction.setMetadata({ source: "route" });
    }

    // @ts-ignore Setting more specific React Component typing for `R` generic above
    // will break advanced type inference done by react router params:
    // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164
    return React.createElement(Route, {
      ...props,
      __self: this,
      __source: { fileName: _jsxFileName, lineNumber: 177 },
    });
  };

  WrappedRoute.displayName = `sentryRoute(${componentDisplayName})`;
  hoistNonReactStatics(WrappedRoute, Route);
  // @ts-ignore Setting more specific React Component typing for `R` generic above
  // will break advanced type inference done by react router params:
  // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164
  return WrappedRoute;
}

export {
  reactRouterV4Instrumentation,
  reactRouterV5Instrumentation,
  withSentryRouting,
};
//# sourceMappingURL=reactrouter.js.map
