import { ClientEvent, Tracker } from "@udemy/event-tracking";
import { roundNumber } from "@udemy/i18n";
export const PURCHASE_PRICE_TYPES = {
  individual_buyable: "buyable_price",
  individual_shopping_buyable: "buyable_cart_price",
  bundle: "bundle_price",
  subtotal: "subtotal_price",
  total: "total_price",
};
export class PriceImpressionEvent extends ClientEvent {
  constructor(_ref) {
    let { context } = _ref;
    super("PriceImpressionEvent");
    this.priceServeTrackingId = void 0;
    this.buyableTrackingId = void 0;
    this.context = void 0;
    this.currency = void 0;
    this.listPrice = void 0;
    this.discountPrice = void 0;
    this.displayedPrice = void 0;
    this.priceType = void 0;
    this.buyableType = void 0;
    this.buyableId = void 0;
    this.priceServeTrackingId = context.priceServeTrackingId;
    this.buyableTrackingId = context.buyableTrackingId;
    this.context = context.context;
    this.currency = context.currency;
    this.listPrice = context.listPrice;
    this.discountPrice = context.discountPrice;
    this.displayedPrice = context.displayedPrice;
    this.priceType = context.priceType;
    this.buyableType = context.buyableType;
    this.buyableId = context.buyableId;
  }
}
export const trackPriceImpression = async (_ref2) => {
  let { currency, funnelLogContextStore, ...props } = _ref2;
  if (props.trackingEventContext) {
    const listPrice = roundNumber(props.listPrice, 0).toFixed(2);
    const discountPrice = roundNumber(props.discountPrice, 0).toFixed(2);
    const displayedPrice =
      (!props.showListPriceOnly &&
        (props.discountPriceString || discountPrice || "0")) ||
      props.listPriceString ||
      listPrice;
    const context = {
      priceServeTrackingId: props.trackingEventContext.priceServeTrackingId,
      context:
        funnelLogContextStore === null || funnelLogContextStore === void 0
          ? void 0
          : funnelLogContextStore.context,
      listPrice,
      discountPrice,
      displayedPrice,
      buyableType: props.trackingEventContext.buyableType,
      buyableId: props.trackingEventContext.buyableId,
      priceType: props.trackingEventContext.priceType,
      buyableTrackingId: props.trackingEventContext.buyableTrackingId,
      currency,
    };
    const priceEvent = new PriceImpressionEvent({
      context,
    });
    Tracker.publishEvent(priceEvent);
  }
};
//# sourceMappingURL=price-events.js.map
