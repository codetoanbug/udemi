import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _class, _descriptor, _descriptor2;
import autobind from "autobind-decorator";
import { action, computed, observable } from "mobx";
import { whenBrazeReady } from "@udemy/braze";
import { WishlistEvent } from "@udemy/browse-event-tracking";
import { Tracker } from "@udemy/event-tracking";
import { serverOrClient } from "@udemy/shared-utils";
import { udLink } from "@udemy/ud-data";
import { ShoppingClient } from "../shopping-client/shopping-client-singleton";
import {
  WISHLIST_DEFAULT_STATE,
  WISHLIST_LOADING_STATE,
  WISHLIST_FINISHED_STATE,
} from "./constants";
export let WishlistStore =
  ((_class = class WishlistStore {
    constructor(course, udMe) {
      let wishlistSource =
        arguments.length > 2 && arguments[2] !== undefined
          ? arguments[2]
          : "course_landing_page";
      this.wishlistSource = void 0;
      this.course = void 0;
      this.searchParams = void 0;
      this.buyable = void 0;
      this.udMe = void 0;
      _initializerDefineProperty(
        this,
        "wishlistProcessState",
        _descriptor,
        this
      );
      _initializerDefineProperty(this, "isWishlisted", _descriptor2, this);
      this.course = course;
      this.searchParams = new URLSearchParams(
        serverOrClient.global.location.search
      );
      this.buyable = {
        buyable_object_type: "course",
        id: this.course.id,
      };
      this.udMe = udMe;
      this.wishlistSource = wishlistSource;
      this.isWishlisted = this._getIsWishlisted(this.course.id);
    }
    _getIsWishlisted(courseId) {
      return ShoppingClient.lists.wishlist.items.some(
        (item) => item.buyable.id === courseId
      );
    }
    _setIsWishlisted() {
      this.isWishlisted = true;
      // Update the original course object so that the client/server wishlist states are equal
      this.course.is_wishlisted = true;
    }
    _clearIsWishlisted() {
      this.isWishlisted = false;
      this.course.is_wishlisted = false;
    }
    _setWishlistProcessState(nextState) {
      this.wishlistProcessState = nextState;
    }
    _buildNextUrl() {
      this.searchParams.set("xref", "wish");
      this.searchParams.set("courseId", this.course.id.toString());
      const url = `${
        serverOrClient.global.location.href.split("?")[0]
      }?${this.searchParams.toString()}`;
      return url;
    }
    _authUrl() {
      const nextUrl = this._buildNextUrl();
      const returnUrl = serverOrClient.global.location.href;
      if (this.udMe.is_authenticated && this.udMe.id) {
        return nextUrl;
      }
      return udLink.toAuth({
        showLogin: false,
        nextUrl,
        returnUrl,
        source: this.wishlistSource,
        responseType: "html",
      });
    }
    logWishlistClickEvent() {
      Tracker.publishEvent(
        new WishlistEvent({
          id: this.course.id,
          trackingId:
            this.course.frontendTrackingId || this.course.tracking_id || "",
        })
      );
      whenBrazeReady((appboy) => {
        if (appboy.isPushPermissionGranted()) {
          appboy.logCustomEvent("Wishlist", {
            course_id: this.course.id,
          });
        }
      });
    }
    _addToWishlist() {
      this._setIsWishlisted();
      this._setWishlistProcessState(WISHLIST_LOADING_STATE);
      this.logWishlistClickEvent();
      return ShoppingClient.addToList("wishlist", [this.buyable])
        .then(
          action(() => {
            this._setWishlistProcessState(WISHLIST_FINISHED_STATE);
            return Promise.resolve();
          })
        )
        .catch(
          action((error) => {
            this._clearIsWishlisted();
            this._setWishlistProcessState(WISHLIST_DEFAULT_STATE);
            throw error;
          })
        );
    }
    _removeFromWishlist() {
      this._clearIsWishlisted();
      this._setWishlistProcessState(WISHLIST_LOADING_STATE);
      return ShoppingClient.removeFromList("wishlist", {
        buyable: this.buyable,
      })
        .then(
          action(() => {
            this._setWishlistProcessState(WISHLIST_FINISHED_STATE);
            return Promise.resolve();
          })
        )
        .catch(
          action((error) => {
            this._setIsWishlisted();
            this._setWishlistProcessState(WISHLIST_DEFAULT_STATE);
            throw error;
          })
        );
    }
    _getHasWishlistIntent() {
      return this.searchParams.get("xref") === "wish";
    }
    toggleWishlist() {
      const authUrl = this._authUrl();
      if (!this.udMe.is_authenticated || !this.udMe.id) {
        serverOrClient.global.location.href = authUrl;
      } else if (!this.apiRequestIsLoading) {
        const toggle = this.isWishlisted
          ? this._removeFromWishlist
          : this._addToWishlist;
        this._setWishlistProcessState(WISHLIST_DEFAULT_STATE);
        return toggle();
      }
    }
    removeWishlistIntent() {
      if (!this._getHasWishlistIntent()) {
        return;
      }
      this.searchParams.delete("xref");
      this.searchParams.delete("courseId");
      serverOrClient.global.history.replaceState(
        {},
        "",
        `${
          serverOrClient.global.location.pathname
        }?${this.searchParams.toString()}`
      );
    }
    get apiRequestIsLoading() {
      return this.wishlistProcessState === WISHLIST_LOADING_STATE;
    }
  }),
  ((_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "wishlistProcessState",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return WISHLIST_DEFAULT_STATE;
      },
    }
  )),
  (_descriptor2 = _applyDecoratedDescriptor(
    _class.prototype,
    "isWishlisted",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  _applyDecoratedDescriptor(
    _class.prototype,
    "_getIsWishlisted",
    [autobind],
    Object.getOwnPropertyDescriptor(_class.prototype, "_getIsWishlisted"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "_setIsWishlisted",
    [autobind, action],
    Object.getOwnPropertyDescriptor(_class.prototype, "_setIsWishlisted"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "_clearIsWishlisted",
    [autobind, action],
    Object.getOwnPropertyDescriptor(_class.prototype, "_clearIsWishlisted"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "_setWishlistProcessState",
    [autobind, action],
    Object.getOwnPropertyDescriptor(
      _class.prototype,
      "_setWishlistProcessState"
    ),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "_buildNextUrl",
    [autobind],
    Object.getOwnPropertyDescriptor(_class.prototype, "_buildNextUrl"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "_authUrl",
    [autobind],
    Object.getOwnPropertyDescriptor(_class.prototype, "_authUrl"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "logWishlistClickEvent",
    [autobind],
    Object.getOwnPropertyDescriptor(_class.prototype, "logWishlistClickEvent"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "_addToWishlist",
    [autobind],
    Object.getOwnPropertyDescriptor(_class.prototype, "_addToWishlist"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "_removeFromWishlist",
    [autobind],
    Object.getOwnPropertyDescriptor(_class.prototype, "_removeFromWishlist"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "_getHasWishlistIntent",
    [autobind],
    Object.getOwnPropertyDescriptor(_class.prototype, "_getHasWishlistIntent"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "toggleWishlist",
    [autobind, action],
    Object.getOwnPropertyDescriptor(_class.prototype, "toggleWishlist"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "removeWishlistIntent",
    [autobind],
    Object.getOwnPropertyDescriptor(_class.prototype, "removeWishlistIntent"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "apiRequestIsLoading",
    [computed],
    Object.getOwnPropertyDescriptor(_class.prototype, "apiRequestIsLoading"),
    _class.prototype
  )),
  _class);
//# sourceMappingURL=wishlist.mobx-store.js.map
