class OnEnrolledMessagePayload {
  constructor(buyables, purchasePrice) {
    this.buyables = void 0;
    this.purchasePrice = void 0;
    this.buyables = buyables;
    this.purchasePrice = purchasePrice;
  }
  toJSON() {
    return JSON.stringify({
      buyables: this.buyables,
      purchasePrice: this.purchasePrice,
    });
  }
}
export class OnEnrolledMessage {
  constructor(buyables, purchasePrice) {
    this.methodName = "onEnrolled";
    this.payload = void 0;
    this.payload = new OnEnrolledMessagePayload(buyables, purchasePrice);
  }

  /**
   * Send both the legacy onEnrolledAdditionalData message and the new OnEnrolledMessage until Android
   * adoption is significant enough to full deprecate the onEnrolledAdditionalData call
   * Note: onEnrolledAdditionalData call is not sent to iOS clients; it's only for Android backwards compatibility
   */
  sendLegacyAndroidMessage(client) {
    if (typeof client.onEnrolledAdditionalData === "function") {
      client.onEnrolledAdditionalData(this.payload.toJSON());
    } else if (typeof client.onEnrolled === "function") {
      client.onEnrolled(JSON.stringify(this.payload.buyables));
    }
  }
}
//# sourceMappingURL=on-enrolled-message.js.map
