var _class;
import { observer } from "mobx-react";
import React, { Component } from "react";
import { withI18n } from "@udemy/i18n";
import { Modal } from "@udemy/react-dialog-components";
import { FormGroup } from "@udemy/react-form-components";
import { Loader } from "@udemy/react-reveal-components";
import styles from "./save-to-list-modal.module.css";
import { SaveToListSelectionForm } from "./save-to-list-selection-form.react-component";
export let InternalSaveToListModal =
  observer(
    (_class = class InternalSaveToListModal extends Component {
      constructor() {
        super(...arguments);
        this.exitHandler = () => {
          this.props.saveToListButtonStore.hideModal();
        };
        this.renderBody = () => {
          if (this.props.saveToListButtonStore.isFetchingData) {
            return /*#__PURE__*/ React.createElement(Loader, {
              size: "large",
              block: true,
            });
          }
          return /*#__PURE__*/ React.createElement(
            FormGroup,
            {
              udStyle: "fieldset",
              label: "",
            },
            /*#__PURE__*/ React.createElement(SaveToListSelectionForm, {
              store: this.props.saveToListButtonStore,
            })
          );
        };
      }
      render() {
        const { gettext } = this.props;
        return /*#__PURE__*/ React.createElement(
          Modal,
          {
            title: gettext("Save to list"),
            isOpen: this.props.saveToListButtonStore.isModalOpen,
            onOpen: this.props.saveToListButtonStore.fetchListData,
            onClose: this.exitHandler,
            className: styles["save-to-list-modal"],
          },
          this.renderBody()
        );
      }
    })
  ) || _class;
export const SaveToListModal = withI18n(InternalSaveToListModal);
//# sourceMappingURL=save-to-list-modal.react-component.js.map
