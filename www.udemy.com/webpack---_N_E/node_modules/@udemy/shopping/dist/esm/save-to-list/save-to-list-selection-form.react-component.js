var _class;
import { observer } from "mobx-react";
import React, { Component } from "react";
import { withI18n } from "@udemy/i18n";
import AddCircleSolidIcon from "@udemy/icons/dist/add-circle-solid.ud-icon";
import { Button } from "@udemy/react-core-components";
import { FormGroup, TextInputForm } from "@udemy/react-form-components";
import { CheckboxWithLoader } from "../external/enhanced-form-elements/checkbox-with-loader.react-component";
import {
  MAX_TITLE_CHARACTER_LIMIT,
  MIN_TITLE_CHARACTER_LIMIT,
} from "./constants";
import styles from "./save-to-list-selection-form.module.css";
let InternalSaveToListSelectionForm =
  observer(
    (_class = class InternalSaveToListSelectionForm extends Component {
      constructor() {
        super(...arguments);
        this.toggleSelect = async (event) => {
          const targetId = parseInt(event.target.name, 10);
          const targetTitle = event.target.title;
          if (event.target.checked) {
            await this.props.store.saveToList(targetId, targetTitle);
          } else {
            await this.props.store.removeFromList(targetId, targetTitle);
          }
          if (!this.props.store.hasError) {
            await this.props.store.toggleList(targetId);
          }
        };
        this.handleAddListClick = () => {
          this.props.store.createList();
        };
      }
      renderNewListForm() {
        const { gettext, interpolate } = this.props;
        return /*#__PURE__*/ React.createElement(
          FormGroup,
          {
            label: gettext("Create new list"),
            labelProps: {
              className: "ud-sr-only",
            },
            "data-testid": "create-list-title-input",
            className: styles["new-list-form"],
            note: this.props.store.titleTooLong
              ? interpolate(
                  gettext(
                    "List titles cannot exceed %(titleLimit)s characters"
                  ),
                  {
                    titleLimit: MAX_TITLE_CHARACTER_LIMIT,
                  },
                  true
                )
              : null,
            validationState: this.props.store.titleTooLong
              ? "error"
              : "neutral",
          },
          /*#__PURE__*/ React.createElement(TextInputForm, {
            submitButtonProps: {
              disabled:
                this.props.store.isCreatingNewList ||
                this.props.store.newListTitle.length <
                  MIN_TITLE_CHARACTER_LIMIT,
            },
            onChange: this.props.store.setNewListTitle,
            onSubmit: this.handleAddListClick,
            maxLength: MAX_TITLE_CHARACTER_LIMIT,
            submitButtonContent: gettext("Create list"),
          })
        );
      }
      render() {
        const { gettext } = this.props;
        return /*#__PURE__*/ React.createElement(
          "div",
          {
            "data-testid": "save-to-list-selection",
          },
          this.props.store.myList &&
            /*#__PURE__*/ React.createElement(
              "div",
              {
                className: styles["checkbox-group"],
              },
              this.props.store.myList.map((listItem) => {
                var _listItem$isSelected;
                return /*#__PURE__*/ React.createElement(
                  CheckboxWithLoader,
                  {
                    "data-testid": `item-checkbox-${listItem.id}`,
                    checked:
                      (_listItem$isSelected = listItem.isSelected) !== null &&
                      _listItem$isSelected !== void 0
                        ? _listItem$isSelected
                        : false,
                    key: listItem.id,
                    name: listItem.id.toString(),
                    onChange: this.toggleSelect,
                    isLoading: this.props.store.isSubmitting.has(listItem.id),
                    title: listItem.title,
                  },
                  listItem.title
                );
              })
            ),
          this.props.store.isNewListFormVisible
            ? this.renderNewListForm()
            : /*#__PURE__*/ React.createElement(
                Button,
                {
                  "data-testid": "create-new-list-button",
                  className: styles["new-list-button"],
                  udStyle: "ghost",
                  size: "medium",
                  onClick: this.props.store.toggleNewListForm,
                },
                /*#__PURE__*/ React.createElement(AddCircleSolidIcon, {
                  label: false,
                }),
                gettext("Create new list")
              )
        );
      }
    })
  ) || _class;
export const SaveToListSelectionForm = withI18n(
  InternalSaveToListSelectionForm
);
//# sourceMappingURL=save-to-list-selection-form.react-component.js.map
