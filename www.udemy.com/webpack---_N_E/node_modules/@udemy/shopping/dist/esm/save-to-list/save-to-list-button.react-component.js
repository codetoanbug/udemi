import { observer } from "mobx-react";
import React from "react";
import { useMatchMedia } from "@udemy/hooks";
import { useI18n } from "@udemy/i18n";
import ExpandPlusIcon from "@udemy/icons/dist/expand-plus.ud-icon";
import { Button, IconButton } from "@udemy/react-core-components";
import { SaveToListButtonStore } from "./save-to-list-button.mobx-store";
import { SaveToListModal } from "./save-to-list-modal.react-component";
const InternalSaveToListButton = (_ref) => {
  let {
    round = false,
    size = "large",
    labelPosition = "left",
    label,
    onClick,
    ...givenButtonProps
  } = _ref;
  const buttonProps = {
    udStyle: "secondary",
    size,
    ...givenButtonProps,
  };
  const isSmallLayout = useMatchMedia("sm-max");
  const { gettext } = useI18n();
  const defaultLabel = !isSmallLayout
    ? gettext("Save")
    : gettext("Save to list");
  const labelText = label !== null && label !== void 0 ? label : defaultLabel;
  if (round) {
    return /*#__PURE__*/ React.createElement(
      IconButton,
      Object.assign({}, buttonProps, {
        round: true,
        onClick: onClick,
      }),
      /*#__PURE__*/ React.createElement(ExpandPlusIcon, {
        label: labelText,
        color: "inherit",
      })
    );
  }
  return /*#__PURE__*/ React.createElement(
    Button,
    Object.assign(
      {
        "data-testid": "save-to-list-button",
        onClick: onClick,
      },
      buttonProps
    ),
    labelPosition === "left" &&
      /*#__PURE__*/ React.createElement("span", null, labelText),
    /*#__PURE__*/ React.createElement(ExpandPlusIcon, {
      label: false,
      color: "inherit",
      size: size,
    }),
    labelPosition === "right" &&
      /*#__PURE__*/ React.createElement("span", null, labelText)
  );
};

/**
 * Props for the `SaveToListButton` component
 */

/**
 * Renders a button that, when clicked, opens a modal that allows the user to save the provided
 * course to an existing list or create a new list
 */
export const SaveToListButton = observer((_ref2) => {
  let { course, uiRegion, renderPopover, ...saveToListButtonProps } = _ref2;
  const { gettext, interpolate } = useI18n();
  const [store] = React.useState(
    () =>
      new SaveToListButtonStore(course, uiRegion, {
        gettext,
        interpolate,
      })
  );
  if (!course.is_in_user_subscription) {
    return null;
  }
  function onSelectListModal() {
    store.openModal();
  }
  let button = /*#__PURE__*/ React.createElement(
    InternalSaveToListButton,
    Object.assign(
      {
        onClick: onSelectListModal,
      },
      saveToListButtonProps
    )
  );
  if (renderPopover) {
    button = renderPopover(button);
  }
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    button,
    /*#__PURE__*/ React.createElement(SaveToListModal, {
      saveToListButtonStore: store,
    })
  );
});
//# sourceMappingURL=save-to-list-button.react-component.js.map
