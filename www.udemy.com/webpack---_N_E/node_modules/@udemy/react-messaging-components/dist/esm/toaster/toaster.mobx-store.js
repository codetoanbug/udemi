import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";

var _class, _descriptor;

import { observable, action } from "mobx";
import React from "react";
import { AlertBannerContent } from "../alert-banner/alert-banner.react-component";
import { ToastStore } from "./toast.mobx-store";
import { Toast } from "./toast.react-component";
let ToasterStoreBase =
  ((_class = class ToasterStoreBase {
    constructor() {
      let options =
        arguments.length > 0 && arguments[0] !== undefined
          ? arguments[0]
          : {
              toastComponent: Toast,
            };
      this._seenToastKeys = new Set();
      this.toasts = observable.map(
        {},
        {
          deep: false,
        }
      );
      this.toastComponent = void 0;

      this.dismissToast = (toastId) => {
        const toast = this.toasts.get(toastId); // Avoid error on double-click of Dismiss button

        if (toast) {
          toast.store.dismissToast();
        }
      };

      _initializerDefineProperty(this, "removeToast", _descriptor, this);

      this.toastComponent = options.toastComponent;
    }

    addToast(toastContent) {
      let options =
        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (options.toastKey) {
        if (this._seenToastKeys.has(options.toastKey)) {
          return;
        }

        this._seenToastKeys.add(options.toastKey);
      }

      const toastStore = new ToastStore();
      const toast = /*#__PURE__*/ React.createElement(
        this.toastComponent,
        Object.assign(
          {
            toasterStore: this,
            toastStore: toastStore,
            key: toastStore.id,
          },
          options
        ),
        toastContent
      );
      this.toasts.set(toastStore.id, {
        store: toastStore,
        toastComponent: toast,
      });
      return toastStore.id;
    }
    /**
     * @param props - {@link AlertBannerProps}
     * @param options - Any additional {@link ToastProps} options to pass on to when this function calls `addToast1`.
     *
     * Note: If you are using this within a TypeScript file, you may need to cast the first parameter
     * (`props`) as `AlertBannerProps` within a TypeScript file.
     *
     * @example
     * ```
     * const bannerProps = {
     *     udStyle: 'success',
     *     title: 'Copied to clipboard',
     *     ctaText: 'Dismiss',
     *     dismissButtonProps: false,
     * } as AlertBannerProps;
     *
     * ToasterStore.addAlertBannerToast(bannerProps, {autoDismiss: true});
     * ```
     *  */

    addAlertBannerToast(props) {
      let options =
        arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      let toastId = null;

      const onAction = () => {
        var _props$onAction;

        this.dismissToast(toastId);
        (_props$onAction = props.onAction) === null ||
        _props$onAction === void 0
          ? void 0
          : _props$onAction.call(props);
      };

      const onDismiss = () => {
        var _props$onDismiss;

        this.dismissToast(toastId);
        (_props$onDismiss = props.onDismiss) === null ||
        _props$onDismiss === void 0
          ? void 0
          : _props$onDismiss.call(props);
      };

      const content = /*#__PURE__*/ React.createElement(
        AlertBannerContent,
        Object.assign({}, props, {
          onAction: onAction,
          onDismiss: onDismiss,
        })
      );
      toastId = this.addToast(content, options);
      return toastId;
    } // "Dismiss" triggers exit-animation.
  }),
  (_applyDecoratedDescriptor(
    _class.prototype,
    "addToast",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "addToast"),
    _class.prototype
  ),
  (_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "removeToast",
    [action],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return (toastId) => {
          this.toasts.delete(toastId);
        };
      },
    }
  ))),
  _class);
export const ToasterStore = new ToasterStoreBase();
//# sourceMappingURL=toaster.mobx-store.js.map
