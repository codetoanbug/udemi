/* eslint-disable @typescript-eslint/naming-convention */
import { useI18n } from "@udemy/i18n";
import ErrorIcon from "@udemy/icons/dist/error.ud-icon";
import InfoIcon from "@udemy/icons/dist/info.ud-icon";
import SuccessIcon from "@udemy/icons/dist/success.ud-icon";
import WarningIcon from "@udemy/icons/dist/warning.ud-icon";
import { Button } from "@udemy/react-core-components";
import classNames from "classnames";
import React, { useState } from "react";
import styles from "./alert-banner.module.css";

/** The AlertBanner component.  A wrapper for the {@link AlertBannerContent} component, with some event handlers. */
export const AlertBanner = (props) => {
  const [dismissed, setDismissed] = useState(false);

  function handleAction() {
    var _props$onAction;

    setDismissed(true);
    (_props$onAction = props.onAction) === null || _props$onAction === void 0
      ? void 0
      : _props$onAction.call(props);
  }

  function handleDismiss() {
    var _props$onDismiss;

    setDismissed(true);
    (_props$onDismiss = props.onDismiss) === null || _props$onDismiss === void 0
      ? void 0
      : _props$onDismiss.call(props);
  }

  if (dismissed) {
    return null;
  } // eslint-disable-next-line react/jsx-no-bind

  return /*#__PURE__*/ React.createElement(
    AlertBannerContent,
    Object.assign({}, props, {
      onAction: handleAction,
      onDismiss: handleDismiss,
    })
  );
};

/** The AlertBannerContent component is the internal scaffolding of an {@link AlertBanner} component.
 *  This is made to be used within an `AlertBanner`, but can be used in other custom containers as well.
 */
export const AlertBannerContent = (_ref) => {
  let {
    actionButtonProps = {},
    body,
    className,
    dismissButtonProps = {},
    icon,
    onAction,
    onDismiss,
    showCta = true,
    showIcon = true,
    title,
    udStyle = "information",
    ...props
  } = _ref;
  const { gettext } = useI18n();
  const {
    ctaText = gettext("Take action"),
    dismissButtonText = gettext("Dismiss"),
    ...divProps
  } = props;
  const screenReaderLabels = {
    information: gettext("information alert"),
    success: gettext("success alert"),
    error: gettext("error alert"),
    warning: gettext("warning alert"),
  };
  const textFrameIconClass = showIcon ? styles["text-frame-with-icon"] : "";
  return /*#__PURE__*/ React.createElement(
    "div",
    Object.assign({}, divProps, {
      className: classNames(
        styles["alert-banner"],
        styles[`alert-banner-${udStyle}`],
        className
      ),
    }),
    showIcon && (icon || alertBannerContentIcon(udStyle)),
    /*#__PURE__*/ React.createElement(
      "div",
      {
        style: {
          flex: 1,
        },
      },
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: classNames(styles["text-frame"], textFrameIconClass),
        },
        /*#__PURE__*/ React.createElement(
          "span",
          {
            className: "ud-sr-only",
          },
          screenReaderLabels[udStyle]
        ),
        title &&
          /*#__PURE__*/ React.createElement(
            "h2",
            {
              className: "ud-heading-md",
            },
            title
          ),
        body &&
          /*#__PURE__*/ React.createElement(
            "div",
            {
              className: classNames("ud-text-sm", styles.body),
            },
            body
          )
      ),
      showCta &&
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: styles["cta-container"],
          },
          actionButtonProps &&
            /*#__PURE__*/ React.createElement(
              Button,
              Object.assign(
                {
                  "data-purpose": "action",
                  onClick: onAction,
                  size: "medium",
                  className: styles.button,
                },
                actionButtonProps
              ),
              ctaText
            ),
          dismissButtonProps &&
            /*#__PURE__*/ React.createElement(
              Button,
              Object.assign(
                {
                  "data-purpose": "dismiss",
                  onClick: onDismiss,
                  size: "medium",
                  udStyle: "ghost",
                  className: classNames("ud-link-neutral", styles.button),
                },
                dismissButtonProps
              ),
              dismissButtonText
            )
        )
    )
  );
};
/**
 * Determines which icon to display based on the `AlertLevel` type.
 * @param udStyle The current {@link AlertLevel} of the banner.
 * @returns A `BaseIcon` component
 */

function alertBannerContentIcon(udStyle) {
  switch (udStyle) {
    case "success":
      return /*#__PURE__*/ React.createElement(SuccessIcon, {
        label: false,
        size: "large",
      });

    case "warning":
      return /*#__PURE__*/ React.createElement(WarningIcon, {
        label: false,
        size: "large",
      });

    case "error":
      return /*#__PURE__*/ React.createElement(ErrorIcon, {
        label: false,
        size: "large",
      });

    case "information":
      return /*#__PURE__*/ React.createElement(InfoIcon, {
        label: false,
        size: "large",
      });
  }
}
//# sourceMappingURL=alert-banner.react-component.js.map
