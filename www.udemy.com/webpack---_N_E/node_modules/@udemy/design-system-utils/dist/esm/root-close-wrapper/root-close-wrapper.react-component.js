import { noop } from "@udemy/shared-utils";
import React, { createContext } from "react";
import ReactDOM from "react-dom";
import { Keys } from "../keyboard/keys";
/** The trigger for a close, either Keyboard a Mouse Click */

export const ROOT_CLOSE_REASON = {
  CLICK: "click",
  KEYBOARD: "keyboard",
}; // Matches return type of ReactDOM.findDOMNode

//
export const RootCloseWrapperContext = /*#__PURE__*/ createContext({
  ignoreRootClose: noop,
});
/**
 * The RootCloseWrapper component.
 *
 * @remarks
 * This component listens to escape key presses and clicks at the document level.
 * It then notifies consuming components that they may want to close (e.g., Dialogs, Modals).
 *
 * @privateRemarks
 * This must remain a class component as long as it depends on findDOMNode.
 */

export class RootCloseWrapper extends React.Component {
  constructor() {
    super(...arguments);
    this.dom = null;
    this.shouldRootClose = true;

    this.ignoreRootClose = () => {
      // If false, then component will ignore the next click or keydown event.
      this.shouldRootClose = false; // If a RootCloseWrapper is inside another RootCloseWrapper,
      // propagate `ignoreRootClose` up.

      this.context.ignoreRootClose();
    };

    this.onDocumentClick = (event) => {
      if (this.shouldRootClose) {
        this.props.onRootClose(event, this.dom, "click");
      } // Toggle back on to listen to next document-level click.

      this.shouldRootClose = true;
    };

    this.onKeyDown = (event) => {
      if (event.keyCode === Keys.ESCAPE && this.shouldRootClose) {
        this.props.onRootClose(event, this.dom, "keyboard");
      }
    };
  }

  componentDidMount() {
    var _this$dom, _this$dom2;

    // eslint-disable-next-line react/no-find-dom-node
    this.dom = ReactDOM.findDOMNode(this); // Listen to clicks coming from within child component so they can be ignored when
    // when they bubble up to the document and fire the document-level event listener below.

    (_this$dom = this.dom) === null || _this$dom === void 0
      ? void 0
      : _this$dom.addEventListener("click", this.ignoreRootClose); // keydown is only dispatched on certain types of elements, hence the cast (I think)
    // https://developer.mozilla.org/en-US/docs/Web/API/Element/keydown_event

    (_this$dom2 = this.dom) === null || _this$dom2 === void 0
      ? void 0
      : _this$dom2.addEventListener("keydown", this.onKeyDown);
    document.addEventListener("click", this.onDocumentClick);
    document.addEventListener("keydown", this.onKeyDown);
  }

  componentWillUnmount() {
    var _this$dom3, _this$dom4;

    document.removeEventListener("click", this.onDocumentClick);
    document.removeEventListener("keydown", this.onKeyDown);
    (_this$dom3 = this.dom) === null || _this$dom3 === void 0
      ? void 0
      : _this$dom3.removeEventListener("click", this.ignoreRootClose);
    (_this$dom4 = this.dom) === null || _this$dom4 === void 0
      ? void 0
      : _this$dom4.removeEventListener("keydown", this.onKeyDown);
    this.dom = null;
  }

  render() {
    const contextValue = {
      ignoreRootClose: this.ignoreRootClose,
    };
    return /*#__PURE__*/ React.createElement(
      RootCloseWrapperContext.Provider,
      {
        value: contextValue,
      },
      React.Children.only(this.props.children)
    );
  }
}
RootCloseWrapper.contextType = RootCloseWrapperContext;
//# sourceMappingURL=root-close-wrapper.react-component.js.map
