import React from "react";
import ReactDOM from "react-dom";
import { findFocusables } from "./find-focusables";
import { Keys } from "./keys";
/** React props interface for the FocusCycle component */

/**
 * ### FocusCycle
 *
 * @remarks
 * Cycles through all the focusable descendants of this component.
 * ArrowDown cycles forward; ArrowUp cycles backward.
 */
export class FocusCycle extends React.Component {
  constructor() {
    super(...arguments);
    this.element = null;
    this.detachedContent = null;

    this.onKeyDown = (event) => {
      const code = event.which || event.keyCode;

      if (code === Keys.UP || code === Keys.DOWN) {
        const focusables = this.props.getCycle(this.element);
        const activeIndex = focusables.findIndex(
          (element) => element === document.activeElement
        );
        let targetIndex = null;

        if (activeIndex >= 0 && code === Keys.DOWN) {
          targetIndex = (activeIndex + 1) % focusables.length;
        } else if (activeIndex >= 0 && code === Keys.UP) {
          targetIndex =
            (activeIndex - 1 + focusables.length) % focusables.length;
        }

        if (targetIndex !== null && focusables[targetIndex]) {
          event.preventDefault(); // Prevent vertical scrolling.

          focusables[targetIndex].focus();
        }
      }
    };
  }

  componentDidMount() {
    var _this$element;

    // eslint-disable-next-line react/no-find-dom-node
    this.element = ReactDOM.findDOMNode(this);
    (_this$element = this.element) === null || _this$element === void 0
      ? void 0
      : _this$element.addEventListener("keydown", this.onKeyDown);

    if (this.props.detachedContent) {
      var _this$detachedContent;

      // eslint-disable-next-line react/no-find-dom-node
      this.detachedContent = this.props.detachedContent.current;
      (_this$detachedContent = this.detachedContent) === null ||
      _this$detachedContent === void 0
        ? void 0
        : _this$detachedContent.addEventListener("keydown", this.onKeyDown);
    }
  }

  componentWillUnmount() {
    var _this$element2;

    (_this$element2 = this.element) === null || _this$element2 === void 0
      ? void 0
      : _this$element2.removeEventListener("keydown", this.onKeyDown);
    this.element = null;

    if (this.props.detachedContent) {
      var _this$detachedContent2;

      (_this$detachedContent2 = this.detachedContent) === null ||
      _this$detachedContent2 === void 0
        ? void 0
        : _this$detachedContent2.removeEventListener("keydown", this.onKeyDown);
      this.detachedContent = null;
    }
  } // This is set to the possible return types of React.findDOMNode

  render() {
    return React.Children.only(this.props.children);
  }
}
FocusCycle.defaultProps = {
  getCycle: findFocusables,
};
//# sourceMappingURL=focus-cycle.react-component.js.map
