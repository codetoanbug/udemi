import React from "react";
/**
 * React props interface for `ClientSideRender` component
 */

/**
 * ### ClientSideRender
 *
 * Component that ensures that its children are _only_ rendered on the client. On the server,
 * it renders a fallback component.
 * Instances of this component on a page can be highlighted using the "Highlight dynamic components"
 * switch in the Udemy Chrome extension.
 *
 * @example
 * ```tsx
 * <ClientSideRender placeholder={<Loader />} uiRegion="my UI region">
 *     <MyClientSideOnlyComponent />
 * </ClientSideRender>
 * ```
 */
export function ClientSideRender(_ref) {
  let { placeholder = null, uiRegion = "component", children } = _ref;
  const [hasMounted, setHasMounted] = React.useState(false);
  React.useEffect(() => {
    setHasMounted(true);
  }, []);

  if (!hasMounted) {
    return /*#__PURE__*/ React.createElement(React.Fragment, null, placeholder);
  }

  if (!children) {
    return null;
  }

  const child = React.Children.only(children);
  return /*#__PURE__*/ React.cloneElement(child, {
    // eslint-disable-next-line @typescript-eslint/naming-convention
    "data-client-side-render-only": `CSR: ${uiRegion}`,
  });
}
//# sourceMappingURL=client-side-render.react-component.js.map
