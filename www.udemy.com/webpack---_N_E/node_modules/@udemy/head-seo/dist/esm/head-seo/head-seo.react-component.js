import React from "react";
import { formatNumber, useI18n } from "@udemy/i18n";
import { useUDData } from "@udemy/ud-data";
import {
  DEFAULT_META_IMAGE,
  metadata as getMetadata,
} from "../head-seo/lib/constants";
/**
 * HeadSEO is a component that renders the SEO tags for the page.
 *
 * @param title - title is a string that indicates the title of the page.
 * @param description - description is a string that indicates the description of the page.
 * @param ogDescription - ogDescription is a string that indicates the description of the page. It's used for OpenGraph tags.
 * @param ogTitle - ogTitle is a string that indicates the title of the page. It's used for OpenGraph tags.
 * @param ogImage - ogImage is a string that indicates the image url for the page. It's used for OpenGraph tags.
 * @param ogType - ogType is a string that indicates the type of the page. It's used for OpenGraph tags.
 * @param canonicalUrl - canonicalUrl is required for all pages except error pages.Point error pages via errorPage prop.
 * @param ogLocale - ogLocale is a string that indicates the locale of the page. It's used for OpenGraph tags.
 * @param robots - robots is a string or an array of strings that indicates the robot rules for the page.
 * @param assetPath - assetPath is the path to the assets folder. It's used to render the favicon and other assets.`
 * @param headWrapper - headWrapper is a component that wraps the head tags
 * @param errorPage - errorPage is a boolean prop that indicates if the page is an error page. If true, tags that uses canonicalUrl won't be rendered.
 * @constructor
 */
export const HeadSEO = (_ref) => {
  var _title, _description, _ogDescription, _ogTitle;
  let {
    title,
    description,
    ogDescription,
    ogTitle,
    ogImage = DEFAULT_META_IMAGE,
    ogType,
    canonicalUrl,
    ogLocale = "en_US",
    robots,
    assetPath,
    headWrapper,
    errorPage = false,
  } = _ref;
  const metadata = getMetadata(assetPath);
  const { gettext, interpolate, locale } = useI18n();
  const { site_stats } = useUDData();
  const Head =
    headWrapper !== null && headWrapper !== void 0
      ? headWrapper
      : React.Fragment;
  const defaultDescription = interpolate(
    gettext(
      "Udemy is an online learning and teaching marketplace with over %(courseCount)s courses and %(studentCount)s students. Learn programming, marketing, data science and more."
    ),
    {
      courseCount: formatNumber(site_stats.default.num_courses, locale),
      studentCount: site_stats.default.num_students_million,
    },
    true
  );

  // As Udemy we're not including canonicalUrls into error pages.
  const renderIfNotErrorPage = (child) => (!errorPage ? child : null);
  title =
    (_title = title) !== null && _title !== void 0
      ? _title
      : gettext("Online Courses - Learn Anything, On Your Schedule | Udemy");
  description =
    (_description = description) !== null && _description !== void 0
      ? _description
      : defaultDescription;
  ogDescription =
    (_ogDescription = ogDescription) !== null && _ogDescription !== void 0
      ? _ogDescription
      : defaultDescription;
  ogTitle =
    (_ogTitle = ogTitle) !== null && _ogTitle !== void 0
      ? _ogTitle
      : gettext("Online Courses - Learn Anything, On Your Schedule | Udemy");
  return /*#__PURE__*/ React.createElement(
    Head,
    null,
    /*#__PURE__*/ React.createElement("title", null, title),
    /*#__PURE__*/ React.createElement("meta", {
      name: "description",
      content: description,
      key: "description",
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "title",
      content: title,
      key: "title",
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "medium",
      content: "mult",
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "viewport",
      content: "width=device-width, initial-scale=1.0, minimum-scale=1.0",
      key: "viewport",
    }),
    robots &&
      /*#__PURE__*/ React.createElement("meta", {
        name: "robots",
        content: typeof robots === "string" ? robots : robots.join(", "),
      }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "apple-itunes-app",
      content: metadata.appleItunesApp,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "google-play-app",
      content: metadata.googlePlayApp,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      property: "fb:app_id",
      content: metadata.fbAppId,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      httpEquiv: "X-UA-Compatible",
      content: "IE=Edge",
    }),
    /*#__PURE__*/ React.createElement("meta", {
      httpEquiv: "Content-Type",
      content: "text/html; charset=UTF-8",
    }),
    /*#__PURE__*/ React.createElement("meta", {
      property: "og:title",
      content: ogTitle,
      key: "og:title",
    }),
    renderIfNotErrorPage(
      /*#__PURE__*/ React.createElement("meta", {
        property: "og:url",
        content: canonicalUrl,
        key: "og:url",
      })
    ),
    /*#__PURE__*/ React.createElement("meta", {
      property: "og:description",
      content: ogDescription,
      key: "og:description",
    }),
    /*#__PURE__*/ React.createElement("meta", {
      property: "og:image",
      content: ogImage,
      key: "og:image",
    }),
    /*#__PURE__*/ React.createElement("meta", {
      property: "og:type",
      content: ogType,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      property: "og:site_name",
      content: metadata.brandTitle,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      property: "og:locale",
      content: ogLocale,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "twitter:card",
      content: "summary_large_image",
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "twitter:domain",
      content: metadata.domain,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "twitter:title",
      content: ogTitle,
    }),
    renderIfNotErrorPage(
      /*#__PURE__*/ React.createElement("meta", {
        name: "twitter:url",
        content: canonicalUrl,
      })
    ),
    /*#__PURE__*/ React.createElement("meta", {
      name: "twitter:description",
      content: ogDescription,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "twitter:image",
      content: ogImage,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "twitter:site",
      content: "@udemy",
    }),
    /*#__PURE__*/ React.createElement("meta", {
      itemProp: "name",
      content: ogTitle,
    }),
    renderIfNotErrorPage(
      /*#__PURE__*/ React.createElement("meta", {
        itemProp: "url",
        content: canonicalUrl,
      })
    ),
    /*#__PURE__*/ React.createElement("meta", {
      itemProp: "description",
      content: ogDescription,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      itemProp: "image",
      content: ogImage,
    }),
    /*#__PURE__*/ React.createElement("link", {
      rel: "preconnect",
      href: "https://s.udemycdn.com/",
    }),
    /*#__PURE__*/ React.createElement("link", {
      rel: "preconnect",
      href: "https://s.udemycdn.com/",
      crossOrigin: "",
    }),
    /*#__PURE__*/ React.createElement("link", {
      rel: "preconnect",
      href: "https://img-c.udemycdn.com/",
    }),
    /*#__PURE__*/ React.createElement("link", {
      rel: "preconnect",
      href: "https://img-b.udemycdn.com/",
    }),
    /*#__PURE__*/ React.createElement("link", {
      rel: "dns-prefetch",
      href: "https://s.udemycdn.com/",
    }),
    /*#__PURE__*/ React.createElement("link", {
      rel: "dns-prefetch",
      href: "https://img-c.udemycdn.com/",
    }),
    /*#__PURE__*/ React.createElement("link", {
      rel: "dns-prefetch",
      href: "https://img-b.udemycdn.com/",
    }),
    /*#__PURE__*/ React.createElement("link", {
      rel: "apple-touch-icon",
      sizes: "180x180",
      href: metadata.appleTouchIcon,
    }),
    /*#__PURE__*/ React.createElement("link", {
      rel: "icon",
      type: "image/png",
      sizes: "32x32",
      href: metadata.brandFavIcon,
    }),
    /*#__PURE__*/ React.createElement("link", {
      rel: "icon",
      type: "image/png",
      sizes: "16x16",
      href: metadata.brandFavIcon16x16,
    }),
    /*#__PURE__*/ React.createElement("link", {
      rel: "manifest",
      href: metadata.manifest,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "application-name",
      content: metadata.brandTitle,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "msapplication-TileColor",
      content: metadata.applicationTitleColor,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "msapplication-TileImage",
      content: metadata.applicationTitleImage,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "msapplication-config",
      content: metadata.applicationConfig,
    }),
    /*#__PURE__*/ React.createElement("meta", {
      name: "theme-color",
      content: "#ffffff",
    }),
    /*#__PURE__*/ React.createElement("base", {
      href: "/",
    }),
    renderIfNotErrorPage(
      /*#__PURE__*/ React.createElement("link", {
        rel: "canonical",
        href: canonicalUrl,
      })
    )
  );
};
//# sourceMappingURL=head-seo.react-component.js.map
