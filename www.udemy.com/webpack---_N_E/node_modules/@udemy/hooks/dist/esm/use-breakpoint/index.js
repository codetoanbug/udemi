import { useEffect, useState } from "react";
import { tokens, emToPx } from "@udemy/styles";
import { useEventListener } from "../use-event-listener";
import { makeHoC } from "../utils/make-hoc";
// Breakpoints definitions
// https://www.figma.com/file/gleznOxM0zbvg6FskKds7CxC/Udemy-Lite-%5Bbase%5D
const dswBreakpoints = {
  sm: emToPx(tokens["breakpoint-sm-max"]),
  // 700
  md: emToPx(tokens["breakpoint-md-max"]),
  // 981
  lg: emToPx(tokens["breakpoint-lg-max"]),
  // 1201
  xl: emToPx(tokens["breakpoint-xl-max"]),
  // 1340
  xxl: 999999, // no maximum size
};

function getBreakpoint(width, breakpoints) {
  if (width === null) {
    return null;
  }
  const breakpointKeys = Object.keys(breakpoints);
  const foundBreakpoint = breakpointKeys.find((breakpointKey) => {
    const breakpoint = parseInt(breakpointKey);
    if (width <= breakpoint) {
      return breakpoints[breakpoint];
    }
  });

  // if no breakpoint found, just return the largest value from `breakpoints`
  if (foundBreakpoint === undefined) {
    const lastBreakpoint =
      breakpoints[breakpointKeys[breakpointKeys.length - 1]];
    return lastBreakpoint;
  }
  return breakpoints[foundBreakpoint];
}

// Helper function for optimization and consistency
const invertAndSort = (obj) =>
  Object.fromEntries(
    Object.entries(obj)
      .map((_ref) => {
        let [k, v] = _ref;
        return [v, k];
      })
      .sort()
  );
export function useBreakpoint() {
  let breakpoints =
    arguments.length > 0 && arguments[0] !== undefined
      ? arguments[0]
      : dswBreakpoints;
  const [responsiveSize, setResponsiveSize] = useState(null);

  // Invert and sort defined breakpoint map for performance and accurancy
  const breakpointsInverted = invertAndSort(breakpoints);
  const handler = () =>
    setResponsiveSize(getBreakpoint(window.innerWidth, breakpointsInverted));
  useEventListener("resize", handler);

  // invoke once when client loads
  // eslint-disable-next-line react-hooks/exhaustive-deps
  useEffect(handler, []);
  return responsiveSize;
}
export const withBreakpoint = makeHoC(() => {
  const breakpoint = useBreakpoint();
  return {
    breakpoint,
  };
});
//# sourceMappingURL=index.js.map
