import { useEffect, useRef } from "react";
import { getTargetElement } from "../utils/dom-target";

// eslint-disable-next-line @typescript-eslint/no-explicit-any

function useEventListener(eventName, handler) {
  let options =
    arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  const handlerRef = useRef(handler);
  handlerRef.current = handler;
  useEffect(() => {
    const targetElement = getTargetElement(options.target, window);
    if (
      !(
        targetElement !== null &&
        targetElement !== void 0 &&
        targetElement.addEventListener
      )
    ) {
      return;
    }
    const eventListener = (event) => {
      return handlerRef.current(event);
    };
    targetElement.addEventListener(eventName, eventListener, {
      capture: options.capture,
      once: options.once,
      passive: options.passive,
    });
    return () => {
      targetElement.removeEventListener(eventName, eventListener, {
        capture: options.capture,
      });
    };
  });
}
export { useEventListener };
//# sourceMappingURL=index.js.map
