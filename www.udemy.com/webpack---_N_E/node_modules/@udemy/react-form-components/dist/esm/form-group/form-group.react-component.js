import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _class, _class2, _dec, _class3, _class4, _descriptor, _class5;

/* eslint-disable @typescript-eslint/naming-convention */
import { getUniqueId } from "@udemy/design-system-utils";
import ErrorIcon from "@udemy/icons/dist/error.ud-icon";
import classNames from "classnames";
import { action, observable } from "mobx";
import { observer, Provider } from "mobx-react";
import React from "react"; // Note: FormGroup CSS is served up via the react-form-components.global.css file;

/**
 * Foundational interface for `FormGroups`.
 *
 * @privateRemarks
 * Excludes `udStyle`, `renderContent` and `labelProps`.
 */

// Default Props used by FormGroup, CompactFormGroup, InputPillFormGroup, and ToggleInputBlockFormGroup
export const publicFormGroupDefaultProps = {
  labelProps: {},
  note: null,
  noteProps: {},
  validationState: "neutral",
  formControlId: null,
  className: null,
};
/**
 * The interface for a FormGroup label
 *
 * @privateRemarks
 * `labelProps` is `tag`, `typography`, and any props allowed on either `<legend>` or
 * `<label>`. First create a generic type that supports either of these
 * conditions, then create instances for `<legend>` and `<label>` in the
 * discriminated union below.
 */

export /**
 * ### The FormGroup component.
 *
 * @remarks
 * This component requires global CSS.
 * You must add this import to your application's `_app.tsx` global CSS import manifest:
 *
 * @example
 * `@import '~@udemy/react-form-components/dist/react-form-components.global.css'`
 *
 * @privateRemarks
 * Renders a {@link BaseFormGroup}.
 */
let FormGroup =
  observer(
    (_class =
      ((_class2 = class FormGroup extends React.Component {
        constructor() {
          super(...arguments);

          this.renderContentFormLabel = (props, formControlId) => {
            const {
              tag: tagProp,
              typography: labelTypography,
              className: classNameProp,
            } = props.labelProps;
            const className = classNames(
              classNameProp,
              "ud-form-label",
              labelTypography !== null && labelTypography !== void 0
                ? labelTypography
                : "ud-heading-sm"
            );
            const children = /*#__PURE__*/ React.createElement(
              React.Fragment,
              null,
              props.label,
              getValidationIcon(props.validationState),
              tagProp &&
                /*#__PURE__*/ React.createElement(
                  "span",
                  {
                    className: "ud-text-xs ud-form-label-tag",
                  },
                  tagProp
                )
            ); // Guard to narrow discriminated prop types:

            if (props.udStyle === "fieldset") {
              const { tag, typography, ...legendHTMLProps } = props.labelProps;
              return /*#__PURE__*/ React.createElement(
                "legend",
                Object.assign({}, legendHTMLProps, {
                  className: className,
                }),
                children
              );
            }

            const { tag, typography, ...labelHTMLProps } = props.labelProps;
            return /*#__PURE__*/ React.createElement(
              "label",
              Object.assign({}, labelHTMLProps, {
                htmlFor: formControlId,
                className: className,
              }),
              children
            );
          };

          this.renderContent = (props, _ref) => {
            var _props$noteProps;

            let { formControlId, noteId } = _ref;
            const formLabel = this.renderContentFormLabel(props, formControlId);
            return /*#__PURE__*/ React.createElement(
              React.Fragment,
              null,
              formLabel,
              props.children,
              props.note &&
                /*#__PURE__*/ React.createElement(
                  "div",
                  Object.assign({}, props.noteProps, {
                    id: noteId,
                    role:
                      props.validationState === "error" ? "alert" : undefined,
                    className: classNames(
                      props === null || props === void 0
                        ? void 0
                        : (_props$noteProps = props.noteProps) === null ||
                          _props$noteProps === void 0
                        ? void 0
                        : _props$noteProps.className,
                      "ud-form-note ud-text-xs"
                    ),
                  }),
                  props.note
                )
            );
          };
        }

        render() {
          return /*#__PURE__*/ React.createElement(
            BaseFormGroup,
            Object.assign({}, this.props, {
              renderContent: this.renderContent,
              usage: `FormGroup udStyle="${this.props.udStyle}"`,
            })
          );
        }
      }),
      (_class2.defaultProps = {
        ...publicFormGroupDefaultProps,
        udStyle: "default",
      }),
      _class2))
  ) || _class;
/** React props interface for the BaseFormGroup component. */

export /**
 * The BaseFromGroup component.
 *
 * @remarks
 * Wraps a `<fieldset>` or `<div>` component in a mobx-react Provider.
 */
let BaseFormGroup =
  ((_dec = observable.ref),
  observer(
    (_class3 =
      ((_class4 =
        ((_class5 = class BaseFormGroup extends React.Component {
          constructor(props) {
            super(props);
            this.defaultId = void 0;
            this.defaultNoteId = void 0;

            _initializerDefineProperty(
              this,
              "propOverrides",
              _descriptor,
              this
            );

            this.defaultId = getUniqueId("form-group");
            this.defaultNoteId = getUniqueId("form-group-note");
          }

          get id() {
            var _this$props;

            const formControlId =
              (_this$props = this.props) === null || _this$props === void 0
                ? void 0
                : _this$props.formControlId;
            /* eslint-disable-next-line @typescript-eslint/prefer-nullish-coalescing */

            return formControlId || this.defaultId;
          }

          get inputAriaProps() {
            const props = this.synthesizedProps;
            const isInvalid = props.validationState === "error";
            return {
              "aria-errormessage": isInvalid && props.note ? this.noteId : null,
              "aria-describedby": !isInvalid && props.note ? this.noteId : null,
              "aria-invalid": isInvalid,
            };
          }

          get noteId() {
            var _this$props$noteProps, _this$props$noteProps2;

            return (_this$props$noteProps =
              (_this$props$noteProps2 = this.props.noteProps) === null ||
              _this$props$noteProps2 === void 0
                ? void 0
                : _this$props$noteProps2.id) !== null &&
              _this$props$noteProps !== void 0
              ? _this$props$noteProps
              : this.defaultNoteId;
          }

          get synthesizedProps() {
            return { ...this.props, ...this.propOverrides };
          }

          setPropOverrides(props) {
            this.propOverrides = props;
          }

          render() {
            const props = this.synthesizedProps;
            const {
              children,
              className,
              formControlId,
              formControlClassName,
              label,
              labelProps,
              note,
              noteProps,
              renderContent,
              udStyle,
              usage,
              validationState,
              ...htmlProps
            } = props;
            const formGroupClassName = classNames(className, "ud-form-group", {
              "ud-form-group-error": validationState === "error",
            });
            const view = renderContent(props, {
              formControlId: this.id,
              noteId: this.noteId,
            });
            const wrapper =
              udStyle === "fieldset"
                ? /*#__PURE__*/ React.createElement(
                    "fieldset",
                    Object.assign({}, htmlProps, {
                      className: formGroupClassName,
                    }),
                    view
                  )
                : /*#__PURE__*/ React.createElement(
                    "div",
                    Object.assign({}, htmlProps, {
                      className: formGroupClassName,
                    }),
                    view
                  );
            return /*#__PURE__*/ React.createElement(
              Provider,
              {
                $$udFormGroup: this,
              },
              wrapper
            );
          }
        }),
        (_class5.defaultProps = { ...publicFormGroupDefaultProps }),
        _class5)),
      ((_descriptor = _applyDecoratedDescriptor(
        _class4.prototype,
        "propOverrides",
        [_dec],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return {};
          },
        }
      )),
      _applyDecoratedDescriptor(
        _class4.prototype,
        "setPropOverrides",
        [action],
        Object.getOwnPropertyDescriptor(_class4.prototype, "setPropOverrides"),
        _class4.prototype
      )),
      _class4))
  ) || _class3);
/**
 * Returns an ErrorIcon based on {@link ValidationState}
 *
 * @param validationState - the validation state of the FormGroup
 * @param props - optional React props implementing the {@link BaseIconProps} interface
 *
 * @returns An `ErrorIcon` component if `validationSate` is `error`
 */

export function getValidationIcon(validationState, props) {
  return (
    validationState === "error" &&
    /*#__PURE__*/ React.createElement(
      ErrorIcon,
      Object.assign({}, props, {
        className: "ud-form-group-validation-icon",
        color: "negative",
        label: false,
      })
    )
  );
}
//# sourceMappingURL=form-group.react-component.js.map
