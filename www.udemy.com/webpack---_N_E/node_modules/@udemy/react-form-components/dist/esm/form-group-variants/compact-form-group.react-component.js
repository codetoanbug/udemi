import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _class,
  _class2,
  _descriptor,
  _descriptor2,
  _descriptor3,
  _descriptor4,
  _class3;

/* eslint-disable @typescript-eslint/naming-convention */
import classNames from "classnames";
import { action, observable } from "mobx";
import { observer, Provider } from "mobx-react";
import React from "react";
import {
  BaseFormGroup,
  getValidationIcon,
  publicFormGroupDefaultProps,
} from "../form-group/form-group.react-component";
/**
 * React prop interface for the CompactFormGroup component.
 *
 * @remarks
 * Implements usage with a `<label>` tag
 */

export /** The CompactFormGroup component.
 *
 * @remarks
 * Renders a FormControl with the label set as a pseudo placeholder,
 * then animating to a smaller position after text is entered.
 * Influenced by Material Design.
 *
 * This component requires global CSS.
 * You must add this import to your application's `_app.tsx` global CSS import manifest:
 *
 * @example
 * `@import '~@udemy/react-form-components/dist/react-form-components.global.css';`
 */
let CompactFormGroup =
  observer(
    (_class =
      ((_class2 =
        ((_class3 = class CompactFormGroup extends React.Component {
          constructor() {
            super(...arguments);
            this.baseFormGroupRef = /*#__PURE__*/ React.createRef();

            _initializerDefineProperty(this, "hasFocus", _descriptor, this);

            _initializerDefineProperty(this, "hasValue", _descriptor2, this);

            _initializerDefineProperty(this, "onFocus", _descriptor3, this);

            _initializerDefineProperty(this, "onBlur", _descriptor4, this);

            this.onChange = (event) => {
              this.setHasValue(!!event.target.value);
            };

            this.renderContent = (props, _ref) => {
              var _props$noteProps;

              let { formControlId, noteId } = _ref;
              const isActive = this.hasFocus || this.hasValue;
              const { tag, ...labelHTMLProps } = props.labelProps;
              return /*#__PURE__*/ React.createElement(
                React.Fragment,
                null,
                /*#__PURE__*/ React.createElement(
                  "div",
                  {
                    "data-testid": "ud-compact-form-control-container",
                    className: classNames("ud-compact-form-control-container", {
                      "ud-compact-form-control-container-focus": this.hasFocus,
                      "ud-compact-form-control-container-active": isActive,
                      "ud-compact-form-control-container-tagged": !!tag,
                    }),
                    onFocus: this.onFocus,
                    onBlur: this.onBlur,
                    onChange: this.onChange,
                  },
                  props.children,
                  /*#__PURE__*/ React.createElement(
                    "label",
                    Object.assign({}, labelHTMLProps, {
                      htmlFor: formControlId,
                      className: classNames(
                        labelHTMLProps.className,
                        "ud-form-label ud-heading-sm"
                      ),
                    }),
                    /*#__PURE__*/ React.createElement(
                      "span",
                      {
                        className: "ud-compact-form-label-content",
                      },
                      /*#__PURE__*/ React.createElement(
                        "span",
                        {
                          className: "ud-compact-form-label-text",
                        },
                        props.label
                      ),
                      getValidationIcon(props.validationState)
                    )
                  ),
                  tag &&
                    /*#__PURE__*/ React.createElement(
                      "div",
                      {
                        className: "ud-text-xs ud-form-label-tag",
                      },
                      tag
                    )
                ),
                props.note &&
                  /*#__PURE__*/ React.createElement(
                    "div",
                    Object.assign({}, props.noteProps, {
                      id: noteId,
                      role:
                        props.validationState === "error" ? "alert" : undefined,
                      className: classNames(
                        (_props$noteProps = props.noteProps) === null ||
                          _props$noteProps === void 0
                          ? void 0
                          : _props$noteProps.className,
                        "ud-form-note ud-text-xs"
                      ),
                    }),
                    props.note
                  )
              );
            };
          }

          componentDidMount() {
            var _this$baseFormGroupRe,
              _this$baseFormGroupRe2,
              _this$baseFormGroupRe3;

            const formControlNode = document.getElementById(
              (_this$baseFormGroupRe =
                (_this$baseFormGroupRe2 = this.baseFormGroupRef) === null ||
                _this$baseFormGroupRe2 === void 0
                  ? void 0
                  : (_this$baseFormGroupRe3 =
                      _this$baseFormGroupRe2.current) === null ||
                    _this$baseFormGroupRe3 === void 0
                  ? void 0
                  : _this$baseFormGroupRe3.id) !== null &&
                _this$baseFormGroupRe !== void 0
                ? _this$baseFormGroupRe
                : ""
            );
            formControlNode && this.setHasValue(!!formControlNode.value);
          }

          componentDidUpdate() {
            var _this$baseFormGroupRe4,
              _this$baseFormGroupRe5,
              _this$baseFormGroupRe6;

            const formControlNode = document.getElementById(
              (_this$baseFormGroupRe4 =
                (_this$baseFormGroupRe5 = this.baseFormGroupRef) === null ||
                _this$baseFormGroupRe5 === void 0
                  ? void 0
                  : (_this$baseFormGroupRe6 =
                      _this$baseFormGroupRe5.current) === null ||
                    _this$baseFormGroupRe6 === void 0
                  ? void 0
                  : _this$baseFormGroupRe6.id) !== null &&
                _this$baseFormGroupRe4 !== void 0
                ? _this$baseFormGroupRe4
                : ""
            );
            formControlNode && this.setHasValue(!!formControlNode.value);
          }

          setHasValue(hasValue) {
            this.hasValue = hasValue;
          }

          render() {
            return /*#__PURE__*/ React.createElement(
              Provider,
              {
                $$udCompactFormGroup: this,
              },
              /*#__PURE__*/ React.createElement(
                BaseFormGroup,
                Object.assign({}, this.props, {
                  ref: this.baseFormGroupRef,
                  className: classNames(
                    this.props.className,
                    "ud-compact-form-group"
                  ),
                  formControlClassName: "ud-compact-form-control",
                  renderContent: this.renderContent,
                  udStyle: "default",
                  usage: 'FormGroup udStyle="default"',
                })
              )
            );
          }
        }),
        (_class3.defaultProps = { ...publicFormGroupDefaultProps }),
        _class3)),
      ((_descriptor = _applyDecoratedDescriptor(
        _class2.prototype,
        "hasFocus",
        [observable],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return false;
          },
        }
      )),
      (_descriptor2 = _applyDecoratedDescriptor(
        _class2.prototype,
        "hasValue",
        [observable],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return false;
          },
        }
      )),
      _applyDecoratedDescriptor(
        _class2.prototype,
        "setHasValue",
        [action],
        Object.getOwnPropertyDescriptor(_class2.prototype, "setHasValue"),
        _class2.prototype
      ),
      (_descriptor3 = _applyDecoratedDescriptor(
        _class2.prototype,
        "onFocus",
        [action],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return () => {
              this.hasFocus = true;
            };
          },
        }
      )),
      (_descriptor4 = _applyDecoratedDescriptor(
        _class2.prototype,
        "onBlur",
        [action],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return () => {
              this.hasFocus = false;
            };
          },
        }
      ))),
      _class2))
  ) || _class;
//# sourceMappingURL=compact-form-group.react-component.js.map
