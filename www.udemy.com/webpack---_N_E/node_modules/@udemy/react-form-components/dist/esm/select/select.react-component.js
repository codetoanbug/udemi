import CollapseIcon from "@udemy/icons/dist/collapse.ud-icon";
import ExpandIcon from "@udemy/icons/dist/expand.ud-icon";
import classNames from "classnames";
import { observer, MobXProviderContext } from "mobx-react";
import React, { useContext } from "react";
import { checkFormGroup } from "../form-group/check-form-group";

/**
 * ### The Select component.
 *
 * @remarks
 * This component wraps and stylizes an HTML `<select>` tag.
 *
 * This component requires global CSS.
 * You must add this import to your application's `_app.tsx` global CSS import manifest:
 *
 * @example
 * `@import '~@udemy/react-form-components/dist/react-form-components.global.css';`
 */
export const Select = observer(
  Object.assign(
    (_ref) => {
      let {
        icon,
        placement = "top",
        size = "large",
        className,
        style = {},
        ...htmlProps
      } = _ref;
      // Note: If you change the icon sizes here, you also have to update the
      // `@select-icon-space-${size}` LESS variables.
      const { $$udFormGroup } = useContext(MobXProviderContext);
      const ariaProps =
        $$udFormGroup === null || $$udFormGroup === void 0
          ? void 0
          : $$udFormGroup.inputAriaProps;

      const renderIcon = (icon) =>
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: "ud-select-icon-container ud-select-icon-left",
          },
          /*#__PURE__*/ React.cloneElement(icon, {
            size: size === "large" ? "small" : "xsmall",
          })
        );

      checkFormGroup(
        "Select",
        {
          $$udFormGroup,
          ...htmlProps,
        },
        null,
        true
      );
      return /*#__PURE__*/ React.createElement(
        "div",
        {
          className: classNames(
            className,
            "ud-select-container",
            `ud-select-container-${size}`
          ),
          style: style,
        },
        !!icon && renderIcon(icon),
        /*#__PURE__*/ React.createElement(
          "select",
          Object.assign(
            {
              required: true,
            },
            ariaProps,
            htmlProps,
            {
              id: $$udFormGroup ? $$udFormGroup.id : htmlProps.id,
              className: classNames(
                "ud-select",
                size === "large" ? "ud-text-md" : "ud-text-sm",
                icon ? "ud-select-with-icon" : "",
                $$udFormGroup.props.formControlClassName
              ),
            }
          )
        ),
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: "ud-select-icon-container ud-select-icon-right",
          },
          placement === "top"
            ? /*#__PURE__*/ React.createElement(ExpandIcon, {
                label: false,
              })
            : /*#__PURE__*/ React.createElement(CollapseIcon, {
                label: false,
              })
        )
      );
    },
    {
      displayName: "Select",
    },
    {
      $$udType: "Select",
    },
    {
      // eslint-disable-next-line @typescript-eslint/naming-convention
      Placeholder: (_ref2) => {
        let { children } = _ref2;
        return /*#__PURE__*/ React.createElement(
          "option",
          {
            key: "placeholder",
            value: "",
            disabled: true,
          },
          children
        );
      },
    }
  )
);
//# sourceMappingURL=select.react-component.js.map
