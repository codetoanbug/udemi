import _includesInstanceProperty from "core-js-pure/stable/instance/includes.js";
import { pxToRem } from "@udemy/styles";
import classNames from "classnames";
import React from "react";
import { Image } from "../image/image.react-component"; // Note: Avatar CSS is served up via the react-core-components.global.css file;

const SIZES = {
  // Image size in pixels, image size in rem, typography class for initials, typography class for icons.
  small: [32, `${pxToRem(32)}rem`, "ud-heading-sm", "ud-heading-sm"],
  medium: [48, `${pxToRem(48)}rem`, "ud-heading-md", "ud-heading-md"],
  large: [64, `${pxToRem(64)}rem`, "ud-heading-xl", "ud-heading-xl"],
};
/** Default size of Avatar image */

export const DEFAULT_SRC_KEY = "image_75x75";
/** An AvatarUser is the data model for a user associated with a specific Avatar instance */

/**
 *
 * Avatar Component
 */
export const Avatar = (_ref) => {
  var _user$srcKey, _user$display_name;

  let {
    size = "large",
    lazy,
    alt: altChoice,
    srcKey = DEFAULT_SRC_KEY,
    className,
    ...restProps
  } = _ref;
  const [imagePixelSize, imageRemSize, initialsSize, iconSize] = SIZES[size];
  const style = {
    width: imageRemSize,
    height: imageRemSize,
  };

  if ("icon" in restProps) {
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        style: style,
        className: classNames(className, "ud-avatar", iconSize),
      },
      /*#__PURE__*/ React.cloneElement(restProps.icon, {
        size,
      })
    );
  }

  const { user, ...props } = restProps;
  const src =
    (_user$srcKey = user[srcKey]) !== null && _user$srcKey !== void 0
      ? _user$srcKey
      : "";
  const alt =
    altChoice === "DISPLAY_NAME"
      ? (_user$display_name = user.display_name) !== null &&
        _user$display_name !== void 0
        ? _user$display_name
        : ""
      : "";

  if (
    _includesInstanceProperty(src).call(src, "anonymous") &&
    user !== null &&
    user !== void 0 &&
    user.initials
  ) {
    return /*#__PURE__*/ React.createElement(
      "div",
      Object.assign({}, props, {
        "aria-label": alt || undefined,
        "aria-hidden": alt ? undefined : true,
        style: style,
        className: classNames(className, "ud-avatar", initialsSize),
        "data-purpose": "display-initials",
      }),
      user.initials
    );
  } // Only define the loading prop if lazy is defined

  let loading;

  if (lazy !== undefined) {
    loading = lazy ? "lazy" : "eager";
  }

  return /*#__PURE__*/ React.createElement(
    Image,
    Object.assign({}, props, {
      src: src,
      alt: alt,
      className: classNames(className, "ud-avatar", "ud-avatar-image"),
      width: imagePixelSize,
      height: imagePixelSize,
      style: style,
      loading: loading,
    })
  );
};
//# sourceMappingURL=avatar.react-component.js.map
