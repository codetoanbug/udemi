/* eslint-disable @typescript-eslint/naming-convention */
import classNames from "classnames";
import React, { forwardRef } from "react";
import { Button } from "../button/button.react-component"; // Note: IconButton CSS is served up via the react-core-components.global.css file;

/**
 * ### IconButton
 *
 * A `Button` with integrated icon.
 *
 * @remarks
 *
 * `IconButton` forwards a `ref` to the rendered `Button` class component instance.
 */
export const IconButton = Object.assign(
  /*#__PURE__*/ forwardRef((_ref, ref) => {
    let { overlaychildren, size = "large", ...buttonProps } = _ref;
    const iconChild = React.Children.only(buttonProps.children);
    const iconProps = {};

    if (iconChild && iconChild.props.size === undefined) {
      const iconMapping = {
        xsmall: "xsmall",
        small: "small",
        medium: "small",
        large: "medium",
      };
      iconProps.size = iconMapping[size];
    }

    return /*#__PURE__*/ React.createElement(
      Button,
      Object.assign({}, buttonProps, {
        ref: ref,
        size: size,
        className: classNames(
          "ud-btn-icon",
          `ud-btn-icon-${size}`,
          buttonProps.round ? "ud-btn-icon-round" : null,
          buttonProps.className
        ),
      }),
      /*#__PURE__*/ React.cloneElement(iconChild, iconProps),
      overlaychildren
    );
  }),
  {
    displayName: "IconButton",
  }
);
//# sourceMappingURL=icon-button.react-component.js.map
