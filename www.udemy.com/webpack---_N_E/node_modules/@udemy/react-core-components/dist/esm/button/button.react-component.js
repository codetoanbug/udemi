/* eslint-disable @typescript-eslint/naming-convention */
import { noop } from "@udemy/shared-utils";
import classNames from "classnames";
import React from "react";
import ReactDOM from "react-dom";
import { isIcon } from "../base-icon/base-icon.react-component";
// Note: Button CSS is served up via the react-core-components.global.css file;

/** ButtonStyle in JavaScript components where previously they referenced Button.propTypes.udStyle */
export const ButtonStyle = [
  "primary",
  "secondary",
  "ghost",
  "white-solid",
  "white-outline",
  "brand",
  "link",
  "link-underline",
];
/** Style of the Button  */

/** ButtonSize in JS components where previously they referenced Button.propTypes.size */
export const ButtonSize = ["xsmall", "small", "medium", "large"];
/** Size of the Button  */

/**
 * The Button Component. A wonderfully complex polymorphic React component. Choose your own
 * adventure as to what type of component to render via the `componentClass` property.
 *
 * @remarks
 *
 * `Button` will modify icons passed as children to make sure their color and size props
 * are set. Note that this behavior will fail if those icons are not direct children (e.g.,
 * icons wrapped in a React.Fragment).
 **/
export class Button extends React.Component {
  constructor() {
    super(...arguments);

    this.handleCssToggleClick = (event) => {
      var _this$props$cssToggle;

      // Support CSS Toggle/Checked State mechanism by issuing csstoggle
      // event on the corresponding CheckedState component's rendered
      // element. Button prop cssToggleId == CheckedState prop id.
      // See @udemy/react-checked-state-components for more.
      const input = document.getElementById(
        (_this$props$cssToggle = this.props.cssToggleId) !== null &&
          _this$props$cssToggle !== void 0
          ? _this$props$cssToggle
          : ""
      );
      input === null || input === void 0
        ? void 0
        : input.dispatchEvent(new Event("csstoggle"));

      if (this.props.onClick) {
        this.props.onClick(event);
      }
    };
  }

  componentDidMount() {
    // Maintained for legacy CheckedState mechanism:
    if (this.props.cssToggleId) {
      // DOM node found must be the one with attribute [data-css-toggle-id={cssToggleId}]
      // eslint-disable-next-line react/no-find-dom-node
      const button = ReactDOM.findDOMNode(this); // Remove non-React event handler for clicking on buttons with
      // data-css-toggle-id attribute. Once this mounts, then handle the click
      // event in handleClick and dispatch csstoggle events there.
      //
      // @ts-expect-error: TS does not know handleCSSToggleButtonClick

      const handleCSSToggleButtonClick = window.handleCSSToggleButtonClick;

      if (button && handleCSSToggleButtonClick) {
        button.removeEventListener("click", handleCSSToggleButtonClick);
      }
    }
  } // Maintained for legacy CheckedState mechanism

  render() {
    const {
      componentClass,
      cssToggleId,
      round,
      size,
      typography,
      udStyle,
      ...htmlPropsGiven
    } = this.props; // Empty onTouchStart needed for :active state to work on iOS:
    // https://stackoverflow.com/questions/3885018/active-pseudo-class-doesnt-work-in-mobile-safari

    const htmlPropDefaults = {
      onTouchStart: noop,
      type: "button",
    };
    const htmlPropOverrides = {}; // Maintained for legacy CheckedState mechanism:

    if (cssToggleId) {
      // Binds button to corresponding CheckedState component
      htmlPropOverrides["data-css-toggle-id"] = cssToggleId;
      htmlPropOverrides.onClick = this.handleCssToggleClick;
    }

    if (htmlPropsGiven.disabled) {
      htmlPropOverrides.onClick = htmlPropOverrides.href = undefined;
      htmlPropOverrides.tabIndex = -1;
    }

    if (componentClass !== "button") {
      htmlPropDefaults["aria-disabled"] = htmlPropsGiven.disabled;
      htmlPropOverrides.disabled = undefined;
      htmlPropOverrides.type = undefined;
    }

    const htmlProps = {
      ...htmlPropDefaults,
      ...htmlPropsGiven,
      ...htmlPropOverrides,
    };
    const children = React.Children.map(this.props.children, (child) => {
      if (typeof child === "string") {
        // If child is naked text, wrap it in a span so we can target it with CSS
        return /*#__PURE__*/ React.createElement("span", null, child);
      } else if (isIcon(child)) {
        const iconChild = child;
        const iconProps = {};

        if (iconChild && iconChild.props.size === undefined) {
          // Set icon size accordingly if it doesn't have an explicit size
          iconProps.size = size === "large" ? "small" : "xsmall";
        }

        if (this.props["aria-label"]) {
          // Set icon label to false if the button has an aria-label

          /** @ts-expect-error we are omitting `label` from type for `iconChild` above */
          iconProps.label = false;
        } // Set icon color automatically if it doesn't have an explicit color

        if (iconChild.props.color === undefined) {
          iconProps.color = "inherit";
        }

        return /*#__PURE__*/ React.cloneElement(iconChild, iconProps);
      }

      return child;
    });
    const ButtonComponent = componentClass;
    return /*#__PURE__*/ React.createElement(
      ButtonComponent,
      Object.assign({}, htmlProps, {
        className: classNames(
          "ud-btn",
          `ud-btn-${size}`,
          `ud-btn-${udStyle}`,
          round ? "ud-btn-round" : null,
          round && size === "xsmall" ? "ud-btn-round-xsmall" : null,
          typography !== null && typography !== void 0
            ? typography
            : size === "large"
            ? "ud-heading-md"
            : "ud-heading-sm",
          htmlProps.disabled || htmlProps["aria-disabled"]
            ? "ud-btn-disabled"
            : null,
          htmlProps.className
        ),
      }),
      children
    );
  }
}
Button.defaultProps = {
  componentClass: "button",
  cssToggleId: null,
  onClick: null,
  round: false,
  size: "large",
  udStyle: "primary",
  typography: null,
};
//# sourceMappingURL=button.react-component.js.map
