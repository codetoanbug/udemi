/* eslint-disable @typescript-eslint/naming-convention */
import classNames from "classnames";
import React, { createContext, useContext } from "react";
import { Button } from "../button/button.react-component"; // Note: BlockList CSS is served up via the react-core-components.global.css file;

/** The size of a BlockList */

const BlockListContext = /*#__PURE__*/ createContext({
  iconAlignment: "",
  padding: "",
  size: "",
});
/**
 * BlockList component.  Functional React component implementing {@link BlockListProps| the BlockListProps interface}
 */

export const BlockList = (_ref) => {
  let {
    size,
    padding = "normal",
    iconAlignment = "left",
    children,
    renderListItem = (child) =>
      child ? /*#__PURE__*/ React.createElement("li", null, child) : null,
    ...htmlProps
  } = _ref;
  const listItems = React.Children.map(children, renderListItem);

  if (!listItems || listItems.length === 0) {
    return null;
  }

  return /*#__PURE__*/ React.createElement(
    BlockListContext.Provider,
    {
      value: {
        iconAlignment,
        padding,
        size,
      },
    },
    /*#__PURE__*/ React.createElement(
      "ul",
      Object.assign({}, htmlProps, {
        className: classNames(
          "ud-unstyled-list ud-block-list",
          htmlProps.className
        ),
      }),
      listItems
    )
  );
};

const renderItemIcon = (icon, size) => {
  return /*#__PURE__*/ React.cloneElement(icon, {
    className: classNames(icon.props.className, "ud-block-list-item-icon"),
    size: size === "large" ? "small" : "xsmall",
  });
};
/**
 * Utility type to support polymorphic component. Defines the prop that defines
 * the element that will be rendered by the polymorphic component.
 */

/**
 * React component for rendering a BlockList.Item. Implements the
 * {@link BlockListItemProps| the BlockListItemProps type}
 *
 * @internalRemarks
 *
 * Default generic C to `<a>` to provide type checking in the case where no
 * `componentClass` is specified, and we detect an `href` prop and set the
 * rendered component to an anchor element.
 **/
export const BlockListItem = Object.assign(
  /*#__PURE__*/ React.forwardRef((_ref2, ref) => {
    let {
      icon,
      color,
      componentClass,
      children,
      loading = false,
      ...htmlProps
    } = _ref2;
    const parentBlock = useContext(BlockListContext);
    const { iconAlignment, padding, size } = parentBlock;
    const iconLeft =
      icon && iconAlignment === "left" ? renderItemIcon(icon, size) : null;
    const iconRight =
      icon && iconAlignment === "right" ? renderItemIcon(icon, size) : null;
    const content = /*#__PURE__*/ React.createElement(
      "div",
      {
        className: classNames("ud-block-list-item-content", {
          "ud-block-list-item-content-loading": loading,
        }),
      },
      loading ? "\u00A0" : children
    );
    const colorClassKey =
      color !== null && color !== void 0
        ? color
        : htmlProps.href
        ? "link"
        : "neutral";
    const typographyClassName = size === "large" ? "ud-text-md" : "ud-text-sm";
    const elementType = loading
      ? "div"
      : htmlProps.href
      ? "a"
      : componentClass !== null && componentClass !== void 0
      ? componentClass
      : "div";
    const commonClassName = classNames(
      htmlProps.className,
      "ud-block-list-item",
      `ud-block-list-item-${size}`,
      padding !== "normal" ? `ud-block-list-item-${padding}` : "",
      `ud-block-list-item-${colorClassKey}`
    );

    if (elementType === "div") {
      return /*#__PURE__*/ React.createElement(
        "div",
        Object.assign(
          {
            ref: ref,
          },
          htmlProps,
          {
            className: classNames(commonClassName, typographyClassName),
          }
        ),
        iconLeft,
        content,
        iconRight
      );
    }

    if (elementType === "a" || elementType === "button") {
      const itemProps = {
        componentClass: elementType,
        typography: typographyClassName,
        udStyle: "ghost",
      };
      return (
        /*#__PURE__*/
        // `Omit` in `PolymorphicComponentProp` fails to handle Button's discriminated
        // union props for this render. Props for BlockList.Item are still checked, however.
        // @ts-expect-error missing 'to' prop
        React.createElement(
          Button,
          Object.assign(
            {
              ref: ref,
            },
            htmlProps,
            {
              className: commonClassName,
            },
            itemProps
          ),
          iconLeft,
          content,
          iconRight
        )
      );
    } // Here we lose prop checking on `ItemElement` for this render. Props for
    // BlockList.Item are still checked against `componentClass` element type, however.

    const ItemElement = elementType;
    return /*#__PURE__*/ React.createElement(
      ItemElement,
      Object.assign(
        {
          ref: ref,
        },
        htmlProps,
        {
          className: commonClassName,
        }
      ),
      iconLeft,
      content,
      iconRight
    );
  }),
  {
    displayName: "BlockListItem",
  }
);
BlockList.Item = BlockListItem;
//# sourceMappingURL=block-list.react-component.js.map
