import _includesInstanceProperty from "core-js-pure/stable/instance/includes.js";
import classNames from "classnames";
import React from "react"; // Note: BaseIcon CSS is served up via the react-core-components.global.css file;

/**
 * Method to determine if React component is a `Icon` or `BaseIcon` component.
 * @returns boolean - true implies that it is `Icon` or `BaseIcon`, based on `displayName`
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any

export const isIcon = (element) => {
  var _element$type;

  const validIconDisplayNames = ["Icon", "BaseIcon"];
  return _includesInstanceProperty(validIconDisplayNames).call(
    validIconDisplayNames,
    element === null || element === void 0
      ? void 0
      : (_element$type = element.type) === null || _element$type === void 0
      ? void 0
      : _element$type.displayName
  );
};
/** Various sizes allowed for Iconography */

const displayName = "BaseIcon";
const $$udType = "BaseIcon";
/**
 * Do not use this component directly.
 * This is the BaseIcon component used by our Webpack loader to display a `.ud-icon` file.
 */

const BaseIconComponent = (_ref) => {
  let {
    color = "neutral",
    size = "small",
    label,
    glyph,
    className,
    ...props
  } = _ref;
  const colorClass = color === "inherit" ? null : `ud-icon-color-${color}`;
  return (
    /*#__PURE__*/
    // Django and Lightning render an SVG Definition block (one big <svg />) that defines every icon
    React.createElement(
      "svg",
      Object.assign(
        {
          // eslint-disable-next-line @typescript-eslint/naming-convention
          "aria-hidden": label === false ? true : undefined,
          "aria-label": label === false ? undefined : label,
          role: label === false ? undefined : "img",
          focusable: "false",
        },
        props,
        {
          className: classNames(
            "ud-icon",
            `ud-icon-${size}`,
            colorClass,
            className
          ),
        }
      ),
      /*#__PURE__*/ React.createElement("use", {
        xlinkHref: `#icon-${glyph}`,
      })
    )
  );
};
/**
 * Do not use this component directly.
 * This is the BaseIcon component used by our Webpack loader to display a `.ud-icon` file.
 */

export const BaseIcon = Object.assign(BaseIconComponent, {
  displayName,
  $$udType,
});
//# sourceMappingURL=base-icon.react-component.js.map
