/**
 * This file contains the base classes for the events.
 * Specific events should be defined in the events.js file.
 */

import { generateTrackingId } from "./helpers";
export class TrackingEvent {
  constructor(_type) {
    this._type = _type;
    this.createTime = void 0;
    this.sendTime = void 0;
    this.eventId = void 0;
    this.createTime = Date.now();
    this.sendTime = null;
    this.eventId = generateTrackingId();
  }
  setSendTime(time) {
    this.sendTime = time;
  }
  getType() {
    return this._type;
  }
}
export class Dimensions {
  constructor(width, height) {
    this.width = width;
    this.height = height;
  }
}
export class Page {
  constructor(trackingId, key) {
    this.trackingId = trackingId;
    this.key = key;
  }
}
export class ClientHeader {
  constructor(
    appKey,
    sourceServiceName,
    organizationId,
    userId,
    visitorUuid,
    sessionId,
    clientId,
    page,
    isMobile,
    isD2CSubscriber
  ) {
    this.appKey = appKey;
    this.sourceServiceName = sourceServiceName;
    this.organizationId = organizationId;
    this.userId = userId;
    this.visitorUuid = visitorUuid;
    this.sessionId = sessionId;
    this.clientId = clientId;
    this.page = page;
    this.isMobile = isMobile;
    this.isD2CSubscriber = isD2CSubscriber;
  }
}

/**
 * Client event will be the base class of all events generated in the front-end.
 */
export class ClientEvent extends TrackingEvent {
  constructor() {
    super(...arguments);
    this.clientHeader = void 0;
  }
  processContext(context) {
    this.clientHeader = new ClientHeader(
      context.appKey,
      context.sourceServiceName,
      context.organizationId,
      context.userId,
      context.visitorUuid,
      context.sessionId,
      context.clientId,
      new Page(context.pageTrackingId, context.pageKey),
      context.isMobile,
      context.isD2CSubscriber
    );
  }
}
//# sourceMappingURL=event-common.js.map
