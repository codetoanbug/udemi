import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _class, _descriptor;
import autobind from "autobind-decorator";
import { observable, computed, action } from "mobx";
import { udExpiringLocalStorage } from "../external/ud-expiring-local-storage";
const debugCookieTimeoutMs = 30 * 60 * 1000;
const debugQueryParamKey = "debug_events";

// The interface for untyped utils/ud-expiring-local-storage

export let TrackerDebuggerStore =
  ((_class = class TrackerDebuggerStore {
    constructor() {
      _initializerDefineProperty(this, "focusedItemId", _descriptor, this);
      this._state = void 0;
      this._expiration = void 0;
      this._expiration = new Date(Date.now() + debugCookieTimeoutMs);
      this._state = udExpiringLocalStorage(
        "eventDebuggerStorage",
        "storage-1.0",
        this._expiration
      );
      if (typeof window !== "undefined") {
        const queryParam = new URLSearchParams(window.location.search).get(
          debugQueryParamKey
        );

        // if query param exists, we should override the existing values on the local storage
        if (queryParam !== null) {
          // Even empty string should be evaluated as true, ?debug_events
          const shouldEnableDebugger =
            queryParam !== "false" && queryParam !== "0";
          this._state.set("isEnabled", shouldEnableDebugger);
        }
        if (this.isEnabled) {
          // udExpiringLocalStorage doesn't update the existing expiration
          // Updating the expiration if the tracker is enabled
          this._state.updateExpiration(this._expiration);
        }
      }
    }
    invertPosition() {
      this._state.set("isInvertedPosition", !this.isInvertedPosition);
    }
    disable() {
      this._state.set("isEnabled", false);
    }
    get isEnabled() {
      return this._state.get("isEnabled") || false;
    }
    get isInvertedPosition() {
      return this._state.get("isInvertedPosition") || false;
    }
    setFocusedItemId(id) {
      this.focusedItemId = id;
    }
  }),
  ((_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "focusedItemId",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return null;
      },
    }
  )),
  _applyDecoratedDescriptor(
    _class.prototype,
    "invertPosition",
    [autobind],
    Object.getOwnPropertyDescriptor(_class.prototype, "invertPosition"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "disable",
    [autobind],
    Object.getOwnPropertyDescriptor(_class.prototype, "disable"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "isEnabled",
    [computed],
    Object.getOwnPropertyDescriptor(_class.prototype, "isEnabled"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "isInvertedPosition",
    [computed],
    Object.getOwnPropertyDescriptor(_class.prototype, "isInvertedPosition"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "setFocusedItemId",
    [autobind, action],
    Object.getOwnPropertyDescriptor(_class.prototype, "setFocusedItemId"),
    _class.prototype
  )),
  _class);
//# sourceMappingURL=tracker-debugger.mobx-store.js.map
