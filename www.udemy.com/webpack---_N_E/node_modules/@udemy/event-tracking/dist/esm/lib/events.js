import { getUserConsentCategories } from "../external/get-user-consent-categories";
import { ClientEvent } from "../tracker/event-common";
/**
 * Define application-wide events here;
 * define app- or component-specific events in the app or component directory.
 *
 * You need to exactly follow the schema definitions in this repository:
 * https://github.com/udemy/schema-store
 * If you need to create a new event, you first need to create it in that repository.
 * Subclass from ClientEvent base class. Name of the class should match the name of the schema in the
 * repo. Attributes should have one to one correspondence with the fields in the event schema.
 * Note that class attributes are snake_case versions of the camelCase schema fields.
 * This conversion is handled while serializing the event object to json.
 * For example, for ExampleEvent with schema ExampleEvent.avdl below:
 *
 * record ExampleEvent {
 *   EventClientHeader clientHeader;
 *   int exampleIntegerField;
 *   string exampleStringField;
 *   union { null, array<int> } exampleListField = null;
 * }
 *
 * You would have the following class in this file:
 *
 * class ExampleEvent extends ClientEvent {
 *     constructor({example_integer_field, example_string_field, example_list_field}) {
 *         super('ExampleEvent');
 *         this.example_integer_field = example_integer_field
 *         this.example_string_field = example_string_field
 *         this.example_list_field = example_list_field
 *     }
 * }
 */
/**
 * PublicTestEvent can be used for development purposes
 */
class PublicTestEvent extends ClientEvent {
  constructor(_ref) {
    let { testField1, testField2 } = _ref;
    super("PublicTestEvent");
    this.testField1 = void 0;
    this.testField2 = void 0;
    this.testField1 = testField1;
    this.testField2 = testField2;
  }
}

/**
 * ClientLoadEvent is fired when the backend rendered page is loaded in the browser.
 * It gives all fundamental information about the front-end application.
 */
class ClientLoadEvent extends ClientEvent {
  constructor() {
    super("ClientLoadEvent");
    this.appVersion = void 0;
    this.appLanguage = void 0;
    this.url = void 0;
    this.referrer = void 0;
    this.timezoneOffset = void 0;
    this.screen = void 0;
    this.source = void 0;
    this.viewport = void 0;
    this.userConsentCategories = void 0;
  }
  processContext(context) {
    super.processContext(context);
    this.appVersion = context.appVersion;
    this.appLanguage = context.appLanguage;
    this.url = context.url;
    this.referrer = context.referrer;
    this.timezoneOffset = context.timezoneOffset;
    this.screen = context.screen;
    this.source = context.sourceServiceName;
    this.viewport = context.viewport;
    this.userConsentCategories = getUserConsentCategories();
  }
}

/**
 * PageViewEvent is fired when a backend rendered page is loaded in the browser or when the react
 * router changes the route.
 */
class PageViewEvent extends ClientEvent {
  constructor(isRouteChange) {
    super("PageViewEvent");
    this.isRouteChange = isRouteChange;
    this.url = void 0;
  }
  processContext(context) {
    super.processContext(context);
    this.url = context.url;
  }
}

/**
 * ResumePageViewEvent is fired when a page is loaded from the backward/forward cache.
 * This event is fired only in browsers that support bf cache.
 * https://web.dev/bfcache/
 */
class PageResumeEvent extends ClientEvent {
  constructor() {
    super("PageResumeEvent");
    this.url = void 0;
  }
  processContext(context) {
    super.processContext(context);
    this.url = context.url;
  }
}

/**
 * Fired on a browser visibility change event, i.e. when a user
 * switches tabs/goes to another window/comes back etc.
 */
class PageVisibilityChangeEvent extends ClientEvent {
  constructor(isVisible) {
    super("PageVisibilityChangeEvent");
    this.isVisible = isVisible;
  }
}

/**
 This event is fired as a general-purpose click event when a tracked HTML element is clicked.

 !!IMPORTANT!! You should almost always trigger this event on keypress of enter/space to capture
 actions taken by keyboard users.

 e.g.
 <div onClick={this.handleAction} onKeyDown={onEnterAndSpace(this.handleAction)}>
 */
class ClickEvent extends ClientEvent {
  constructor(_ref2) {
    let {
      componentName,
      trackingId = undefined,
      relatedObjectType = undefined,
      relatedObjectId = undefined,
    } = _ref2;
    super("ClickEvent");
    this.componentName = void 0;
    this.trackingId = void 0;
    this.relatedObjectType = void 0;
    this.relatedObjectId = void 0;
    this.componentName = componentName;
    this.trackingId = trackingId;
    this.relatedObjectType = relatedObjectType;
    this.relatedObjectId = relatedObjectId;
  }
}
ClickEvent.relatedObjectTypes = {
  course: "course",
  user: "user",
  courseLabel: "course_label",
  courseCategory: "course_category",
  coursesubCategory: "course_subcategory",
  lecture: "lecture",
};
export {
  PageVisibilityChangeEvent,
  PublicTestEvent,
  ClientLoadEvent,
  PageViewEvent,
  PageResumeEvent,
  ClickEvent,
};
//# sourceMappingURL=events.js.map
