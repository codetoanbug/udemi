import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
var _class;
import autobind from "autobind-decorator";
import React, { Component } from "react";
import { TrackerDebugger } from "../debugger/tracker-debugger.react-component";
import tracker from "../tracker/tracker";
import { EventInfoStore } from "./event-info.mobx-model";
import { ClientLoadEvent, PageViewEvent, PageResumeEvent } from "./events";
export let TrackerInitializer =
  ((_class = class TrackerInitializer extends Component {
    constructor(props) {
      super(props);
      this.eventInfoStore = void 0;
      this.debugRef = /*#__PURE__*/ React.createRef();
      this.handlePageShowEvent = (event) => {
        if (event.persisted) {
          // page restored from bfcache, raise resume page view event
          tracker.publishEvent(new PageResumeEvent());
        }
      };
      this.eventInfoStore = new EventInfoStore();
    }
    async componentDidMount() {
      if (this.props.trackingContext) {
        tracker.initialize(this.props.trackingContext, this.publishHook);
      }
      tracker.setPublishHook(this.publishHook);
      tracker.publishEvent(new ClientLoadEvent());
      this.initializePageTracking();
      window.addEventListener("pageshow", this.handlePageShowEvent);
    }
    componentWillUnmount() {
      window.removeEventListener("pageshow", this.handlePageShowEvent);
    }
    initializePageTracking() {
      if (this.props.spaTrackingActive) {
        /*
      If the page is a SPA and if there is a PageTrackingRoute that has already sent the first
      PageViewEvent, do not send one here.
      */
        return;
      }
      tracker.publishEvent(new PageViewEvent(false));
    }
    publishHook(event, status, failureReason) {
      this.eventInfoStore.updateEventStatus(event, status, failureReason);
    }
    render() {
      return /*#__PURE__*/ React.createElement(TrackerDebugger, {
        ref: this.debugRef,
        eventInfoStore: this.eventInfoStore,
      });
    }
  }),
  (_applyDecoratedDescriptor(
    _class.prototype,
    "componentDidMount",
    [autobind],
    Object.getOwnPropertyDescriptor(_class.prototype, "componentDidMount"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "componentWillUnmount",
    [autobind],
    Object.getOwnPropertyDescriptor(_class.prototype, "componentWillUnmount"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "publishHook",
    [autobind],
    Object.getOwnPropertyDescriptor(_class.prototype, "publishHook"),
    _class.prototype
  )),
  _class);
//# sourceMappingURL=tracker-initializer.react-component.js.map
