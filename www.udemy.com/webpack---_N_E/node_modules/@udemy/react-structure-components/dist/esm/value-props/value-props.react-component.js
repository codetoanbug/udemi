import classNames from "classnames";
import React from "react";
import styles from "./value-props.module.css";
/** The size of the rendered {@link ValueProp} */

/**
 * ### The ValueProp component.
 */
export const ValueProps = (_ref) => {
  let { size, children } = _ref;
  const valuePropsChildren = React.Children.toArray(children);
  const isSmallWithoutIcons =
    size === "small" && !valuePropsChildren.every((child) => child.props.icon);
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      className: classNames(styles.props, styles[`props--${size}`], {
        [styles["props--small-no-icons"]]: isSmallWithoutIcons,
      }),
    },
    React.Children.map(children, (child, index) =>
      /*#__PURE__*/ React.cloneElement(child, {
        key: index,
        size,
      })
    )
  );
};
/** The React prop interface for small ValueProps.Prop */

/** Smaller rendering of a ValueProp.Prop */
const SmallValueProp = (_ref2) => {
  let { icon: IconComponent, headline, text } = _ref2;
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      className: styles.prop,
    },
    IconComponent &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: classNames(styles.graphic, {
            [styles.centered]: !text,
          }),
        },
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: styles.icon,
          },
          /*#__PURE__*/ React.createElement(IconComponent, {
            label: false,
            color: "neutral",
            size: "medium",
          })
        )
      ),
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: classNames(styles.body, {
          [styles.centered]: !text,
        }),
      },
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: "ud-heading-md",
        },
        headline
      ),
      text &&
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: classNames("ud-text-sm", styles.text),
          },
          text
        )
    )
  );
};
/** The React prop interface for large ValueProps.Props */

/** Larger rendering of a ValueProp.Prop */
const LargeValueProp = (_ref3) => {
  let { image, icon: IconComponent, headline, text, cta } = _ref3;
  let graphic;

  if (!image && !IconComponent && !text) {
    throw new Error(
      "At least one of following props: `image`, `icon`, `text` must be provided for LargeValueProps."
    );
  }

  if (image) {
    graphic = /*#__PURE__*/ React.cloneElement(image, {
      width: 100,
      height: 100,
    });
  } else if (IconComponent) {
    graphic = /*#__PURE__*/ React.createElement(
      "div",
      {
        className: styles.icon,
      },
      /*#__PURE__*/ React.createElement(IconComponent, {
        label: false,
        color: "neutral",
        size: "xlarge",
      })
    );
  }

  return /*#__PURE__*/ React.createElement(
    "div",
    {
      className: styles.prop,
    },
    graphic &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles.graphic,
        },
        graphic
      ),
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: classNames("ud-heading-lg", styles.body),
      },
      headline
    ),
    text &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: classNames(styles.body, styles.text),
        },
        text
      ),
    cta &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles.cta,
        },
        cta
      )
  );
};
/**
 * Common React prop interface for the ValueProps.Prop component.
 *
 * @internal
 *
 * @remarks
 * A user will never interact with this interface directly.
 */

/**
 * ### The ValueProp component.
 *
 * @remarks
 * Exposed to users as `ValueProps.Prop`.
 * Rendering of {@link SmallValueProp} or {@link LargeValueProp} is based of the `size` prop.
 */
const ValueProp = (_ref4) => {
  let { size = "small", ...props } = _ref4;
  return size === "small"
    ? /*#__PURE__*/ React.createElement(SmallValueProp, props)
    : /*#__PURE__*/ React.createElement(LargeValueProp, props);
};

ValueProps.Prop = ValueProp;
//# sourceMappingURL=value-props.react-component.js.map
