import { getUniqueId, Keys } from "@udemy/design-system-utils";
import { useI18n } from "@udemy/i18n";
import { Button } from "@udemy/react-core-components";
import classNames from "classnames";
import { observer } from "mobx-react";
import React, { useEffect, useRef, useState } from "react";
import { Carousel } from "../carousel/carousel.react-component";
import styles from "./tabs.module.css";
/** React props interface for the Tabs component. */

/**
 * The Tab component.
 *
 * @remarks
 * This component just returns its children. The {@link Tabs} component uses its structure
 * to build the tab titles and contents.
 */
export class Tab extends React.Component {
  render() {
    return this.props.children;
  }
}
/** The React props interface for the Tabs component. */

/** The Tabs component.
 *
 * @privateRemarks
 * Object.assign is used to skirt TypeScript type checking so we can expose:
 * - Tabs.Tab - The {@link Tab} component.
 */
export const Tabs = Object.assign(
  observer((_ref) => {
    let {
      children = [],
      fullWidth = false,
      toggleStrategy = "show-hide",
      size = "large",
      invertedColors = false,
      prioritizeTouch = false,
      ...props
    } = _ref;
    const [id] = useState(() => getUniqueId("tabs"));
    const carouselRef = useRef(null);
    const tabContainerRef = useRef(null);
    const [isMounted, setIsMounted] = useState(false);
    const [isCarouselLastPage, setIsCarouselLastPage] = useState(false);
    const [isCarouselPageable, setIsCarouselPageable] = useState(false);
    const { gettext } = useI18n();
    useEffect(() => {
      setIsMounted(true);
    }, []);
    const tabs = React.Children.toArray(children).filter(Boolean);

    const defaultTabIndex = () => {
      if (!props.defaultTabId) {
        return 0;
      }

      return Math.max(
        0,
        tabs.findIndex((tab) => tab.props.id === props.defaultTabId)
      );
    };

    const [selectedActiveTabIndex, setSelectedActiveTabIndex] = useState(() =>
      defaultTabIndex()
    ); // Derived from user-selected tab index, the override prop
    // activeTabId and the defaultTabIndex()

    const activeTabIndex = () => {
      if (!props.activeTabId) {
        return selectedActiveTabIndex;
      }

      const index = tabs.findIndex((tab) => tab.props.id === props.activeTabId);
      return index === -1 ? defaultTabIndex() : index;
    };

    const hasOverflow = () => {
      const carousel = carouselRef.current;
      return (
        isMounted && !!carousel && isCarouselPageable && !isCarouselLastPage
      );
    };

    const updateActiveTabIndex = (index) => {
      if (index !== activeTabIndex()) {
        var _props$onSelect;

        setSelectedActiveTabIndex(index);
        (_props$onSelect = props.onSelect) === null ||
        _props$onSelect === void 0
          ? void 0
          : _props$onSelect.call(props, tabs[index].props.id);
      }
    };

    const onKeyDown = (event) => {
      if (event.keyCode === Keys.LEFT || event.keyCode === Keys.RIGHT) {
        var _tabContainerRef$curr;

        const tabs =
          (_tabContainerRef$curr = tabContainerRef.current) === null ||
          _tabContainerRef$curr === void 0
            ? void 0
            : _tabContainerRef$curr.querySelectorAll('[role="tab"]');

        if (tabs) {
          const targetTab =
            tabs[activeTabIndex() + (event.keyCode === Keys.RIGHT ? 1 : -1)];

          if (targetTab) {
            targetTab.click();
            targetTab.focus();

            if (hasOverflow()) {
              targetTab.scrollIntoView();
            }
          }
        }
      }
    };

    const handleCarouselMutation = (_ref2) => {
      let { isLastPage, isPageable } = _ref2;
      setIsCarouselLastPage(isLastPage);
      setIsCarouselPageable(isPageable);
    };

    const navButtons = [],
      tabContents = [];
    tabs.forEach((tab, index) => {
      const isActive = activeTabIndex() === index;
      const tabContentId = `${id}-content-${index}`;
      const tabId = `${id}-tab-${index}`;
      const tabButton = /*#__PURE__*/ React.createElement(
        Button,
        {
          id: tabId,
          "aria-selected": isActive,
          onClick: () => updateActiveTabIndex(index),
          onKeyDown: onKeyDown,
          role: "tab",
          size: size === "small" ? "medium" : "large",
          className: classNames("ud-nav-button", styles["nav-button"], {
            // eslint-disable-next-line @typescript-eslint/naming-convention
            "ud-nav-button-active": isActive,
            [styles.active]: isActive,
            [styles.xlarge]: size === "xlarge",
          }),
          tabIndex: isActive ? 0 : -1,
          udStyle: "ghost",
        },
        tab.props.title
      );
      navButtons.push(
        /*#__PURE__*/ React.createElement(
          "div",
          {
            key: `${id}-title-${index}`,
            className: classNames(
              "ud-nav-button-container",
              styles["nav-button-container"],
              {
                // eslint-disable-next-line @typescript-eslint/naming-convention
                "ud-nav-button-container-active": isActive,
                [styles.active]: isActive,
              },
              [styles[size]]
            ),
          },
          tab.props.renderTabButton
            ? tab.props.renderTabButton(tabButton)
            : tabButton
        )
      );
      tabContents.push(
        /*#__PURE__*/ React.createElement(
          "div",
          {
            key: tabContentId,
            id: tabContentId,
            role: "tabpanel",
            className: classNames("ud-tab-content", styles["tab-content"], {
              [styles.active]: isActive,
            }),
            tabIndex: isActive ? 0 : -1,
            "data-purpose": "tab-container",
            "aria-labelledby": tabId,
          },
          (toggleStrategy === "show-hide" || isActive) && tab.props.children
        )
      );
    });

    if (!navButtons.length || !tabContents.length) {
      return null;
    }

    const navButtonsWrapped = fullWidth
      ? navButtons
      : /*#__PURE__*/ React.createElement(
          Carousel,
          {
            pagerButtonSize: size === "large" ? "large" : "medium",
            ref: carouselRef,
            allowScroll: prioritizeTouch,
            showPager: true,
            pagerButtonClassName: styles["pagination-buttons"],
            ariaLive: "off",
            gridSize: size === "xlarge" ? "large" : "medium",
            onMutation: handleCarouselMutation,
            ariaLabel: gettext("Tab Navigation"),
          },
          navButtons
        );
    const gradient =
      !fullWidth && prioritizeTouch && hasOverflow()
        ? /*#__PURE__*/ React.createElement("div", {
            "data-purpose": "tab-overflow-gradient",
            className: styles.gradient,
          })
        : null;
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        className: classNames(styles["tabs-container"], {
          [styles["full-width"]]: fullWidth,
          [styles.inverted]: invertedColors,
        }),
      },
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: classNames(
            "ud-tabs-nav-buttons",
            styles["tabs-nav-buttons"]
          ),
          role: "tablist",
          ref: tabContainerRef,
          "data-purpose": "tab-nav-buttons",
        },
        navButtonsWrapped,
        gradient
      ),
      tabContents
    );
  }), // define Tabs.Tab helper property:
  // eslint-disable-next-line @typescript-eslint/naming-convention
  {
    Tab,
    displayName: "Tabs",
  }
);
//# sourceMappingURL=tabs.react-component.js.map
