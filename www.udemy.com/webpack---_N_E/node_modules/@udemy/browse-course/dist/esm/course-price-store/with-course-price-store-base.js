import hoistStatics from "hoist-non-react-statics";
import { observer } from "mobx-react";
import React from "react";
import { getDisplayName } from "@udemy/shared-utils";
import { withStores } from "@udemy/store-provider";
import { CoursePriceStore, PriceStatus } from "./course-price-store";

// Props injected by the HOC into the wrapped component

// Props to constrain those required of the wrapped component by the HOC

/**
 * Props for the WithCoursePriceStore higher-order component.
 *
 * @privateRemarks
 *
 * The HOC will inject the props in InjectedProps into the wrapped component, so
 * we mark them as optional for external consumers.
 */

export function withCoursePriceStoreBase(LoadingComponent, ErrorComponent) {
  return function withDeferredCoursePrice(WrappedPriceText) {
    class InternalAsyncPriceText extends React.Component {
      constructor(props) {
        super(props);
        this.coursePriceStore = void 0;
        this.coursePriceStore = props.stores[0];
        props.courses.forEach((course) => this.registerCourse(course));
      }
      registerCourse(course) {
        if (course.price) {
          this.coursePriceStore.registerCourse(course, {
            price: course.price,
            price_detail: course.price_detail,
            discount: course.discount,
            discount_price: course.discount_price,
          });
        } else {
          this.coursePriceStore.registerCourse(course);
        }
      }
      getPriceAmountsFromCoursePrice(coursePrice) {
        var _coursePrice$discount;
        const courseListPrice =
          coursePrice !== null &&
          coursePrice !== void 0 &&
          coursePrice.price_detail
            ? coursePrice.price_detail.amount
            : 0;
        const courseDiscountPrice =
          coursePrice !== null &&
          coursePrice !== void 0 &&
          (_coursePrice$discount = coursePrice.discount) !== null &&
          _coursePrice$discount !== void 0 &&
          _coursePrice$discount.price
            ? coursePrice.discount.price.amount
            : 0;
        return {
          courseListPrice,
          courseDiscountPrice,
        };
      }
      getPriceStringsFromCoursePrice(coursePrice) {
        var _coursePrice$discount2;
        const courseListPriceString =
          coursePrice !== null &&
          coursePrice !== void 0 &&
          coursePrice.price_detail
            ? coursePrice.price_detail.price_string
            : undefined;
        const courseDiscountPriceString =
          coursePrice !== null &&
          coursePrice !== void 0 &&
          (_coursePrice$discount2 = coursePrice.discount) !== null &&
          _coursePrice$discount2 !== void 0 &&
          _coursePrice$discount2.price
            ? coursePrice.discount.price.price_string
            : undefined;
        return {
          courseListPriceString,
          courseDiscountPriceString,
        };
      }
      render() {
        const { courses, loaderProps, ...restOfProps } = this.props;
        const hasError = courses.some((course) => {
          var _this$coursePriceStor;
          return (
            ((_this$coursePriceStor = this.coursePriceStore.priceMap.get(
              course.id
            )) === null || _this$coursePriceStor === void 0
              ? void 0
              : _this$coursePriceStor.status) === PriceStatus.PRICE_STATUS_ERROR
          );
        });
        if (hasError) {
          return /*#__PURE__*/ React.createElement(ErrorComponent, {
            className: this.props.className,
          });
        }
        const isLoading = courses.some((course) => {
          var _this$coursePriceStor2;
          return (
            ((_this$coursePriceStor2 = this.coursePriceStore.priceMap.get(
              course.id
            )) === null || _this$coursePriceStor2 === void 0
              ? void 0
              : _this$coursePriceStor2.status) ===
            PriceStatus.PRICE_STATUS_LOADING
          );
        });
        if (isLoading) {
          return /*#__PURE__*/ React.createElement(
            LoadingComponent,
            Object.assign({}, loaderProps, {
              className: this.props.className,
            })
          );
        }
        let listPrice = 0;
        let discountPrice = 0;
        courses.forEach((course) => {
          // Cast to CoursePrice after checking for loading state
          const currentCoursePrice = this.coursePriceStore.priceMap.get(
            course.id
          );
          const { courseListPrice, courseDiscountPrice } =
            this.getPriceAmountsFromCoursePrice(currentCoursePrice);
          listPrice +=
            courseListPrice !== null && courseListPrice !== void 0
              ? courseListPrice
              : 0;
          if (courseDiscountPrice) {
            discountPrice += courseDiscountPrice;
          } else {
            discountPrice +=
              courseListPrice !== null && courseListPrice !== void 0
                ? courseListPrice
                : 0;
          }
        });
        const priceTextProps = {
          listPrice,
          discountPrice,
        };
        if (courses.length === 1) {
          const coursePrice = this.coursePriceStore.priceMap.get(courses[0].id);
          const { courseListPriceString, courseDiscountPriceString } =
            this.getPriceStringsFromCoursePrice(coursePrice);
          priceTextProps.listPriceString = courseListPriceString;
          priceTextProps.discountPriceString =
            courseDiscountPriceString || courseListPriceString;
          const loadedCoursePrice = coursePrice;
          priceTextProps.trackingEventContext =
            loadedCoursePrice !== null &&
            loadedCoursePrice !== void 0 &&
            loadedCoursePrice.price_serve_tracking_id
              ? {
                  priceServeTrackingId:
                    loadedCoursePrice === null || loadedCoursePrice === void 0
                      ? void 0
                      : loadedCoursePrice.price_serve_tracking_id,
                }
              : undefined;
        }
        return /*#__PURE__*/ React.createElement(
          WrappedPriceText,
          Object.assign(
            {
              courses: courses,
            },
            priceTextProps,
            restOfProps
          )
        );
      }
    }
    InternalAsyncPriceText.defaultProps = {
      courses: [],
      className: "",
      loaderProps: {},
    };
    InternalAsyncPriceText.displayName = `WithCourse${getDisplayName(
      WrappedPriceText
    )}`;
    const AsyncPriceText = withStores(
      [CoursePriceStore],
      observer(InternalAsyncPriceText)
    );
    return hoistStatics(AsyncPriceText, WrappedPriceText);
  };
}
//# sourceMappingURL=with-course-price-store-base.js.map
