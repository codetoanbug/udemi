import { when, observable } from "mobx";
import { inject } from "mobx-react";
import React, { useState } from "react";
import { trackPriceImpression } from "@udemy/shopping";
import { useUDData } from "@udemy/ud-data";

/**
 * Props for price text components from `@udemy/browse-course` that include
 * built-in view tracking.
 */

/**
 * Higher-order component to add view tracking to price text components.
 *
 * @param PriceTextComponent - price text component that renders with `PriceTextProps`
 * @returns a component to render price text with view tracking fired from the price text `view` event
 */
export const withPriceTextTracking = (PriceTextComponent) => {
  var _ref, _PriceTextComponent$d;
  const displayName =
    (_ref =
      (_PriceTextComponent$d = PriceTextComponent.displayName) !== null &&
      _PriceTextComponent$d !== void 0
        ? _PriceTextComponent$d
        : PriceTextComponent.name) !== null && _ref !== void 0
      ? _ref
      : "Component";
  const PriceTextWithTracking = Object.assign(
    inject((_ref2) => {
      let { funnelLogContextStore } = _ref2;
      return {
        funnelLogContextStore,
      };
    })((_ref3) => {
      let { funnelLogContextStore, ...props } = _ref3;
      const { Config: udConfig, me: udMe } = useUDData();
      const [udMeLoading] = useState(
        observable({
          isLoading: false,
        })
      );
      // Retain observable in state so `when` guard can watch the same reference
      udMeLoading.isLoading = udMe.isLoading;
      const onViewWithTracking = async () => {
        var _props$onView;
        (_props$onView = props.onView) === null || _props$onView === void 0
          ? void 0
          : _props$onView.call(props);
        await when(() => !udMeLoading.isLoading);
        trackPriceImpression({
          ...props,
          funnelLogContextStore,
          currency: udConfig.price_country.currency,
        });
      };
      return /*#__PURE__*/ React.createElement(
        PriceTextComponent,
        Object.assign({}, props, {
          onView: onViewWithTracking,
        })
      );
    }),
    {
      displayName: `WithPriceTextTracking(${displayName})`,
    }
  );
  return PriceTextWithTracking;
};
//# sourceMappingURL=with-price-text-tracking.react-component.js.map
