import classNames from "classnames";
import { inject } from "mobx-react";
import PropTypes from "prop-types";
import React, { createContext } from "react";
import { BackendSourceOptions } from "@udemy/browse-event-tracking";
import {
  TrackImpression,
  trackGenericCourseClick,
} from "@udemy/event-tracking";
import { withFunnelLog } from "@udemy/funnel-tracking";
import {
  badgesPropsFrom,
  CourseCardBadges,
  CourseCardDetails,
  CourseCardImage,
  CourseCardInstructors,
  CourseCardRatings,
  CourseCardTitle,
  detailsPropsFrom,
  imagePropsFrom,
  instructorsPropsFrom,
  ratingsPropsFrom,
} from "@udemy/react-card-components";
import { PlayOverlay } from "@udemy/react-structure-components";
import { COURSE_BADGE_CODING_EXERCISES } from "../course-badges/constants";
import {
  getCourseBadgeFromBadgesFamily,
  getCourseBadgeFromType,
} from "../course-badges/course-badges.react-component";
import { CourseCardSeoInfo } from "../course-card-seo-info/course-card-seo-info.react-component";
import { pricePropsWithTrackingFrom } from "../course-price-events/course-card-price-events";
import { PersonalPlanBadge } from "../personal-plan-badge/personal-plan-badge.react-component";
import { StaticPriceText } from "../price-text/static-price-text.react-component";
import styles from "./browse-course-card.module.css";
import { trackCourseClickEvent } from "./course-card-tracking";
import { CourseCardWithUBGuard } from "./course-card-with-ub-guard.react-component";

/**
 * Context to specify an alternate course card component to render in `BrowseCourseCard`.
 *
 * It must support the same prop interface as `@udemy/react-card-components#CourseCard`.
 *
 * Note: remove this context when we are no longer experimenting with an alternate
 * course card design. It is otherwise unnecessary.
 */
export const BrowseCourseCardContext = /*#__PURE__*/ createContext({
  cardComponent: CourseCardWithUBGuard,
});
const defaultSlotRenderFunc = (Component, props) =>
  /*#__PURE__*/ React.createElement(Component, props);
class InternalBrowseCourseCard extends React.Component {
  constructor() {
    super(...arguments);
    this.trackImpression = () => {
      const {
        trackImpressionFunc,
        relatedSourceId,
        relatedSourceType,
        ...trackingContext
      } = this.props.trackingContext;
      trackImpressionFunc(
        {
          item: this.props.course,
        },
        trackingContext,
        {
          relatedSourceId,
          relatedSourceType,
        }
      );
    };
    this.trackClick = (event) => {
      const { trackingClickCallbackFunc, course } = this.props;
      const { index, uiRegion } = this.props.trackingContext;
      trackGenericCourseClick({
        courseId: course.id,
        // Assert that at least *one* of these two tracking IDs will be defined
        courseTrackingId: course.frontendTrackingId || course.tracking_id,
        componentName: "courseCard",
      });
      trackCourseClickEvent(
        course,
        index,
        BackendSourceOptions.DISCOVERY,
        uiRegion
      );
      if (trackingClickCallbackFunc) {
        trackingClickCallbackFunc(event);
      }
    };
  }
  render() {
    const {
      children,
      course,
      showBadges,
      titleClass,
      numReviewsText,
      priceProps,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      url,
      renderCourseImage,
      renderInstructorContent,
      renderPriceText,
      renderCourseTitle,
      renderRatings,
      renderDetails,
      renderCourseBadges,
      trackingContext,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      trackingClickCallbackFunc,
      isUserEnrolled,
      showPersonalPlanBadge,
      showCodingExercisesBadge,
      ...props
    } = this.props;
    const localRenderImage = () => {
      // Augment className in image props
      const baseImageProps = imagePropsFrom({
        course,
      });
      const imageProps = {
        ...baseImageProps,
        className: classNames(baseImageProps.className, styles.image),
      };
      if (isUserEnrolled) {
        return /*#__PURE__*/ React.createElement(
          React.Fragment,
          null,
          renderCourseImage === null || renderCourseImage === void 0
            ? void 0
            : renderCourseImage(CourseCardImage, imageProps),
          /*#__PURE__*/ React.createElement("div", {
            className: styles["opacity-overlay-dark"],
          }),
          /*#__PURE__*/ React.createElement(PlayOverlay, {
            className: styles["enrolled-play-overlay-mobile"],
          })
        );
      }
      if (course.is_in_personal_plan_collection && showPersonalPlanBadge) {
        return /*#__PURE__*/ React.createElement(
          React.Fragment,
          null,
          renderCourseImage === null || renderCourseImage === void 0
            ? void 0
            : renderCourseImage(CourseCardImage, imageProps),
          /*#__PURE__*/ React.createElement(PersonalPlanBadge, null)
        );
      }
      return renderCourseImage === null || renderCourseImage === void 0
        ? void 0
        : renderCourseImage(CourseCardImage, imageProps);
    };
    const localRenderTitle = () => {
      const url = course.is_in_user_subscription
        ? course.learn_url
        : course.url;
      const titleContent = /*#__PURE__*/ React.createElement(
        React.Fragment,
        null,
        course.title,
        /*#__PURE__*/ React.createElement(CourseCardSeoInfo, {
          course: course,
        })
      );
      return renderCourseTitle === null || renderCourseTitle === void 0
        ? void 0
        : renderCourseTitle(CourseCardTitle, {
            className: titleClass,
            children: url
              ? /*#__PURE__*/ React.createElement(
                  "a",
                  {
                    href: url,
                  },
                  titleContent
                )
              : /*#__PURE__*/ React.createElement("span", null, titleContent),
          });
    };
    const localRenderBadges = () => {
      if (
        showCodingExercisesBadge &&
        course.is_coding_exercises_badge_eligible
      ) {
        const CodingExercisesBadgeComponent = getCourseBadgeFromType(
          COURSE_BADGE_CODING_EXERCISES
        );
        return /*#__PURE__*/ React.createElement(
          CourseCardBadges,
          null,
          CodingExercisesBadgeComponent &&
            /*#__PURE__*/ React.createElement(
              CodingExercisesBadgeComponent,
              null
            )
        );
      }
      return renderCourseBadges === null || renderCourseBadges === void 0
        ? void 0
        : renderCourseBadges(
            CourseCardBadges,
            badgesPropsFrom({
              course,
              badges: getCourseBadgeFromBadgesFamily,
            })
          );
    };
    const isBuyable = !(course.is_in_user_subscription || isUserEnrolled);
    const CourseCard = this.context.cardComponent;
    const courseCardLink = /*#__PURE__*/ React.createElement(
      CourseCard,
      Object.assign({}, props, {
        badges: isBuyable && showBadges && localRenderBadges(),
        details:
          renderDetails === null || renderDetails === void 0
            ? void 0
            : renderDetails(
                CourseCardDetails,
                detailsPropsFrom({
                  course,
                })
              ),
        headline: course.headline,
        image: localRenderImage(),
        instructors:
          renderInstructorContent === null || renderInstructorContent === void 0
            ? void 0
            : renderInstructorContent(
                CourseCardInstructors,
                instructorsPropsFrom({
                  course,
                })
              ),
        onClick: this.trackClick,
        onContextMenu: this.trackClick,
        ratings:
          renderRatings === null || renderRatings === void 0
            ? void 0
            : renderRatings(
                CourseCardRatings,
                ratingsPropsFrom({
                  course,
                  numReviewsText,
                })
              ),
        price:
          isBuyable &&
          (renderPriceText === null || renderPriceText === void 0
            ? void 0
            : renderPriceText(
                StaticPriceText,
                pricePropsWithTrackingFrom({
                  course,
                  priceTextProps: priceProps,
                })
              )),
        title: localRenderTitle(),
      }),
      children
    );
    if (
      !(
        trackingContext !== null &&
        trackingContext !== void 0 &&
        trackingContext.trackImpressionFunc
      )
    ) {
      return courseCardLink;
    }
    return /*#__PURE__*/ React.createElement(
      TrackImpression,
      {
        trackFunc: this.trackImpression,
      },
      courseCardLink
    );
  }
}

/**
 * Browse version of CourseCard wraps the base CourseCard with a course link, and
 * adds tracking for impressions and clicks.
 */
InternalBrowseCourseCard.propTypes = {
  course: PropTypes.object.isRequired,
  size: PropTypes.oneOf(["small", "medium", "large"]),
  width: PropTypes.oneOf(["fixed", "flexible"]),
  className: PropTypes.string,
  titleClass: PropTypes.string,
  numReviewsText: PropTypes.string,
  priceProps: PropTypes.object,
  showBadges: PropTypes.bool,
  showDetails: PropTypes.bool,
  url: PropTypes.string,
  /*
   * Custom rendering functions receive a component and props to
   * render, optionally with customization. This customization pattern
   * comes from an older course card, and these functions are retained
   * here for backwards compatibility for consumers of this component. For
   * context about which components are passed to each of these functions
   * see `https://github.com/udemy/design-system-web/tree/main/packages/react-card-components/src/api-course-card`
   */
  renderCourseImage: PropTypes.func,
  renderInstructorContent: PropTypes.func,
  renderPriceText: PropTypes.func,
  renderCourseTitle: PropTypes.func,
  renderRatings: PropTypes.func,
  renderDetails: PropTypes.func,
  renderCourseBadges: PropTypes.func,
  /**
   * Optional handler if user clicks on CourseCard.
   *
   * @remarks
   * This prop is not recommended for user interaction. It is placed on the enclosing `div`
   * and does not have the associated `role` or keyboard event handlers required for a11y.
   * It can be used for click tracking.
   */
  onClick: PropTypes.func,
  isUserEnrolled: PropTypes.bool,
  trackingContext: PropTypes.shape({
    backendSource: PropTypes.string,
    index: PropTypes.number,
    trackImpressionFunc: PropTypes.func,
    relatedSourceId: PropTypes.string,
    relatedSourceType: PropTypes.string,
    uiRegion: PropTypes.string,
  }).isRequired,
  trackingClickCallbackFunc: PropTypes.func,
  showPersonalPlanBadge: PropTypes.bool,
  showCodingExercisesBadge: PropTypes.bool,
};
InternalBrowseCourseCard.defaultProps = {
  size: "medium",
  width: "flexible",
  className: undefined,
  titleClass: undefined,
  numReviewsText: undefined,
  priceProps: undefined,
  showBadges: true,
  showDetails: true,
  renderCourseImage: defaultSlotRenderFunc,
  renderInstructorContent: defaultSlotRenderFunc,
  renderPriceText: defaultSlotRenderFunc,
  renderCourseTitle: defaultSlotRenderFunc,
  renderRatings: defaultSlotRenderFunc,
  renderDetails: defaultSlotRenderFunc,
  renderCourseBadges: defaultSlotRenderFunc,
  url: undefined,
  onClick: undefined,
  isUserEnrolled: undefined,
  trackingClickCallbackFunc: undefined,
  showPersonalPlanBadge: false,
  showCodingExercisesBadge: false,
};
InternalBrowseCourseCard.contextType = BrowseCourseCardContext;
export const BrowseCourseCard = Object.assign(
  withFunnelLog("course")(
    inject((_ref) => {
      let {
        showPersonalPlanBadge,
        trackingContext = {},
        showCodingExercisesBadge,
      } = _ref;
      return {
        showPersonalPlanBadge,
        trackingContext,
        showCodingExercisesBadge,
      };
    })(InternalBrowseCourseCard)
  ),
  {
    defaultCardComponent: CourseCardWithUBGuard,
    displayName: "BrowseCourseCard",
  }
);
//# sourceMappingURL=browse-course-card.react-component.js.map
