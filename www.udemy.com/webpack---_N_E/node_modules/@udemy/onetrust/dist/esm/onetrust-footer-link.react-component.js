import React, { useEffect, useRef, useState } from "react";
import { Button } from "@udemy/react-core-components";
import { getServerOrClientUDData } from "@udemy/ud-data";
import { getIsMobileApp } from "./external/get-is-mobile-app";
import { whenOneTrustReady } from "./ready";
export const OneTrustFooterLink = (props) => {
  const [isShown, setIsShown] = useState(false);
  const [isUsMx, setIsUsMx] = useState(false);
  const refOneTrust = useRef();
  useEffect(() => {
    whenOneTrustReady((OneTrust) => {
      refOneTrust.current = OneTrust;
      const configData = getServerOrClientUDData().Config;
      const geo = OneTrust.getGeolocationData();
      setIsUsMx(geo.country === "US" && !configData.brand.has_organization);
      setIsShown(!getIsMobileApp());
    });
  }, [isUsMx]);
  if (!isShown) {
    return null;
  }
  return /*#__PURE__*/ React.createElement(
    "li",
    {
      "data-testid": "cookie-settings",
    },
    /*#__PURE__*/ React.createElement(
      Button,
      {
        className: "link white-link",
        typography: "ud-text-sm",
        udStyle: "link",
        "data-purpose": props.data_purpose,
        onClick: () => {
          var _refOneTrust$current;
          return (_refOneTrust$current = refOneTrust.current) === null ||
            _refOneTrust$current === void 0
            ? void 0
            : _refOneTrust$current.ToggleInfoDisplay();
        },
      },
      isUsMx ? props.text_us_mx : props.text
    )
  );
};
//# sourceMappingURL=onetrust-footer-link.react-component.js.map
