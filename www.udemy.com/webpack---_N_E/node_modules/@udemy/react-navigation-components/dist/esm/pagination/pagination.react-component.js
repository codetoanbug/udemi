import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _class, _class2, _descriptor, _class3;

import { useI18n } from "@udemy/i18n";
import MoreIcon from "@udemy/icons/dist/more.ud-icon";
import NextIcon from "@udemy/icons/dist/next.ud-icon";
import PreviousIcon from "@udemy/icons/dist/previous.ud-icon";
import { Button, IconButton } from "@udemy/react-core-components";
import { noop } from "@udemy/shared-utils";
import classNames from "classnames";
import { action, observable } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import { paginatedLink } from "./paginated-link";
import styles from "./pagination.module.css";
/**
 * Icon with ellipsis.
 *
 * @remarks
 * Separated as a component to use i18n hook.
 */

const PaginationEllipsis = () => {
  const { gettext } = useI18n();
  return /*#__PURE__*/ React.createElement(MoreIcon, {
    label: gettext("Ellipsis"),
    size: "medium",
    className: styles.ellipsis,
  });
};
/**
 * Interface used for Previous/Next Icon Buttons
 * @internal
 */

/**
 * IconButton to navigate to previous page.
 *
 * @remarks
 * Separated as a component to use i18n hook.
 */
const PaginationPreviousIconButton = (_ref) => {
  let { onClick, activePage, disabled } = _ref;
  const { gettext } = useI18n();
  return /*#__PURE__*/ React.createElement(
    IconButton,
    {
      componentClass: "a",
      href: paginatedLink(activePage - 1),
      disabled: activePage <= 1 || disabled,
      size: "medium",
      udStyle: "secondary",
      round: true,
      onClick: onClick,
      className: styles.prev,
      "data-page": "-1",
      "data-testid": "rnc-pagination-previous",
      "aria-label": gettext("previous page"),
    },
    /*#__PURE__*/ React.createElement(PreviousIcon, {
      "data-testid": "previous-page",
      label: false,
      size: "small",
    })
  );
};
/**
 * IconButton to navigate to next page.
 *
 * @remarks
 * Separated as a component to use i18n hook.
 */

const PaginationNextIconButton = (_ref2) => {
  let { onClick, activePage, disabled, pageCount } = _ref2;
  const { gettext } = useI18n();
  return /*#__PURE__*/ React.createElement(
    IconButton,
    {
      componentClass: "a",
      href: paginatedLink(activePage + 1),
      disabled: (pageCount && activePage >= pageCount) || disabled,
      size: "medium",
      udStyle: "secondary",
      round: true,
      onClick: onClick,
      className: styles.next,
      "data-page": "+1",
      "data-testid": "rnc-pagination-next",
      "aria-label": gettext("next page"),
    },
    /*#__PURE__*/ React.createElement(NextIcon, {
      "data-testid": "next-page",
      label: false,
      size: "small",
    })
  );
};

/**
 * A numeric button, indicating normally search result page numbers
 * between next and previous buttons
 */
const PaginationNumericButton = (_ref3) => {
  let { pageNumber, handleClick, disabled, activePage, ariaCurrent } = _ref3;
  const { interpolate, gettext } = useI18n();
  return /*#__PURE__*/ React.createElement(
    Button,
    {
      componentClass: "a",
      href: paginatedLink(pageNumber),
      size: "medium",
      udStyle: "ghost",
      onClick: handleClick,
      disabled: disabled,
      className: classNames(
        styles.page,
        pageNumber === activePage ? styles.active : ""
      ),
      "aria-label": interpolate(
        gettext("Page %(pageNumber)s"),
        {
          pageNumber,
        },
        true
      ),
      "data-page": pageNumber,
      "aria-current": pageNumber === activePage ? ariaCurrent : undefined,
    },
    pageNumber
  );
};
/** The React prop interface for the `Pagination` component. */

const defaultActivePage = 1;
const defaultPageCount = 0;
const defaultButtonCount = 5;
const defaultShowLastPageAsText = false;
/** The Pagination component */

export let Pagination =
  observer(
    (_class =
      ((_class2 =
        ((_class3 = class Pagination extends React.Component {
          constructor() {
            super(...arguments);

            _initializerDefineProperty(this, "activePage", _descriptor, this);

            this.handleClick = (event) => {
              event.preventDefault();
              const page = event.currentTarget.dataset.page;
              const prevActivePage = this.activePage;

              if (page[0] === "-" || page[0] === "+") {
                this.setActivePage(this.activePage + Number(page));
              } else {
                this.setActivePage(Number(page));
              }

              if (prevActivePage !== this.activePage) {
                var _this$props$onPageCha, _this$props;

                (_this$props$onPageCha = (_this$props = this.props)
                  .onPageChange) === null || _this$props$onPageCha === void 0
                  ? void 0
                  : _this$props$onPageCha.call(_this$props, this.activePage);
              }
            };

            this.renderPageButton = (pageNumber) =>
              /*#__PURE__*/ React.createElement(PaginationNumericButton, {
                key: pageNumber,
                disabled: this.props.disabled,
                handleClick: this.handleClick,
                pageNumber: pageNumber,
                activePage: this.activePage,
                ariaCurrent: this.props.ariaCurrent,
              });
          }

          componentDidUpdate(prevProps) {
            if (prevProps.activePage !== this.props.activePage) {
              var _this$props$activePag;

              this.setActivePage(
                (_this$props$activePag = this.props.activePage) !== null &&
                  _this$props$activePag !== void 0
                  ? _this$props$activePag
                  : defaultActivePage
              );
            }
          }

          setActivePage(value) {
            this.activePage = value;
          }

          renderEllipsis(key) {
            return /*#__PURE__*/ React.createElement(PaginationEllipsis, {
              key: key,
            });
          }

          renderPageText(pageNumber) {
            return /*#__PURE__*/ React.createElement(
              "span",
              {
                key: pageNumber,
                className: classNames("ud-heading-sm", styles.page),
              },
              pageNumber
            );
          }

          fillWithPageButtons(buttons, startPageNumber, count) {
            for (let i = 0; i < count; i++) {
              buttons.push(this.renderPageButton(startPageNumber + i));
            }
          }

          renderPageButtons(pageCount, buttonCount, showLastPageAsText) {
            const buttons = [];

            if (buttonCount >= pageCount) {
              this.fillWithPageButtons(buttons, 1, pageCount);
            } else if (this.activePage <= buttonCount - 2) {
              this.fillWithPageButtons(buttons, 1, buttonCount - 2);
              buttons.push(this.renderEllipsis("pre-ellipsis"));

              if (showLastPageAsText) {
                buttons.push(this.renderPageText(pageCount));
              } else {
                buttons.push(this.renderPageButton(pageCount));
              }
            } else if (this.activePage > pageCount - (buttonCount - 2)) {
              buttons.push(this.renderPageButton(1));
              buttons.push(this.renderEllipsis("post-ellipsis"));
              this.fillWithPageButtons(
                buttons,
                pageCount - (buttonCount - 2) + 1,
                buttonCount - 2
              );
            } else {
              buttons.push(this.renderPageButton(1));
              buttons.push(this.renderEllipsis("pre-ellipsis"));
              this.fillWithPageButtons(
                buttons,
                this.activePage,
                buttonCount - 4
              );
              buttons.push(this.renderEllipsis("post-ellipsis"));

              if (showLastPageAsText) {
                buttons.push(this.renderPageText(pageCount));
              } else {
                buttons.push(this.renderPageButton(pageCount));
              }
            }

            return buttons;
          }

          render() {
            const {
              activePage,
              pageCount = defaultPageCount,
              onPageChange,
              buttonCount = defaultButtonCount,
              showLastPageAsText = defaultShowLastPageAsText,
              disabled,
              showPageButtons,
              ariaCurrent,
              ...props
            } = this.props;

            if (pageCount < 2 && showPageButtons) {
              return null;
            }

            return /*#__PURE__*/ React.createElement(
              "nav",
              Object.assign({}, props, {
                className: classNames(props.className, styles.container),
                "data-testid": "rnc-pagination",
              }),
              /*#__PURE__*/ React.createElement(PaginationPreviousIconButton, {
                onClick: this.handleClick,
                activePage: this.activePage,
                disabled: disabled,
              }),
              showPageButtons &&
                this.renderPageButtons(
                  pageCount,
                  buttonCount,
                  showLastPageAsText
                ),
              /*#__PURE__*/ React.createElement(PaginationNextIconButton, {
                onClick: this.handleClick,
                pageCount: pageCount,
                activePage: this.activePage,
                disabled: disabled,
              })
            );
          }
        }),
        (_class3.defaultProps = {
          disabled: false,
          activePage: defaultActivePage,
          pageCount: defaultPageCount,
          buttonCount: defaultButtonCount,
          showLastPageAsText: defaultShowLastPageAsText,
          showPageButtons: true,
          onPageChange: noop,
          ariaCurrent: "page",
        }),
        _class3)),
      ((_descriptor = _applyDecoratedDescriptor(
        _class2.prototype,
        "activePage",
        [observable],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            var _this$props$activePag2;

            return (_this$props$activePag2 = this.props.activePage) !== null &&
              _this$props$activePag2 !== void 0
              ? _this$props$activePag2
              : defaultActivePage;
          },
        }
      )),
      _applyDecoratedDescriptor(
        _class2.prototype,
        "setActivePage",
        [action],
        Object.getOwnPropertyDescriptor(_class2.prototype, "setActivePage"),
        _class2.prototype
      )),
      _class2))
  ) || _class;
//# sourceMappingURL=pagination.react-component.js.map
