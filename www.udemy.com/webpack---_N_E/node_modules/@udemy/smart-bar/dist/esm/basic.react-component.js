import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _class, _class2, _descriptor, _class3;
import classNames from "classnames";
import { action, observable } from "mobx";
import { observer } from "mobx-react";
import React, { Component } from "react";
import { LocalizedHtml } from "@udemy/i18n";
import { withI18n } from "@udemy/i18n";
import { Duration } from "@udemy/react-date-time-components";
import { safelySetInnerHTML } from "@udemy/shared-utils";
import styles from "./smart-bar.module.css";
const SECONDS_PER_DAY = 60 * 60 * 24;

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const SmartBarHeadline = (_ref) => {
  let { smartBarStore } = _ref;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const onClick = (e) => {
    var _e$target;
    if (
      ((_e$target = e.target) === null || _e$target === void 0
        ? void 0
        : _e$target.tagName) === "A"
    ) {
      const url = e.target.href;
      const location = "copy_url";
      smartBarStore.sendClickEvent(url, location);
    }
  };
  const copy = /*#__PURE__*/ React.createElement(
    "span",
    {
      onClick: onClick,
      role: "presentation",
      "data-testid": "smart-bar-copy",
    },
    /*#__PURE__*/ React.createElement(
      "span",
      Object.assign(
        {
          className: classNames(
            "ud-text-bold ud-text-with-links",
            styles["smart-bar__title"]
          ),
        },
        safelySetInnerHTML({
          descriptionOfCaller: "basic:smart-bar-title",
          html: smartBarStore.data.get("title"),
          dataPurpose: "smart-bar-title",
          domPurifyConfig: {
            ADD_ATTR: ["target"],
          },
        })
      )
    ),
    /*#__PURE__*/ React.createElement(
      "span",
      Object.assign(
        {
          className: "ud-text-with-links",
          role: "presentation",
        },
        safelySetInnerHTML({
          descriptionOfCaller: "basic:smart-bar-subtitle",
          html: smartBarStore.data.get("subtitle"),
          dataPurpose: "smart-bar-subtitle",
          domPurifyConfig: {
            ADD_ATTR: ["target"],
          },
        })
      )
    )
  );
  const url = smartBarStore.data.get("action_url");
  if (url) {
    const onClick = () => {
      smartBarStore.sendClickEvent();
    };
    return /*#__PURE__*/ React.createElement(
      "a",
      {
        onClick: onClick,
        "data-testid": "smart-bar-action-url",
        href: url,
      },
      copy
    );
  }
  return copy;
};
SmartBarHeadline.displayName = "SmartBarHeadline";
let InternalSmartBarTimer =
  observer(
    (_class =
      ((_class2 =
        ((_class3 = class InternalSmartBarTimer extends Component {
          constructor(props) {
            super(props);
            this.displayName = "SmartBarTimer";
            this.tickHandler = null;
            _initializerDefineProperty(
              this,
              "remainingSeconds",
              _descriptor,
              this
            );
            this.COUNTDOWN_PERIOD_THRESHOLD = 60 * 60 * 24;
            this.remainingSeconds =
              (Date.parse(this.props.endTime) - Date.now()) / 1000;
          }
          componentDidMount() {
            if (
              0 < this.remainingSeconds &&
              this.remainingSeconds <= this.COUNTDOWN_PERIOD_THRESHOLD
            ) {
              this.tickHandler = setInterval(() => {
                this.decrementRemainingTime();
              }, 1000);
            }
          }
          componentWillUnmount() {
            if (this.tickHandler !== null) {
              clearInterval(this.tickHandler);
            }
          }
          decrementRemainingTime() {
            if (this.remainingSeconds < 1 && this.tickHandler) {
              clearInterval(this.tickHandler);
            } else {
              this.remainingSeconds -= 1;
            }
          }
          render() {
            // if small, show countdown (with or without seconds)
            // if in the middle, show 'X days'
            // if greater than daysToShowTimer, show nothing
            const remainingDays = Math.floor(
              this.remainingSeconds / SECONDS_PER_DAY
            );
            let timeRemainingContent;
            if (
              0 < this.remainingSeconds &&
              this.remainingSeconds <= this.COUNTDOWN_PERIOD_THRESHOLD
            ) {
              const precision = this.props.shouldShowSeconds
                ? Duration.PRECISION.SECONDS
                : Duration.PRECISION.MINUTES;
              const durationComponent = /*#__PURE__*/ React.createElement(
                Duration,
                {
                  "data-testid": "timer-countdown",
                  numSeconds: this.remainingSeconds,
                  precision: precision,
                  presentationStyle: Duration.STYLE.HUMAN_COMPACT,
                }
              );
              timeRemainingContent = /*#__PURE__*/ React.createElement(
                LocalizedHtml,
                {
                  html: this.props.gettext(
                    'Ends in <span class="time">time</span>.'
                  ),
                  interpolate: {
                    time: durationComponent,
                  },
                }
              );
            } else if (
              this.COUNTDOWN_PERIOD_THRESHOLD < this.remainingSeconds &&
              remainingDays <= this.props.daysToShowTimer
            ) {
              timeRemainingContent = /*#__PURE__*/ React.createElement(
                "span",
                {
                  "data-testid": "timer-x-days-left",
                },
                this.props.ninterpolate(
                  "%(remainingDays)s day left!",
                  "%(remainingDays)s days left!",
                  remainingDays,
                  {
                    remainingDays,
                  }
                )
              );
            } else {
              return null;
            }
            return /*#__PURE__*/ React.createElement(
              "span",
              {
                className: classNames(
                  "ud-heading-sm",
                  styles["smart-bar-timer"]
                ),
                "data-testid": "smart-bar-timer",
              },
              timeRemainingContent
            );
          }
        }),
        (_class3.defaultProps = {
          shouldShowSeconds: true,
          daysToShowTimer: 3,
        }),
        _class3)),
      ((_descriptor = _applyDecoratedDescriptor(
        _class2.prototype,
        "remainingSeconds",
        [observable],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: null,
        }
      )),
      _applyDecoratedDescriptor(
        _class2.prototype,
        "decrementRemainingTime",
        [action],
        Object.getOwnPropertyDescriptor(
          _class2.prototype,
          "decrementRemainingTime"
        ),
        _class2.prototype
      )),
      _class2))
  ) || _class;
const SmartBarTimer = withI18n(InternalSmartBarTimer);
/*
 * This is the basic "bar content component". New bar types with extended behavior or stores
 * should copy & modify this basic component.
 */
const BasicBarContentComponent = (_ref2) => {
  let { className, smartBarStore, membership } = _ref2;
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      className: className,
    },
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: classNames("ud-text-sm", styles["basic-bar-content"]),
        "data-testid": "basic-with-timer",
      },
      /*#__PURE__*/ React.createElement(SmartBarHeadline, {
        smartBarStore: smartBarStore,
      }),
      smartBarStore.data.get("enable_timer") &&
        membership.get("end_time") &&
        /*#__PURE__*/ React.createElement(
          React.Fragment,
          null,
          " ",
          /*#__PURE__*/ React.createElement(SmartBarTimer, {
            endTime: membership.get("end_time"),
            shouldShowSeconds: smartBarStore.data.get(
              "enable_seconds_in_timer"
            ),
            daysToShowTimer: smartBarStore.data.get("days_to_show_timer"),
          })
        )
    )
  );
};
BasicBarContentComponent.displayName = "BasicBarContent";
export const BasicBarContent = observer(BasicBarContentComponent);
//# sourceMappingURL=basic.react-component.js.map
