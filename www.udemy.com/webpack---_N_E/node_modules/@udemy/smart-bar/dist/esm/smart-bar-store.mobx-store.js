import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
import { action, observable, runInAction } from "mobx";
import { Tracker } from "@udemy/event-tracking";
import { udExpiringLocalStorage } from "@udemy/shared-utils";
import { noticeTypes } from "./bar-types";
import {
  DealOptInEvent,
  SmartbarHideEvent,
  SmartbarImpressionEvent,
  SmartbarClickEvent,
} from "./events";
import {
  forceReload,
  getNoticesOfType,
  storeHidden,
  postTargetingOptIn,
} from "./notices-backend";
export const SMART_BAR_NOTICE_TYPE = "smart_bar";
export const OPT_IN_NOT_APPLIED = "not_applied";
export const OPT_IN_APPLYING = "applying";
export const OPT_IN_APPLIED = "applied";
function isBarTypeEnabled(type, udConfig) {
  var _udConfig$features$no;
  return (_udConfig$features$no = udConfig.features.notice) === null ||
    _udConfig$features$no === void 0
    ? void 0
    : _udConfig$features$no[type.noticeFeatureFlag];
}
export let ApiClass =
  ((_class = class ApiClass {
    reset() {
      this.state = observable({
        activeStorageKey: "storage",
        data: observable.map(),
        membership: observable.map(),
        seen: false,
        clicked: false,
        opt_in_stage: OPT_IN_NOT_APPLIED,
        storage: null,
        storageForStickyExpiration: null,
        noticeType: null,
        loaded: false,
        isInStickyPosition: false,
        isStickyPositionHidden: false,
        mobileLayout: false,
      });
      this.params = {};
      this.isPersonalPlanSubscriber = undefined;
      this.isPersonalPlanSubscriber = undefined;
      this.userAgnosticTrackingParams = undefined;
    }
    constructor() {
      _initializerDefineProperty(this, "state", _descriptor, this);
      this.params = {};
      this.isPersonalPlanSubscriber = void 0;
      this.isUdemyBusinessSubscriber = void 0;
      this.userAgnosticTrackingParams = void 0;
      _initializerDefineProperty(this, "sendClickEvent", _descriptor2, this);
      this.sendHideEvent = () => {
        var _this$state$noticeTyp;
        Tracker.publishEvent(
          new SmartbarHideEvent({
            noticeId: this.state.data.get("id"),
            noticeType: `${
              (_this$state$noticeTyp = this.state.noticeType) === null ||
              _this$state$noticeTyp === void 0
                ? void 0
                : _this$state$noticeTyp.name
            }`,
            personalizedNoticeSetId: this.state.data.get(
              "personalized_notice_set_id"
            ),
            personalizedNoticeSetName: this.state.data.get(
              "personalized_notice_set_name"
            ),
            topMembershipTargetGroupId: this.state.data.get("target_group_id"),
          })
        );
      };
      this.sendDealOptInEvent = () => {
        Tracker.publishEvent(new DealOptInEvent(this.state.data.get("id")));
      };
      _initializerDefineProperty(this, "optIn", _descriptor3, this);
      _initializerDefineProperty(this, "optedIn", _descriptor4, this);
      _initializerDefineProperty(this, "optedOut", _descriptor5, this);
      this.optInNotApplied = () => {
        return this.state.opt_in_stage === OPT_IN_NOT_APPLIED;
      };
      this.optInApplying = () => {
        return this.state.opt_in_stage === OPT_IN_APPLYING;
      };
      this.optInJustApplied = () => {
        return this.state.opt_in_stage === OPT_IN_APPLIED;
      };
      this.reset();
    }
    get data() {
      var _this$state;
      return (_this$state = this.state) === null || _this$state === void 0
        ? void 0
        : _this$state.data;
    }
    get membership() {
      var _this$state2;
      return (_this$state2 = this.state) === null || _this$state2 === void 0
        ? void 0
        : _this$state2.membership;
    }
    hide() {
      var _this$state$this$stat, _this$state$this$stat2;
      if (
        !this.state.membership.get("opt_in") &&
        !this.state.isStickyPositionHidden &&
        this.state.isInStickyPosition
      ) {
        const now = new Date();
        const expirationDate = new Date(
          now.setMinutes(
            now.getMinutes() +
              parseInt(
                this.state.data.get("clp_sticky_reset_timer_in_minutes"),
                10
              )
          )
        );
        this.state.storageForStickyExpiration = udExpiringLocalStorage(
          "smartBarStorage",
          `${this.state.data.get("id")}.sticky`,
          expirationDate
        );
        this.state.activeStorageKey = "storageForStickyExpiration";
      } else {
        this.state.activeStorageKey = "storage";
        if (this.isPersonalPlanSubscriber) {
          this.storeHidden();
        }
      }
      if (
        !(
          (_this$state$this$stat = this.state[this.state.activeStorageKey]) !==
            null &&
          _this$state$this$stat !== void 0 &&
          _this$state$this$stat.get("hidden")
        )
      ) {
        this.sendHideEvent();
      }
      if (this.state.isInStickyPosition) {
        this.state.isStickyPositionHidden = true;
      }
      (_this$state$this$stat2 = this.state[this.state.activeStorageKey]) ===
        null || _this$state$this$stat2 === void 0
        ? void 0
        : _this$state$this$stat2.set("hidden", true);
    }
    get isHidden() {
      var _this$state$this$stat3;
      return (
        !this.state.loaded ||
        ((_this$state$this$stat3 = this.state[this.state.activeStorageKey]) ===
          null || _this$state$this$stat3 === void 0
          ? void 0
          : _this$state$this$stat3.get("hidden"))
      );
    }
    get isLoaded() {
      return this.state.loaded;
    }
    get noticeType() {
      return this.state.noticeType;
    }
    get pageKey() {
      var _this$userAgnosticTra;
      return (_this$userAgnosticTra = this.userAgnosticTrackingParams) ===
        null || _this$userAgnosticTra === void 0
        ? void 0
        : _this$userAgnosticTra.page_key;
    }
    get isSticky() {
      return (
        this.state.data.get("enable_clp_sticky") &&
        this.pageKey === "course_landing_page"
      );
    }
    get isInStickyPosition() {
      return (
        this.isSticky &&
        !this.isStickyPositionHidden &&
        this.state.isInStickyPosition
      );
    }
    setIsInStickyPosition(value) {
      this.state.isInStickyPosition = value;
    }
    get isStickyPositionHidden() {
      var _this$state$this$stat4;
      return (
        !this.state.loaded ||
        !this.isSticky ||
        ((_this$state$this$stat4 = this.state[this.state.activeStorageKey]) ===
          null || _this$state$this$stat4 === void 0
          ? void 0
          : _this$state$this$stat4.get("hidden")) ||
        this.state.membership.get("opt_in")
      );
    }
    get hideButtonHidden() {
      return !this.membership.get("opt_in") && !this.isInStickyPosition;
    }
    get shouldRenderHideButton() {
      return (
        this.state.membership.get("opt_in") ||
        (this.isSticky && !this.state.membership.get("opt_in")) ||
        !this.isStickyPositionHidden
      );
    }
    storeHidden() {
      storeHidden(this.state.data.get("id"));
    }
    initialize(_ref) {
      let {
        currentType,
        isPersonalPlanSubscriber = false,
        isUdemyBusinessSubscriber = false,
        params = {},
        udConfig,
        udMe,
        udRequest,
        userAgnosticTrackingParams,
      } = _ref;
      runInAction(() => {
        this.state.noticeType = currentType;
        this.isPersonalPlanSubscriber = isPersonalPlanSubscriber;
        this.isUdemyBusinessSubscriber = isUdemyBusinessSubscriber;
        this.params = params;
        this.userAgnosticTrackingParams = userAgnosticTrackingParams;
        getNoticesOfType({
          type: currentType.name,
          limit: 1,
          isPersonalPlanSubscriber: this.isPersonalPlanSubscriber,
          isUdemyBusinessSubscriber: this.isUdemyBusinessSubscriber,
          params: this.params,
          udConfig,
          udRequest,
          udMe,
        }).then(
          action((smartBars) => {
            if (!smartBars.length) {
              return;
            }
            const barData = smartBars[0];
            this.state.membership.merge(barData.membership);
            let expirationDate;
            const now = new Date();
            const endTime = this.state.membership.get("end_time");
            if (endTime) {
              expirationDate = new Date(endTime);
            } else {
              expirationDate = new Date(
                now.setDate(now.getDate() + currentType.defaultDaysToHide)
              );
            }
            this.state.data.merge(barData.data);
            this.state.data.merge({
              actionUrl: barData.data.action_url,
            });

            // Set storage for normal notice
            this.state.storage = udExpiringLocalStorage(
              "smartBarStorage",
              `${barData.data.id}`,
              expirationDate
            );

            // Set storage for sticky expiration
            expirationDate = new Date(
              now.setMinutes(
                now.getMinutes() +
                  parseInt(barData.data.clp_sticky_reset_timer_in_minutes, 10)
              )
            );
            this.state.storageForStickyExpiration = udExpiringLocalStorage(
              "smartBarStorage",
              `${barData.data.id}.sticky`,
              null // this storage is for reads only
            );

            this.state.loaded = true;
          })
        );
      });
    }
    sendImpressionsEvent() {
      var _this$state$noticeTyp2;
      Tracker.publishEvent(
        new SmartbarImpressionEvent({
          noticeId: this.state.data.get("id"),
          noticeType: `${
            (_this$state$noticeTyp2 = this.state.noticeType) === null ||
            _this$state$noticeTyp2 === void 0
              ? void 0
              : _this$state$noticeTyp2.name
          }`,
          personalizedNoticeSetId: this.state.data.get(
            "personalized_notice_set_id"
          ),
          personalizedNoticeSetName: this.state.data.get(
            "personalized_notice_set_name"
          ),
          topMembershipTargetGroupId: this.state.data.get("target_group_id"),
        })
      );
    }
  }),
  ((_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "state",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  _applyDecoratedDescriptor(
    _class.prototype,
    "hide",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "hide"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "setIsInStickyPosition",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "setIsInStickyPosition"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "initialize",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "initialize"),
    _class.prototype
  ),
  (_descriptor2 = _applyDecoratedDescriptor(
    _class.prototype,
    "sendClickEvent",
    [action],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        var _this = this;
        return function (url) {
          let clickLocation =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : "action_url";
          if (!_this.state.clicked) {
            var _this$state$noticeTyp3;
            Tracker.publishEvent(
              new SmartbarClickEvent({
                noticeId: _this.state.data.get("id"),
                noticeType: `${
                  (_this$state$noticeTyp3 = _this.state.noticeType) === null ||
                  _this$state$noticeTyp3 === void 0
                    ? void 0
                    : _this$state$noticeTyp3.name
                }`,
                url:
                  url !== null && url !== void 0
                    ? url
                    : _this.state.data.get("action_url"),
                location: clickLocation,
                personalizedNoticeSetId: _this.state.data.get(
                  "personalized_notice_set_id"
                ),
                personalizedNoticeSetName: _this.state.data.get(
                  "personalized_notice_set_name"
                ),
                topMembershipTargetGroupId:
                  _this.state.data.get("target_group_id"),
              })
            );
            _this.state.clicked = true;
          }
        };
      },
    }
  )),
  (_descriptor3 = _applyDecoratedDescriptor(
    _class.prototype,
    "optIn",
    [action],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return () => {
          this.state.opt_in_stage = OPT_IN_APPLYING;
          forceReload();
          return postTargetingOptIn(this.state.data.get("id")).catch(
            (error) => {
              runInAction(() => {
                this.state.opt_in_stage = OPT_IN_NOT_APPLIED;
              });
              throw error;
            }
          );
        };
      },
    }
  )),
  (_descriptor4 = _applyDecoratedDescriptor(
    _class.prototype,
    "optedIn",
    [action],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return () => {
          this.state.opt_in_stage = OPT_IN_APPLIED;
        };
      },
    }
  )),
  (_descriptor5 = _applyDecoratedDescriptor(
    _class.prototype,
    "optedOut",
    [action],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return () => {
          this.state.opt_in_stage = OPT_IN_NOT_APPLIED;
        };
      },
    }
  ))),
  _class);
let apiClass = null;
export function resetSmartBarStore() {
  var _apiClass;
  (_apiClass = apiClass) === null || _apiClass === void 0
    ? void 0
    : _apiClass.reset();
}
export function getSmartBarStore(_ref2) {
  let {
    forceNoticeType = "",
    isPersonalPlanSubscriber,
    isUdemyBusinessSubscriber,
    params = {},
    skipNoticeBackend = false,
    udConfig,
    udMe,
    udRequest,
    userAgnosticTrackingParams,
  } = _ref2;
  const currentType =
    noticeTypes.find((type) => type.name === forceNoticeType) ||
    noticeTypes.find((noticeType) => {
      return isBarTypeEnabled(noticeType, udConfig);
    });
  if (!currentType) {
    return null;
  }

  // Instantiate singleton
  if (!apiClass) {
    apiClass = new ApiClass();
  }

  // Initialize singleton if necessary
  if (!skipNoticeBackend) {
    runInAction(() => {
      var _apiClass2;
      (_apiClass2 = apiClass) === null || _apiClass2 === void 0
        ? void 0
        : _apiClass2.initialize({
            currentType,
            isPersonalPlanSubscriber,
            isUdemyBusinessSubscriber,
            params,
            udConfig,
            udMe,
            udRequest,
            userAgnosticTrackingParams,
          });
    });
  }

  // Return singleton instance
  return apiClass;
}
//# sourceMappingURL=smart-bar-store.mobx-store.js.map
