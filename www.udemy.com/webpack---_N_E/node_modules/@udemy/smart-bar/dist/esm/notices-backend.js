import { udExpiringLocalStorage } from "@udemy/shared-utils";
import { udApi } from "@udemy/ud-api";
// notices api local storage keys
export const NOTICES_API_RELOAD_KEY = "reload";
export const NOTICES_API_P13N_NOTICE_SET_NAME_KEY =
  "personalized_notice_set_name";
export const DEFAULT_USE_CASE_GROUP = "cmp_marketplace";
export const PP_USE_CASE_GROUP = "pp_request_targeting";
export const UB_USE_CASE_GROUP = "ub_request_targeting";
const noticeSetsEligibleForCacheReload = [
  "220401_MXLFC_Intent_Cart-Abandon_V1",
  "220401_MXLFC_Intent_Wishlist_V1",
];
export function getNoticesApiLocalStorage() {
  const NOTICE_REFRESH_EXPIRATION_DATE = new Date(Date.now() + 10 * 60 * 1000);
  return udExpiringLocalStorage(
    "notices",
    "api",
    NOTICE_REFRESH_EXPIRATION_DATE
  );
}
function getUseCaseGroup(isPersonalPlanSubscriber, isUdemyBusinessSubscriber) {
  if (isPersonalPlanSubscriber) {
    return PP_USE_CASE_GROUP;
  }
  if (isUdemyBusinessSubscriber) {
    return UB_USE_CASE_GROUP;
  }
  return DEFAULT_USE_CASE_GROUP;
}

/**
 * getNoticesOfType()
 * Given parameters, returns eligible banner notices
 * @param {arguments}
 * @returns
 */
export function getNoticesOfType(_ref) {
  var _udConfig$price_count;
  let {
    type,
    limit,
    isPersonalPlanSubscriber,
    isUdemyBusinessSubscriber,
    params = {},
    udConfig = {},
    udRequest = {},
    udMe = {},
  } = _ref;
  const currency =
    (_udConfig$price_count = udConfig.price_country) === null ||
    _udConfig$price_count === void 0
      ? void 0
      : _udConfig$price_count.currency;
  const locale = udRequest.locale;
  const supportedParams = [
    "assigned_notice_set_name",
    "validate_assigned_notice_set",
  ];
  const filteredParams = Object.fromEntries(
    Object.entries(params).filter((_ref2) => {
      let [param] = _ref2;
      return supportedParams.includes(param);
    })
  );
  const noticesApiLocalStorage = getNoticesApiLocalStorage();
  const noticeSetName = noticesApiLocalStorage.get(
    NOTICES_API_P13N_NOTICE_SET_NAME_KEY
  );
  const eligibleForCacheReload =
    noticeSetName === undefined ||
    noticeSetsEligibleForCacheReload.includes(noticeSetName); // always reload if missing local storage

  const useCaseGroup = getUseCaseGroup(
    isPersonalPlanSubscriber,
    isUdemyBusinessSubscriber
  );
  return (
    udApi
      .get("notices/me/", {
        headers: {
          "cache-control":
            eligibleForCacheReload &&
            noticesApiLocalStorage.get(NOTICES_API_RELOAD_KEY)
              ? "no-cache"
              : "",
        },
        params: {
          type,
          limit,
          locale,
          currency,
          user: udMe.is_authenticated,
          use_case_group: useCaseGroup,
          search_cache_key: udConfig.app_name === "search" ? 1 : null,
          // Support for experiment - https://udemyjira.atlassian.net/browse/CMP-2434
          ...filteredParams,
        },
      })
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      .then((response) => {
        if (response.status === 204) {
          return [];
        }
        if (response.data.results && response.data.results.length > 0) {
          var _response$data$result;
          noticesApiLocalStorage.set(
            NOTICES_API_P13N_NOTICE_SET_NAME_KEY,
            (_response$data$result = response.data.results[0].data) === null ||
              _response$data$result === void 0
              ? void 0
              : _response$data$result.personalized_notice_set_name
          );
          if (eligibleForCacheReload) {
            noticesApiLocalStorage.delete(NOTICES_API_RELOAD_KEY);
          }
        }
        return response.data.results || [];
      })
      .catch(() => [])
  );
}

/**
 * postTargetingOptIn()
 * Given noticeId, posts opt-in to tracking api
 * @param noticeId
 * @returns
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export function postTargetingOptIn(noticeId) {
  return udApi.post("targeting/opt-in/", {
    notice_id: noticeId,
    opt_in: true,
  });
}

/**
 * forceReload()
 * Forces notices api to reload
 */
export function forceReload() {
  const noticesApiLocalStorage = getNoticesApiLocalStorage();
  noticesApiLocalStorage.delete(NOTICES_API_P13N_NOTICE_SET_NAME_KEY);
  noticesApiLocalStorage.set(NOTICES_API_RELOAD_KEY, true);
}

/**
 * storeHidden()
 * Given noticeId, stores noticeId in hidden notices api
 * @param noticeId
 * @returns
 */
export function storeHidden(noticeId) {
  return udApi.post("notices/me/hide/", {
    notice_id: noticeId,
  });
}

// legacy support
export const noticesBackend = {
  forceReload,
  getNoticesApiLocalStorage,
  getNoticesOfType,
  postTargetingOptIn,
  storeHidden,
};
//# sourceMappingURL=notices-backend.js.map
