/* eslint-disable @typescript-eslint/no-explicit-any */
import { useQuery } from "@tanstack/react-query";
import { fetcher } from "../fetcher";

/** All built-in and custom scalars, mapped to their actual values */

/** Price option for computed price plan. Will be returned for annual plans */

/** An API client */

/** An API client for an Organization */

/** An API client for a Partner */

/** Article lecture */

/** The Assessment object. */

/** Issued Badge of a user (Assertion in OpenBadge specification) */

/** Issued badges of a user (Assertion in OpenBadge specification) */

/** Certification Subject Area (topic descriptor) for Open Badges */

/** The BadgeClass object. A collection of information about the accomplishment recognized by the Open Badge. It means Certification for the most cases. */

/** Alignment object. An intangible item that describes an alignment between a learning resource and a BadgeClass */

/** Descriptive metadata about the achievements necessary to be issued with particular BadgeClass (Certification). */

/** Enrolled learning products for a badge class */

/** Image object of BadgeClass or Issuer */

/** Issuer of BadgeClass. A collection of information that describes the entity or organization */

/** Paginated list of BadgeClasses for search response */

/** Types of captions */
export let CaptionType = /*#__PURE__*/ (function (CaptionType) {
  CaptionType["ClosedCaption"] = "CLOSED_CAPTION";
  CaptionType["Subtitle"] = "SUBTITLE";
  return CaptionType;
})({});

/** Category the Course belongs to */

/** Type of the files withing coding exercise templates */

/** Coding exercise for students to practice their programming */

/** Language possibilities for a coding exercise */
export let CodingExerciseLanguageOption = /*#__PURE__*/ (function (
  CodingExerciseLanguageOption
) {
  CodingExerciseLanguageOption["Cplusplus"] = "CPLUSPLUS";
  CodingExerciseLanguageOption["CsvProcessingWithPython"] =
    "CSV_PROCESSING_WITH_PYTHON";
  CodingExerciseLanguageOption["CSharp"] = "C_SHARP";
  CodingExerciseLanguageOption["CSharp_11"] = "C_SHARP_11";
  CodingExerciseLanguageOption["Html"] = "HTML";
  CodingExerciseLanguageOption["JavascriptEs6"] = "JAVASCRIPT_ES6";
  CodingExerciseLanguageOption["Java_9"] = "JAVA_9";
  CodingExerciseLanguageOption["Java_11"] = "JAVA_11";
  CodingExerciseLanguageOption["Java_17"] = "JAVA_17";
  CodingExerciseLanguageOption["Php_5"] = "PHP_5";
  CodingExerciseLanguageOption["Php_7"] = "PHP_7";
  CodingExerciseLanguageOption["Python_3_5"] = "PYTHON_3_5";
  CodingExerciseLanguageOption["Python_3_8"] = "PYTHON_3_8";
  CodingExerciseLanguageOption["Python_3_10"] = "PYTHON_3_10";
  CodingExerciseLanguageOption["React_16"] = "REACT_16";
  CodingExerciseLanguageOption["React_18"] = "REACT_18";
  CodingExerciseLanguageOption["Ruby"] = "RUBY";
  CodingExerciseLanguageOption["R_3_6"] = "R_3_6";
  CodingExerciseLanguageOption["Scipy_1_4NumpyPandasSympyAndScikitLearn_0_23"] =
    "SCIPY_1_4_NUMPY_PANDAS_SYMPY_AND_SCIKIT_LEARN_0_23";
  CodingExerciseLanguageOption["Sql"] = "SQL";
  CodingExerciseLanguageOption["Sqlite_3"] = "SQLITE_3";
  CodingExerciseLanguageOption["Swift_3"] = "SWIFT_3";
  CodingExerciseLanguageOption["Swift_5"] = "SWIFT_5";
  return CodingExerciseLanguageOption;
})({});

/** Type of the coding exercise templates */

/** Type representing a group of content for a subscription plan */

/** The Course object. */

/** Accreditations */

/** Accreditation types */
export let CourseAccreditationType = /*#__PURE__*/ (function (
  CourseAccreditationType
) {
  CourseAccreditationType["Cpe"] = "CPE";
  return CourseAccreditationType;
})({});

/** Course caption details such as locale, type, and source */

/** A catalog of all courses available to the client */

/** Category the Course belongs to */

/** Enrollments belonging to the course */

/** Course images by varying dimensions */

/** Instructor for a course */

/** Organization specific course properties */

/** Object to store URL and expiration time for course's promo video */

/** Ratings of a course */

/** Search filters to apply on search request */

/** List of Courses and additional data about search response */

/** Sort order for courses in search response */
export let CourseSearchSortType = /*#__PURE__*/ (function (
  CourseSearchSortType
) {
  CourseSearchSortType["Rating"] = "RATING";
  CourseSearchSortType["Relevance"] = "RELEVANCE";
  CourseSearchSortType["Reviews"] = "REVIEWS";
  CourseSearchSortType["Time"] = "TIME";
  return CourseSearchSortType;
})({});

/** Section of the course containing all types of curriculum items */

/** SubCategory that is part of CourseCategory */

/** Input for creating an API client */

/** Response from creating an API client containing ApiClient info and client's secret */

/** Currencies available */
export let CurrencyCode = /*#__PURE__*/ (function (CurrencyCode) {
  CurrencyCode["Aud"] = "AUD";
  CurrencyCode["Brl"] = "BRL";
  CurrencyCode["Cad"] = "CAD";
  CurrencyCode["Dkk"] = "DKK";
  CurrencyCode["Eur"] = "EUR";
  CurrencyCode["Gbp"] = "GBP";
  CurrencyCode["Idr"] = "IDR";
  CurrencyCode["Ils"] = "ILS";
  CurrencyCode["Inr"] = "INR";
  CurrencyCode["Jpy"] = "JPY";
  CurrencyCode["Krw"] = "KRW";
  CurrencyCode["Mxn"] = "MXN";
  CurrencyCode["Nok"] = "NOK";
  CurrencyCode["Pln"] = "PLN";
  CurrencyCode["Rub"] = "RUB";
  CurrencyCode["Sgd"] = "SGD";
  CurrencyCode["Thb"] = "THB";
  CurrencyCode["Try"] = "TRY";
  CurrencyCode["Twd"] = "TWD";
  CurrencyCode["Usd"] = "USD";
  CurrencyCode["Vnd"] = "VND";
  CurrencyCode["Zar"] = "ZAR";
  return CurrencyCode;
})({});

/** Curriculum part of a course */

/** All curriculum items */

/** Price option for computed price plan. Will be returned for daily plans */

/** Type representing details about an interval of dates */

/** Supported units of time over which a subscription trial or billing cycle can occur */
export let DateIntervalType = /*#__PURE__*/ (function (DateIntervalType) {
  DateIntervalType["Day"] = "DAY";
  DateIntervalType["Month"] = "MONTH";
  DateIntervalType["Week"] = "WEEK";
  DateIntervalType["Year"] = "YEAR";
  return DateIntervalType;
})({});

/** Paginated list of supply gap opportunities */

/** Missing area/gap in the UB catalog that can be filled by the course(s). Supply gap opportunities are presented to Instructors */

/** Display rule for the supply gap opportunity */
export let DeprecatedSupplyGapOpportunityDisplayRule = /*#__PURE__*/ (function (
  DeprecatedSupplyGapOpportunityDisplayRule
) {
  DeprecatedSupplyGapOpportunityDisplayRule["AllInstructors"] =
    "ALL_INSTRUCTORS";
  DeprecatedSupplyGapOpportunityDisplayRule["Exclude"] = "EXCLUDE";
  DeprecatedSupplyGapOpportunityDisplayRule["InternalOnly"] = "INTERNAL_ONLY";
  DeprecatedSupplyGapOpportunityDisplayRule["IpOnly"] = "IP_ONLY";
  DeprecatedSupplyGapOpportunityDisplayRule["NoLongerAPriority"] =
    "NO_LONGER_A_PRIORITY";
  return DeprecatedSupplyGapOpportunityDisplayRule;
})({});

/**
 * Filter options for supply gap opportunities.
 * All filters are optional and provided filters are ANDed together.
 * If same filter is provided with multiple values, they are ORed together.
 */

/** Instructional level of the supply gap opportunity */
export let DeprecatedSupplyGapOpportunityInstructionalLevel =
  /*#__PURE__*/ (function (DeprecatedSupplyGapOpportunityInstructionalLevel) {
    DeprecatedSupplyGapOpportunityInstructionalLevel["AllLevels"] =
      "ALL_LEVELS";
    DeprecatedSupplyGapOpportunityInstructionalLevel["AnyLevel"] = "ANY_LEVEL";
    DeprecatedSupplyGapOpportunityInstructionalLevel["Beginner"] = "BEGINNER";
    DeprecatedSupplyGapOpportunityInstructionalLevel["Expert"] = "EXPERT";
    DeprecatedSupplyGapOpportunityInstructionalLevel["Intermediate"] =
      "INTERMEDIATE";
    return DeprecatedSupplyGapOpportunityInstructionalLevel;
  })({});

/** Priority level of the supply gap opportunity */
export let DeprecatedSupplyGapOpportunityPriorityLevel =
  /*#__PURE__*/ (function (DeprecatedSupplyGapOpportunityPriorityLevel) {
    DeprecatedSupplyGapOpportunityPriorityLevel["High"] = "HIGH";
    DeprecatedSupplyGapOpportunityPriorityLevel["Low"] = "LOW";
    DeprecatedSupplyGapOpportunityPriorityLevel["Medium"] = "MEDIUM";
    return DeprecatedSupplyGapOpportunityPriorityLevel;
  })({});

/** The type of supply gap opportunity */
export let DeprecatedSupplyGapOpportunityType = /*#__PURE__*/ (function (
  DeprecatedSupplyGapOpportunityType
) {
  DeprecatedSupplyGapOpportunityType["FirstMover"] = "FIRST_MOVER";
  DeprecatedSupplyGapOpportunityType["Specialized"] = "SPECIALIZED";
  DeprecatedSupplyGapOpportunityType["Trending"] = "TRENDING";
  return DeprecatedSupplyGapOpportunityType;
})({});

/** Instruction level of the course */
export let DifficultyLevel = /*#__PURE__*/ (function (DifficultyLevel) {
  DifficultyLevel["AllLevels"] = "ALL_LEVELS";
  DifficultyLevel["Beginner"] = "BEGINNER";
  DifficultyLevel["Expert"] = "EXPERT";
  DifficultyLevel["Intermediate"] = "INTERMEDIATE";
  return DifficultyLevel;
})({});

/** Stores realtime attribute like build_number->20220322_v1 */

/** Holds assigned feature variant  */

/** Instructor for a learning product */

/** Instructor images by varying dimensions */

/** The Lab object. */

/** Instructor for a lab */

/** MetaData for a lab */

/** List of Labs and additional data about search response */

/** The LanguageCode scalar type as defined by ISO 639-1. */
export let LanguageCode = /*#__PURE__*/ (function (LanguageCode) {
  LanguageCode["Af"] = "AF";
  LanguageCode["Ak"] = "AK";
  LanguageCode["Am"] = "AM";
  LanguageCode["Ar"] = "AR";
  LanguageCode["As"] = "AS";
  LanguageCode["Az"] = "AZ";
  LanguageCode["Be"] = "BE";
  LanguageCode["Bg"] = "BG";
  LanguageCode["Bm"] = "BM";
  LanguageCode["Bn"] = "BN";
  LanguageCode["Bo"] = "BO";
  LanguageCode["Br"] = "BR";
  LanguageCode["Bs"] = "BS";
  LanguageCode["Ca"] = "CA";
  LanguageCode["Ce"] = "CE";
  LanguageCode["Cs"] = "CS";
  LanguageCode["Cu"] = "CU";
  LanguageCode["Cy"] = "CY";
  LanguageCode["Da"] = "DA";
  LanguageCode["De"] = "DE";
  LanguageCode["Dz"] = "DZ";
  LanguageCode["Ee"] = "EE";
  LanguageCode["El"] = "EL";
  LanguageCode["En"] = "EN";
  LanguageCode["Eo"] = "EO";
  LanguageCode["Es"] = "ES";
  LanguageCode["Et"] = "ET";
  LanguageCode["Eu"] = "EU";
  LanguageCode["Fa"] = "FA";
  LanguageCode["Ff"] = "FF";
  LanguageCode["Fi"] = "FI";
  LanguageCode["Fo"] = "FO";
  LanguageCode["Fr"] = "FR";
  LanguageCode["Fy"] = "FY";
  LanguageCode["Ga"] = "GA";
  LanguageCode["Gd"] = "GD";
  LanguageCode["Gl"] = "GL";
  LanguageCode["Gu"] = "GU";
  LanguageCode["Gv"] = "GV";
  LanguageCode["Ha"] = "HA";
  LanguageCode["He"] = "HE";
  LanguageCode["Hi"] = "HI";
  LanguageCode["Hr"] = "HR";
  LanguageCode["Hu"] = "HU";
  LanguageCode["Hy"] = "HY";
  LanguageCode["Ia"] = "IA";
  LanguageCode["Id"] = "ID";
  LanguageCode["Ig"] = "IG";
  LanguageCode["Ii"] = "II";
  LanguageCode["Is"] = "IS";
  LanguageCode["It"] = "IT";
  LanguageCode["Ja"] = "JA";
  LanguageCode["Jv"] = "JV";
  LanguageCode["Ka"] = "KA";
  LanguageCode["Ki"] = "KI";
  LanguageCode["Kk"] = "KK";
  LanguageCode["Kl"] = "KL";
  LanguageCode["Km"] = "KM";
  LanguageCode["Kn"] = "KN";
  LanguageCode["Ko"] = "KO";
  LanguageCode["Ks"] = "KS";
  LanguageCode["Ku"] = "KU";
  LanguageCode["Kw"] = "KW";
  LanguageCode["Ky"] = "KY";
  LanguageCode["Lb"] = "LB";
  LanguageCode["Lg"] = "LG";
  LanguageCode["Ln"] = "LN";
  LanguageCode["Lo"] = "LO";
  LanguageCode["Lt"] = "LT";
  LanguageCode["Lu"] = "LU";
  LanguageCode["Lv"] = "LV";
  LanguageCode["Mg"] = "MG";
  LanguageCode["Mi"] = "MI";
  LanguageCode["Mk"] = "MK";
  LanguageCode["Ml"] = "ML";
  LanguageCode["Mn"] = "MN";
  LanguageCode["Mr"] = "MR";
  LanguageCode["Ms"] = "MS";
  LanguageCode["Mt"] = "MT";
  LanguageCode["My"] = "MY";
  LanguageCode["Nb"] = "NB";
  LanguageCode["Nd"] = "ND";
  LanguageCode["Ne"] = "NE";
  LanguageCode["Nl"] = "NL";
  LanguageCode["Nn"] = "NN";
  LanguageCode["No"] = "NO";
  LanguageCode["Om"] = "OM";
  LanguageCode["Or"] = "OR";
  LanguageCode["Os"] = "OS";
  LanguageCode["Pa"] = "PA";
  LanguageCode["Pl"] = "PL";
  LanguageCode["Ps"] = "PS";
  LanguageCode["Pt"] = "PT";
  LanguageCode["PtBr"] = "PT_BR";
  LanguageCode["PtPt"] = "PT_PT";
  LanguageCode["Qu"] = "QU";
  LanguageCode["Rm"] = "RM";
  LanguageCode["Rn"] = "RN";
  LanguageCode["Ro"] = "RO";
  LanguageCode["Ru"] = "RU";
  LanguageCode["Rw"] = "RW";
  LanguageCode["Sd"] = "SD";
  LanguageCode["Se"] = "SE";
  LanguageCode["Sg"] = "SG";
  LanguageCode["Si"] = "SI";
  LanguageCode["Sk"] = "SK";
  LanguageCode["Sl"] = "SL";
  LanguageCode["Sn"] = "SN";
  LanguageCode["So"] = "SO";
  LanguageCode["Sq"] = "SQ";
  LanguageCode["Sr"] = "SR";
  LanguageCode["Su"] = "SU";
  LanguageCode["Sv"] = "SV";
  LanguageCode["Sw"] = "SW";
  LanguageCode["Ta"] = "TA";
  LanguageCode["Te"] = "TE";
  LanguageCode["Tg"] = "TG";
  LanguageCode["Th"] = "TH";
  LanguageCode["Ti"] = "TI";
  LanguageCode["Tk"] = "TK";
  LanguageCode["To"] = "TO";
  LanguageCode["Tr"] = "TR";
  LanguageCode["Tt"] = "TT";
  LanguageCode["Ug"] = "UG";
  LanguageCode["Uk"] = "UK";
  LanguageCode["Ur"] = "UR";
  LanguageCode["Uz"] = "UZ";
  LanguageCode["Vi"] = "VI";
  LanguageCode["Vo"] = "VO";
  LanguageCode["Wo"] = "WO";
  LanguageCode["Xh"] = "XH";
  LanguageCode["Yi"] = "YI";
  LanguageCode["Yo"] = "YO";
  LanguageCode["Zh"] = "ZH";
  LanguageCode["ZhCn"] = "ZH_CN";
  LanguageCode["ZhTw"] = "ZH_TW";
  LanguageCode["Zu"] = "ZU";
  return LanguageCode;
})({});

/** The Learning Community */

/** A page of Learning Community Activities */

/** An activity is an event initiated by a user */

/** All the activity types presented in a learning community activity feed */

/** The input used for Adding new members to the learning community */

/** The Reason for creating a new Learning Community */

/** The Reason for creating a new Learning Community */

/** The Reasons for creating a new Learning Community */
export let LearningCommunityCreateReasonType = /*#__PURE__*/ (function (
  LearningCommunityCreateReasonType
) {
  LearningCommunityCreateReasonType["CompanyWideTransformationInitiate"] =
    "COMPANY_WIDE_TRANSFORMATION_INITIATE";
  LearningCommunityCreateReasonType["ComplianceTraining"] =
    "COMPLIANCE_TRAINING";
  LearningCommunityCreateReasonType["LearnNewSkillsTogetherWithOthers"] =
    "LEARN_NEW_SKILLS_TOGETHER_WITH_OTHERS";
  LearningCommunityCreateReasonType["OnboardingANewTeam"] =
    "ONBOARDING_A_NEW_TEAM";
  LearningCommunityCreateReasonType["Other"] = "OTHER";
  LearningCommunityCreateReasonType["StudyForACertificate"] =
    "STUDY_FOR_A_CERTIFICATE";
  return LearningCommunityCreateReasonType;
})({});

/** The input used for creating a new Learning Community */

/** The input used for inviting new members to the learning community */

/** The input used for Removing members to the learning community */

/** The learning path object. */

/** All partner's content collection items that are available, currently just course */

/** An event happening to a learning product in a moment in time */

/** The type of events that happens to a learning product and matters to the learning community service */
export let LearningProductEventType = /*#__PURE__*/ (function (
  LearningProductEventType
) {
  LearningProductEventType["Completed"] = "COMPLETED";
  LearningProductEventType["Enrolled"] = "ENROLLED";
  LearningProductEventType["Started"] = "STARTED";
  return LearningProductEventType;
})({});

/** Input for getting badge classes by learning products */

/** Type of learning product. */
export let LearningProductType = /*#__PURE__*/ (function (LearningProductType) {
  LearningProductType["Assessment"] = "ASSESSMENT";
  LearningProductType["Course"] = "COURSE";
  LearningProductType["Lab"] = "LAB";
  LearningProductType["LearningPath"] = "LEARNING_PATH";
  return LearningProductType;
})({});

/** A collection of learning products for a partner */

/** The LearningReminder object. */

/** Calendar type of the learning reminder */
export let LearningReminderCalendarType = /*#__PURE__*/ (function (
  LearningReminderCalendarType
) {
  LearningReminderCalendarType["Apple"] = "APPLE";
  LearningReminderCalendarType["Google"] = "GOOGLE";
  LearningReminderCalendarType["Other"] = "OTHER";
  LearningReminderCalendarType["Outlook"] = "OUTLOOK";
  return LearningReminderCalendarType;
})({});

/** Input for creating and updating a learning reminder */

/** Input for learning product of the learning reminder */

/** Notification method of the learning reminder */
export let LearningReminderNotificationMethod = /*#__PURE__*/ (function (
  LearningReminderNotificationMethod
) {
  LearningReminderNotificationMethod["Email"] = "EMAIL";
  LearningReminderNotificationMethod["Push"] = "PUSH";
  return LearningReminderNotificationMethod;
})({});

/** Paginated learning reminders of the user */

/** Represents a lecture type  */

/** List of LectureResults and additional data about search response */

/** Contains info for front end related stuff and tracking info. This data calculated by backend service. */

/** Identifies each result for lecture search. */

/** License pool */

/** Product type license count */

/** Money */

/** Price option for computed price plan. Will be returned for monthly plans */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Root mutation from which every mutation schema extends */

/** Details of Occupation */

/** User is assigning occupation to themself */

/** Occupation group type */

/** Current user assigning existing occupation group. */

/** Shows page search results of occupation */

/** Current user assigning user provided occupation. */

/** A UB organization */

/** Object that describes the type and status of license assigned to a user in an organization */

/** Object that describes the status of license assigned to a user in an organization */
export let OrganizationUserLicenseStatus = /*#__PURE__*/ (function (
  OrganizationUserLicenseStatus
) {
  OrganizationUserLicenseStatus["Active"] = "ACTIVE";
  OrganizationUserLicenseStatus["Inactive"] = "INACTIVE";
  return OrganizationUserLicenseStatus;
})({});

/** Object that describes the type of license assigned to a user in an organization */
export let OrganizationUserLicenseType = /*#__PURE__*/ (function (
  OrganizationUserLicenseType
) {
  OrganizationUserLicenseType["Basic"] = "BASIC";
  OrganizationUserLicenseType["Pro"] = "PRO";
  return OrganizationUserLicenseType;
})({});

/** Interface for implementing paginated results */

/** A Partner */

/** Popular topic */

/** Topic SubCategory */

/** Assigment test with multiple-choice and free-from questions reviewed by instructors */

/** Practice test that is more detailed than a Quiz */

/** The Pro learning path object. */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Root query from which every query schema extends */

/** Quiz with simple questions and multiple choice answers */

/** A review of a learning product */

/** Identifies available search filter facets. */

/** Options for search aggregates */

/** One of the available options within a search facet type */

/** A simple auto-complete item can be search log, course or instructor */

/** Search Log suggestion for autocomplete */

/** Search param for autocomplete */

/** A simple autocomplete item with the tracking metadata */

/** Status of any type of streak */
export let StreakStatus = /*#__PURE__*/ (function (StreakStatus) {
  StreakStatus["ActiveCurrentPeriodAchieved"] =
    "ACTIVE_CURRENT_PERIOD_ACHIEVED";
  StreakStatus["ActiveCurrentPeriodUnachieved"] =
    "ACTIVE_CURRENT_PERIOD_UNACHIEVED";
  StreakStatus["Dropped"] = "DROPPED";
  StreakStatus["ZeroHistory"] = "ZERO_HISTORY";
  return StreakStatus;
})({});

/** Details about a user's lecture minutes consumption streak, including what to achieve by what date */

/** SubCategory that is part of CourseCategory */

/** Subscription plan that the subscriber is subscribed to */

/** Subscriber of the subscription */

/** Billing details of a subscription */

/** Credit card used for the subscription */

/** Subscription object that represents consumer and UB subscriptions */

/** Payment method of the subscription */

/** An offer for a consumer subscription plan to access a catalog of Udemy content */

/** An offer for a consumer subscription plan to access a catalog of Udemy content */

/** Contains information about the license context for a given subscription plan price option */

/** Union of possible plan pricing options */

/** The type of subscription plan being offered */
export let SubscriptionPlanProductType = /*#__PURE__*/ (function (
  SubscriptionPlanProductType
) {
  SubscriptionPlanProductType["Consumersubscription"] = "CONSUMERSUBSCRIPTION";
  SubscriptionPlanProductType["Enterprise"] = "ENTERPRISE";
  SubscriptionPlanProductType["Team"] = "TEAM";
  SubscriptionPlanProductType["Udemypro"] = "UDEMYPRO";
  return SubscriptionPlanProductType;
})({});

/** Status of the subscription */
export let SubscriptionStatus = /*#__PURE__*/ (function (SubscriptionStatus) {
  SubscriptionStatus["Active"] = "ACTIVE";
  SubscriptionStatus["Canceled"] = "CANCELED";
  SubscriptionStatus["Expired"] = "EXPIRED";
  SubscriptionStatus["Future"] = "FUTURE";
  SubscriptionStatus["Trial"] = "TRIAL";
  return SubscriptionStatus;
})({});

/** Type representing details about the trial subscription offer available for a given user and plan */

/** Topic */

/** Topic Filters for searching topics. All filters are ANDed together. */

/** Topic Group */

/** Types of popularity for Topics */
export let TopicPopularityTypes = /*#__PURE__*/ (function (
  TopicPopularityTypes
) {
  TopicPopularityTypes["Popular"] = "POPULAR";
  TopicPopularityTypes["Trending"] = "TRENDING";
  return TopicPopularityTypes;
})({});

/** A question and answer pair with optional link for additional context */

/** A Udemy user */

/** Shows details of the user's occupation */

/** Represents the basic information of a user */

/** Represents different sizes of the same image */

/** Video lecture */

/** Length of the video in course */
export let VideoLength = /*#__PURE__*/ (function (VideoLength) {
  VideoLength["ExtraLong"] = "EXTRA_LONG";
  VideoLength["ExtraShort"] = "EXTRA_SHORT";
  VideoLength["Long"] = "LONG";
  VideoLength["Medium"] = "MEDIUM";
  VideoLength["Short"] = "SHORT";
  return VideoLength;
})({});

/** Mashup lecture has both video and a presentation */

/** Contains metadata about any retention streak */

/** Price option for computed price plan. Will be returned for weekly plans */

export const FeatureVariantAssignmentsDocument = `
    query FeatureVariantAssignments($featureCodes: [String!]!, $realtimeAttributes: [FeatureRequestAttributeInput!]) {
  featureVariantAssignmentsByCodeAndAttributes(
    featureCodes: $featureCodes
    realtimeAttributes: $realtimeAttributes
  ) {
    featureCode
    configuration
    isInExperiment
    experimentIds
  }
}
    `;
export const useFeatureVariantAssignmentsQuery = (variables, options) =>
  useQuery(
    ["FeatureVariantAssignments", variables],
    fetcher(FeatureVariantAssignmentsDocument, variables),
    options
  );
useFeatureVariantAssignmentsQuery.getKey = (variables) => [
  "FeatureVariantAssignments",
  variables,
];
useFeatureVariantAssignmentsQuery.fetcher = (variables, options) =>
  fetcher(FeatureVariantAssignmentsDocument, variables, options);
//# sourceMappingURL=api-platform-graphql.js.map
