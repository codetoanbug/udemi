import axios from "axios";
import { getConfigData } from "@udemy/shared-utils";
import { getHttpCacheHeaders } from "@udemy/ud-api";

/** Creates a globally-unique ID from a given type & ID */
export function toGlobalId(type, id) {
  return btoa(`${type}:${id}`);
}

/** Converts a global id to readable string */
export function fromGlobalId(globalId) {
  return atob(globalId);
}

/** Return the id portion from a global id */
export function idFromGlobalId(globalId) {
  return parseInt(fromGlobalId(globalId).split(":")[1], 10);
}

/**
 * Makes a GraphQL query.
 * https://graphql.org/learn/serving-over-http/#post-request
 *
 * udGraphql.query({
 *     query: `
 *         query getFoo {
 *             foo
 *         }
 *     `,
 *     variables: {},
 * })
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export async function udQuery(params) {
  let additionalHeaders =
    arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  let graphqlEndpoint = arguments.length > 2 ? arguments[2] : undefined;
  const endpoint =
    graphqlEndpoint !== null && graphqlEndpoint !== void 0
      ? graphqlEndpoint
      : getConfigData().graphql_federation_endpoint;
  try {
    const response = await axios.post(endpoint, params, {
      headers: {
        "Content-Type": "application/json",
        ...getHttpCacheHeaders(),
        ...additionalHeaders,
      },
    });
    const data = response.data || {};
    if (data.errors) {
      return Promise.reject({
        ...data,
        statusCode: response.status,
      });
    }
    return data;
  } catch (e) {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const err = e;
    const errorResponse = err.response || {};
    return Promise.reject({
      ...errorResponse.data,
      statusCode: errorResponse.status,
    });
  }
}
//# sourceMappingURL=ud-graphql.js.map
