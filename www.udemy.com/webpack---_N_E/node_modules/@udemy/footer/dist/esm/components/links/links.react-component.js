import { observer } from "mobx-react";
import React from "react";
import { OneTrustFooterLink } from "@udemy/onetrust";
import { useUDData } from "@udemy/ud-data";
import { useIsFeatureEnabled } from "../../external/utils/use-is-feature-enabled";
import { Link } from "./link.react-component";
// eslint-disable-next-line @typescript-eslint/no-unused-vars
const ImprintContactItem = observer((_ref) => {
  let { style, ...props } = _ref;
  const { me, Config } = useUDData();

  // This happens to work because `UD.Config.marketplace_country` and `UD.me` are updated at
  // the same time by `loadGlobalMeContext`. We should probably move all user-specific data
  // from `UD.Config` to `UD.request`, and set up the latter to be a proxy like `UD.me`.
  if (me.isLoading || Config.marketplace_country.id !== "DE") {
    return null;
  }
  return /*#__PURE__*/ React.createElement(
    "li",
    null,
    /*#__PURE__*/ React.createElement(Link, props)
  );
});
export const Links = (_ref2) => {
  let { linkColumns } = _ref2;
  const isFeatureEnabled = useIsFeatureEnabled();
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    linkColumns.map((linkColumn, i) => {
      return /*#__PURE__*/ React.createElement(
        "ul",
        {
          className: "ud-unstyled-list link-column",
          key: i,
        },
        linkColumn.map((linkProps, i) => {
          if (linkProps.data_purpose === "footer-imprint-contact") {
            return /*#__PURE__*/ React.createElement(
              ImprintContactItem,
              Object.assign(
                {
                  key: i,
                },
                linkProps
              )
            );
          } else if (
            linkProps.data_purpose === "footer.links.cookie_preferences"
          ) {
            return /*#__PURE__*/ React.createElement(
              OneTrustFooterLink,
              Object.assign(
                {
                  key: i,
                },
                linkProps
              )
            );
          }
          const shouldRender = linkProps.feature_flag
            ? isFeatureEnabled(linkProps.feature_flag)
            : !linkProps.is_disabled;
          if (shouldRender) {
            return /*#__PURE__*/ React.createElement(
              "li",
              {
                key: i,
              },
              /*#__PURE__*/ React.createElement(Link, linkProps)
            );
          }
          return null;
        })
      );
    })
  );
};
//# sourceMappingURL=links.react-component.js.map
