import { observer } from "mobx-react";
import React from "react";
import { trackEvent } from "@udemy/gtag";
import { useI18n } from "@udemy/i18n";
import { Avatar, Button } from "@udemy/react-core-components";
import { RelativeDuration } from "@udemy/react-date-time-components";
import { NotificationBadge } from "@udemy/react-messaging-components";
import { Tooltip } from "@udemy/react-popup-components";
import { ItemCard } from "@udemy/react-structure-components";
import { safelySetInnerHTML } from "@udemy/shared-utils";
import styles from "./activity-notification.module.css";
export const ActivityNotification = observer((props) => {
  const { gettext } = useI18n();
  const { notification } = props;
  const className = props.className || "";
  const onClick = () => {
    const { store, notification, tabName } = props;
    trackEvent("notification", "click", notification.clickTrackingAction);
    if (!notification.isRead) {
      store.markNotificationAsRead(notification, tabName);
    }
  };
  const onClickStatus = () => {
    const { store, notification, tabName } = props;
    if (!notification.isRead) {
      store.markNotificationAsRead(notification, tabName);
    }
  };
  const renderStatusDot = () => {
    const { notification } = props;
    if (notification.isRead) {
      return null;
    }
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        className: styles["status-dot-container"],
      },
      /*#__PURE__*/ React.createElement(
        Tooltip,
        {
          a11yRole: "none",
          detachFromTarget: true,
          placement: "bottom",
          trigger: /*#__PURE__*/ React.createElement(
            Button,
            {
              udStyle: "link",
              className: styles["status-dot-button"],
              "data-purpose": "mark-as-read-status-icon",
              onClick: onClickStatus,
              "aria-label": gettext("Mark as read"),
            },
            /*#__PURE__*/ React.createElement(NotificationBadge, null)
          ),
        },
        gettext("Mark as read")
      )
    );
  };
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      "data-purpose": "notification",
      className: styles["card-container"],
    },
    /*#__PURE__*/ React.createElement(
      ItemCard,
      {
        className: `${styles["card"]} ${className}`,
      },
      /*#__PURE__*/ React.createElement(
        ItemCard.ImageWrapper,
        null,
        /*#__PURE__*/ React.createElement(Avatar, {
          user: notification.mainActivity.actor,
          srcKey: "image_100x100",
          alt: "NONE",
        })
      ),
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["notification-info"],
        },
        /*#__PURE__*/ React.createElement(
          ItemCard.Title,
          {
            className: `ud-heading-md ${styles["notification-title"]}`,
            "data-purpose": "notification-message",
            href: notification.targetURL,
            onClick: onClick,
          },
          /*#__PURE__*/ React.createElement(
            "span",
            safelySetInnerHTML({
              descriptionOfCaller:
                "activity-notification:notification-template",
              html: notification.template,
            })
          )
        ),
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: `ud-text-sm ${styles["notification-timestamp"]}`,
          },
          /*#__PURE__*/ React.createElement(RelativeDuration, {
            datetime: notification.mainActivity.timestamp,
          })
        )
      )
    ),
    renderStatusDot()
  );
});
//# sourceMappingURL=activity-notification.react-component.js.map
