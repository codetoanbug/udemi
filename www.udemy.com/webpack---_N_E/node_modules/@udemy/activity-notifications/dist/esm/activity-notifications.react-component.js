import { observer } from "mobx-react";
import React, { useEffect } from "react";
import { formatNumber, useI18n } from "@udemy/i18n";
import { MainContentLoader } from "@udemy/react-reveal-components";
import { Tabs } from "@udemy/react-structure-components";
import styles from "./activity-notifications.module.css";
import { getGlobalActivityNotificationsStore } from "./global-activity-notifications";
import { NotificationTabPane } from "./notification-tab-pane.react-component";
export const ActivityNotificationsContent = observer((_ref) => {
  let { store } = _ref;
  const { gettext, locale } = useI18n();
  useEffect(() => {
    async function initialize() {
      await store.initializeNotifications();
    }
    initialize();
  }, [store]);
  const onSelectTab = (tabName) => {
    store.setActiveTab(tabName);
  };
  const renderTab = (tabName) => {
    const instructorText = gettext("Instructor");
    const studentText = gettext("Student");
    let title = tabName === "instructor" ? instructorText : studentText;
    const { unreadActivitiesCount } = store[tabName];
    if (unreadActivitiesCount > 0) {
      title = `${title} (${formatNumber(unreadActivitiesCount, locale)})`;
    }
    return /*#__PURE__*/ React.createElement(
      Tabs.Tab,
      {
        id: tabName,
        title: title,
      },
      /*#__PURE__*/ React.createElement(NotificationTabPane, {
        store: store,
        tabName: tabName,
      })
    );
  };
  const { activeTabName, instructor, student } = store;
  if (!activeTabName && (instructor || student)) {
    return /*#__PURE__*/ React.createElement(MainContentLoader, null);
  }
  let content;
  if (!instructor && !student) {
    content = /*#__PURE__*/ React.createElement(NotificationTabPane, {
      store: store,
      tabName: activeTabName,
    });
  } else if (!instructor || !student) {
    content = /*#__PURE__*/ React.createElement(NotificationTabPane, {
      store: store,
      tabName: activeTabName,
    });
  } else {
    content = /*#__PURE__*/ React.createElement(
      Tabs,
      {
        activeTabId: activeTabName,
        onSelect: (tabId) => {
          onSelectTab(tabId);
        },
      },
      renderTab("instructor"),
      renderTab("student")
    );
  }
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      className: styles["container"],
      "data-testid": "activity-notifications-container",
    },
    content
  );
});
export const ActivityNotifications = observer(() => {
  const store = getGlobalActivityNotificationsStore();
  if (!store || !store.user) {
    return /*#__PURE__*/ React.createElement(MainContentLoader, null);
  }
  return /*#__PURE__*/ React.createElement(ActivityNotificationsContent, {
    store: store,
  });
});
//# sourceMappingURL=activity-notifications.react-component.js.map
