import { observer } from "mobx-react";
import React, { useCallback } from "react";
import { useI18n } from "@udemy/i18n";
import { Button } from "@udemy/react-core-components";
import { Loader } from "@udemy/react-reveal-components";
import { ActivityNotification } from "./activity-notification.react-component";
import styles from "./activity-notifications.module.css";
export const NotificationTabPane = observer((_ref) => {
  let { store, tabName } = _ref;
  const { gettext } = useI18n();
  const onClickLoadMore = useCallback(() => {
    store.loadNextPageOfNotifications(tabName);
  }, [store, tabName]);
  const onClickMarkAllAsRead = useCallback(() => {
    store.markAllNotificationsAsRead(tabName);
  }, [store, tabName]);
  const renderFooter = useCallback(
    (tab) => {
      if (tab.loadingState !== "LOADED" || tab.unreadActivitiesCount === 0) {
        return null;
      }
      return /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["footer"],
        },
        /*#__PURE__*/ React.createElement(
          Button,
          {
            udStyle: "ghost",
            onClick: onClickMarkAllAsRead,
            "data-purpose": "mark-all-as-read",
          },
          gettext("Mark all as read")
        )
      );
    },
    [gettext, onClickMarkAllAsRead]
  );
  const tab = store[tabName];
  if (
    !tabName ||
    ((tab === null || tab === void 0 ? void 0 : tab.loadingState) ===
      "LOADED" &&
      tab.totalActivitiesCount === 0)
  ) {
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        "data-testid": `notification-tab-pane-${tabName}`,
        "data-purpose": "notification-tab-pane",
        className: `ud-text-lg ${styles["no-notifications"]}`,
      },
      gettext("No notifications.")
    );
  }
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      "data-testid": `notification-tab-pane-${tabName}`,
      "data-purpose": "notification-tab-pane",
    },
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: styles["notification-list"],
      },
      tab === null || tab === void 0
        ? void 0
        : tab.notifications.map((notification) =>
            /*#__PURE__*/ React.createElement(ActivityNotification, {
              key: notification.mainActivity.id,
              store: store,
              notification: notification,
              tabName: tabName,
            })
          )
    ),
    (tab === null || tab === void 0 ? void 0 : tab.loadingState) === "LOADED" &&
      tab.hasNextPage &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["load-more-row"],
        },
        /*#__PURE__*/ React.createElement(
          Button,
          {
            "data-purpose": "load-more",
            onClick: onClickLoadMore,
          },
          gettext("Load more")
        )
      ),
    (tab === null || tab === void 0 ? void 0 : tab.loadingState) ===
      "LOADING" &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["load-more-row"],
        },
        /*#__PURE__*/ React.createElement(Loader, {
          size: "large",
        })
      ),
    renderFooter(tab)
  );
});
//# sourceMappingURL=notification-tab-pane.react-component.js.map
