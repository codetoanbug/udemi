import { observer } from "mobx-react";
import React from "react";
import { useI18n } from "@udemy/i18n";
import { BlockList } from "@udemy/react-core-components";
import { useUDData } from "@udemy/ud-data";
import { BrowseNavItem } from "../../desktop/browse/browse-nav.react-component";
import { DesktopNavSectionHeading } from "../../desktop/browse/desktop-nav.react-component";
import styles from "../../desktop/list-menu.module.css";
import { useBrowseNavStore } from "../../hooks/use-browse-nav-store";
import { useHeaderStore } from "../../hooks/use-header-store";
import {
  CustomCategoriesModel,
  LearningPathsMenuModel,
} from "../../ufb-browse-types";
export const BrowseNavLevelOneItems = observer((_ref) => {
  let { itemFinders } = _ref;
  const headerStore = useHeaderStore();
  const browseNavStore = useBrowseNavStore();
  const { browse, Config } = useUDData();
  const { gettext, interpolate } = useI18n();
  const [learningPathsMenu] = React.useState(
    new LearningPathsMenuModel(headerStore, {
      gettext,
    })
  );
  const [customCategories] = React.useState(
    new CustomCategoriesModel(
      headerStore,
      {
        gettext,
        interpolate,
      },
      {
        browse,
        Config,
      }
    )
  );
  React.useEffect(() => {
    customCategories.loadChildren();
  }, [customCategories]);
  React.useEffect(() => {
    if (
      !!browseNavStore.navigationCategories &&
      Config.features.organization.learning_path.enabled
    ) {
      learningPathsMenu.loadChildren();
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  const renderNavItem = (item) => {
    return /*#__PURE__*/ React.createElement(BrowseNavItem, {
      navItem: item,
      href: item.absolute_url,
      onSelect: browseNavStore.selectLevelOneItem,
      findFirstSubNavItem: itemFinders.findFirstLevelTwoItem,
      isSelected: item === browseNavStore.selectedLevelOneItem,
      subNavId: "header-browse-nav-level-two",
      id: `header-browse-nav-${item.type}-${item.id}`,
    });
  };
  const hasLearningPaths = Config.features.organization.learning_path.enabled;
  const hasCustomCategories = customCategories.children.length > 0;
  if (!hasLearningPaths && !hasCustomCategories) {
    return null;
  }
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    /*#__PURE__*/ React.createElement(
      DesktopNavSectionHeading,
      null,
      gettext("My organization")
    ),
    /*#__PURE__*/ React.createElement(
      BlockList,
      {
        size: "small",
        className: styles["section"],
        iconAlignment: "right",
      },
      hasLearningPaths && renderNavItem(learningPathsMenu),
      hasCustomCategories && renderNavItem(customCategories)
    )
  );
});
//# sourceMappingURL=browse-nav-level-one-items.react-component.js.map
