import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _dec, _class, _descriptor, _dec2, _class3, _descriptor2;
import { action, observable } from "mobx";
import React from "react";
import { FOLDERS_PAGE_SIZE } from "@udemy/learning-path";
import { Image } from "@udemy/react-core-components";
import { tokens } from "@udemy/styles";
import { udApi } from "@udemy/ud-api";
import { useUDData } from "@udemy/ud-data";
import { parseOrgCustomCategories } from "./parse-org-custom-categories";
export const UFB_BROWSE_TYPE = {
  LEARNING_PATHS: "learning_paths",
  LEARNING_PATH_FOLDER: "learning_path_folder",
  CUSTOM_CATEGORIES: "org_custom_categories",
  CUSTOM_CATEGORY: "org_custom_category",
};
export let LearningPathsMenuModel =
  ((_dec = observable.ref),
  ((_class = class LearningPathsMenuModel {
    constructor(headerStore, i18n) {
      var _headerStore$urls$LEA;
      this.i18n = i18n;
      _initializerDefineProperty(this, "children", _descriptor, this);
      this.type = void 0;
      this.id = void 0;
      this.absolute_url = void 0;
      this.type = UFB_BROWSE_TYPE.LEARNING_PATHS;
      this.id = 0;
      this.absolute_url =
        (_headerStore$urls$LEA = headerStore.urls.LEARNING_PATHS) !== null &&
        _headerStore$urls$LEA !== void 0
          ? _headerStore$urls$LEA
          : "";
      this.i18n = i18n;
    }
    get title() {
      return /*#__PURE__*/ React.createElement(
        FaviconTitle,
        null,
        this.i18n.gettext("Learning paths")
      );
    }
    async loadChildren() {
      const response = await udApi.get(
        "/structured-data/tags/learning_path_folder/",
        {
          params: {
            page_size: FOLDERS_PAGE_SIZE,
          },
        }
      );
      this._setChildren(response.data.results);
    }
    _setChildren(folders) {
      this.children = folders.map((folder) => {
        return {
          type: UFB_BROWSE_TYPE.LEARNING_PATH_FOLDER,
          id: folder.id,
          absolute_url: folder.url,
          title: folder.title,
        };
      });
    }
  }),
  ((_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "children",
    [_dec],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return [];
      },
    }
  )),
  _applyDecoratedDescriptor(
    _class.prototype,
    "_setChildren",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "_setChildren"),
    _class.prototype
  )),
  _class));
export let CustomCategoriesModel =
  ((_dec2 = observable.ref),
  ((_class3 = class CustomCategoriesModel {
    constructor(headerStore, i18n, udData) {
      this.i18n = i18n;
      this.udData = udData;
      _initializerDefineProperty(this, "children", _descriptor2, this);
      this.type = void 0;
      this.id = void 0;
      this.absolute_url = void 0;
      this.type = UFB_BROWSE_TYPE.CUSTOM_CATEGORIES;
      this.id = 0;
      this.absolute_url = headerStore.urls.BROWSE;
      this.i18n = i18n;
      this.udData = udData;
    }
    get title() {
      const title = this.udData.Config.features.organization.learning_path
        .enabled
        ? this.i18n.gettext("Categories")
        : this.i18n.interpolate(
            this.i18n.gettext("%(companyName)s collection"),
            {
              companyName: this.udData.Config.brand.title,
            },
            true
          );
      return /*#__PURE__*/ React.createElement(FaviconTitle, null, title);
    }
    loadChildren() {
      this.children = parseOrgCustomCategories(this.udData.browse);
    }
  }),
  ((_descriptor2 = _applyDecoratedDescriptor(
    _class3.prototype,
    "children",
    [_dec2],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return [];
      },
    }
  )),
  _applyDecoratedDescriptor(
    _class3.prototype,
    "loadChildren",
    [action],
    Object.getOwnPropertyDescriptor(_class3.prototype, "loadChildren"),
    _class3.prototype
  )),
  _class3));
const FaviconTitle = (_ref) => {
  let { children } = _ref;
  const { Config } = useUDData();
  const organization = Config.brand.organization;
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      style: {
        display: "flex",
        alignItems: "center",
      },
    },
    organization.favicon_image > 0 &&
      /*#__PURE__*/ React.createElement(Image, {
        src: organization.favicon_url,
        alt: "",
        width: 20,
        height: 20,
        style: {
          marginRight: tokens["space-xs"],
        },
      }),
    children
  );
};
//# sourceMappingURL=ufb-browse-types.js.map
