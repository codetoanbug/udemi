import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _dec, _dec2, _class, _descriptor, _descriptor2, _descriptor3;
import { action, observable, runInAction } from "mobx";
import { BROWSE_TYPE } from "../../browse-constants";
import { SUBCATEGORY_NOT_IN_PERSONAL_PLAN } from "../../constants";
import {
  MOST_POPULAR_SUBCATEGORY_IDS,
  fetchMostPopularTopicsForSubcategories,
} from "../../fetch-popular-topics";
export let MobileNavStore =
  ((_dec = observable.ref),
  (_dec2 = observable.ref),
  ((_class = class MobileNavStore {
    constructor() {
      _initializerDefineProperty(this, "maxLoadedLevel", _descriptor, this);
      _initializerDefineProperty(
        this,
        "navigationCategories",
        _descriptor2,
        this
      );
      _initializerDefineProperty(
        this,
        "mostPopularSubcategories",
        _descriptor3,
        this
      );
      this.loadNavigationCategories = async (headerData) => {
        const { user } = headerData;

        // Map header data to `navigateCategories` structure
        const navigationCategories = headerData.navigationCategories.map(
          (_ref) => {
            let { sd_tag: category, sublist } = _ref;
            // Build children from sublist categories
            const navigationCategoriesChildren = sublist.items.map((_ref2) => {
              let { sd_tag: subcategory } = _ref2;
              // If user has a consumer subscription, exclude some subcategories
              if (
                user.consumer_subscription_active &&
                SUBCATEGORY_NOT_IN_PERSONAL_PLAN.includes(subcategory.id)
              ) {
                return null;
              }
              return {
                id: subcategory.id,
                parentId: category.id,
                title: subcategory.title,
                absolute_url: subcategory.url,
                type: BROWSE_TYPE.SUBCATEGORY,
              };
            });
            const navigationCategory = {
              id: category.id,
              title: category.title,
              absolute_url: category.url,
              type: BROWSE_TYPE.CATEGORY,
              children: navigationCategoriesChildren.filter(Boolean),
            };
            return navigationCategory;
          }
        );
        runInAction(() => {
          this.navigationCategories = navigationCategories;
        });
      };
      this.loadMostPopularTopicsForSubcategories = async (locale) => {
        const popularTopics = await fetchMostPopularTopicsForSubcategories(
          locale
        );
        const mostPopularSubcategories = this.navigationCategories
          .reduce((acc, _ref3) => {
            let { children } = _ref3;
            return [...acc, ...children];
          }, [])
          .filter((_ref4) => {
            let { id } = _ref4;
            return MOST_POPULAR_SUBCATEGORY_IDS.includes(id);
          })
          .map((mostPopularSubcategory) => ({
            ...mostPopularSubcategory,
            popularTopics: popularTopics[mostPopularSubcategory.id],
          }));
        runInAction(() => {
          this.mostPopularSubcategories = mostPopularSubcategories;
        });
      };
    }
    isLevelLoaded(level) {
      return level <= this.maxLoadedLevel;
    }
    ensureLevelIsLoaded(level) {
      this.maxLoadedLevel = Math.max(this.maxLoadedLevel, level);
    }
  }),
  ((_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "maxLoadedLevel",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return 0;
      },
    }
  )),
  (_descriptor2 = _applyDecoratedDescriptor(
    _class.prototype,
    "navigationCategories",
    [_dec],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return null;
      },
    }
  )),
  (_descriptor3 = _applyDecoratedDescriptor(
    _class.prototype,
    "mostPopularSubcategories",
    [_dec2],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return null;
      },
    }
  )),
  _applyDecoratedDescriptor(
    _class.prototype,
    "ensureLevelIsLoaded",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "ensureLevelIsLoaded"),
    _class.prototype
  )),
  _class));
//# sourceMappingURL=mobile-nav.mobx-store.js.map
