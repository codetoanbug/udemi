import { observer } from "mobx-react";
import React from "react";
import { useI18n } from "@udemy/i18n";
import NextIcon from "@udemy/icons/dist/next.ud-icon";
import PreviousIcon from "@udemy/icons/dist/previous.ud-icon";
import { Avatar, BlockList } from "@udemy/react-core-components";
import { SideDrawer, SubDrawer } from "@udemy/react-dialog-components";
import { useHeaderStore } from "../../hooks/use-header-store";
import { useMobileNavStore } from "../../hooks/use-mobile-nav-store";
import styles from "./mobile-nav.module.css";
export const MobileNav = /*#__PURE__*/ React.forwardRef((props, ref) => {
  const { gettext } = useI18n();
  return /*#__PURE__*/ React.createElement(
    SideDrawer,
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    Object.assign(
      {
        ref: ref,
        id: "header-toggle-side-nav",
        mainDrawerId: "header-toggle-side-nav-main",
        title: gettext("Site navigation"),
        side: "left",
        className: styles.nav,
      },
      props
    )
  );
});
export const MobileNavSectionHeading = (_ref) => {
  let { children, ...props } = _ref;
  return /*#__PURE__*/ React.createElement(
    "h2",
    Object.assign(
      {
        className: `ud-heading-sm ${styles["nav-section-heading"]}`,
      },
      props
    ),
    children
  );
};
export const MobileNavSection = (props) => {
  return /*#__PURE__*/ React.createElement(
    BlockList,
    Object.assign(
      {
        className: styles["nav-section"],
        size: "large",
        iconAlignment: "right",
      },
      props
    )
  );
};

// eslint-disable-next-line @typescript-eslint/no-explicit-any

export const MobileNavItem = (props) => {
  const defaultProps = {
    color: "neutral",
  };
  const { gettext } = useI18n();
  if ("cssToggleId" in props) {
    defaultProps.componentClass = "button";
    defaultProps.icon = /*#__PURE__*/ React.createElement(NextIcon, {
      label: gettext("Expand"),
    });
  }
  return /*#__PURE__*/ React.createElement(
    BlockList.Item,
    Object.assign(
      {},
      defaultProps,
      {
        className: styles["nav-item"],
      },
      props
    )
  );
};
export const MobileNavBackItem = (props) => {
  const { gettext } = useI18n();
  return /*#__PURE__*/ React.createElement(
    BlockList.Item,
    Object.assign(
      {
        componentClass: "button",
        cssToggleId: "header-toggle-side-nav-main",
        color: "neutral",
        icon: /*#__PURE__*/ React.createElement(PreviousIcon, {
          label: gettext("Go back"),
        }),
        className: `${styles["nav-item"]} ${styles.highlighted}`,
      },
      props
    )
  );
};
export const MobileNavL1Nav = (_ref2) => {
  var _title;
  let { title, children, ...props } = _ref2;
  const mobileNavStore = useMobileNavStore();
  const onSelect = () => mobileNavStore.ensureLevelIsLoaded(2);
  const { gettext } = useI18n();
  title =
    (_title = title) !== null && _title !== void 0 ? _title : gettext("Menu");
  return /*#__PURE__*/ React.createElement(
    SubDrawer,
    Object.assign(
      {
        level: 1,
        className: styles.nav,
        onSelect: onSelect,
      },
      props
    ),
    /*#__PURE__*/ React.createElement(
      BlockList,
      {
        size: "large",
        padding: "loose",
      },
      /*#__PURE__*/ React.createElement(MobileNavBackItem, null, title)
    ),
    children
  );
};
export const MobileNavL2Nav = (_ref3) => {
  let { id, l1NavId, l1NavTitle, children, ...props } = _ref3;
  const { gettext } = useI18n();
  return /*#__PURE__*/ React.createElement(
    SubDrawer,
    Object.assign(
      {
        id: id,
        level: 2,
        className: styles.nav,
      },
      props
    ),
    /*#__PURE__*/ React.createElement(
      BlockList,
      {
        size: "large",
        padding: "loose",
      },
      /*#__PURE__*/ React.createElement(
        MobileNavBackItem,
        null,
        gettext("Menu")
      ),
      /*#__PURE__*/ React.createElement(
        MobileNavBackItem,
        {
          cssToggleId: l1NavId,
          className: `${styles["nav-item"]} ${styles.underlined}`,
        },
        l1NavTitle
      )
    ),
    children
  );
};
export const MobileNavWelcomeSection = observer((_ref4) => {
  let { badge, ...props } = _ref4;
  const { gettext, interpolate } = useI18n();
  const headerStore = useHeaderStore();
  const { user } = headerStore.userSpecificContext;
  if (!user || !user.id) {
    return null;
  }
  return /*#__PURE__*/ React.createElement(
    MobileNavSection,
    {
      padding: "loose",
      className: styles["welcome-section"],
    },
    /*#__PURE__*/ React.createElement(
      MobileNavItem,
      Object.assign({}, props, {
        className: `${styles["nav-item"]} ${styles.highlighted}`,
      }),
      /*#__PURE__*/ React.createElement(
        "span",
        {
          className: styles["welcome-section-content"],
        },
        /*#__PURE__*/ React.createElement(
          "span",
          {
            style: {
              display: "inline-flex",
              position: "relative",
            },
          },
          /*#__PURE__*/ React.createElement(Avatar, {
            user: user,
            alt: "NONE",
          }),
          badge
        ),
        /*#__PURE__*/ React.createElement(
          "span",
          {
            style: {
              flex: 1,
            },
          },
          /*#__PURE__*/ React.createElement(
            "span",
            {
              className: `ud-heading-md ${styles["profile-name"]}`,
            },
            interpolate(
              gettext("Hi, %(name)s"),
              {
                name: user.display_name,
              },
              true
            )
          ),
          /*#__PURE__*/ React.createElement(
            "span",
            {
              className: `ud-text-sm ${styles["profile-welcome"]}`,
            },
            gettext("Welcome back")
          )
        )
      )
    )
  );
});
//# sourceMappingURL=mobile-nav.react-component.js.map
