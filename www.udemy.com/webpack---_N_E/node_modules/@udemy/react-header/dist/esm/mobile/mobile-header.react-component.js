import Observer from "@researchgate/react-intersection-observer";
import classNames from "classnames";
import { observer } from "mobx-react";
import React, { useEffect, useMemo, useRef, useState } from "react";
import { useI18n } from "@udemy/i18n";
import CartIcon from "@udemy/icons/dist/cart.ud-icon";
import CloseIcon from "@udemy/icons/dist/close.ud-icon";
import MenuIcon from "@udemy/icons/dist/menu.ud-icon";
import SearchIcon from "@udemy/icons/dist/search.ud-icon";
import { CheckedStateCheckbox } from "@udemy/react-checked-state-components";
import { isChecked } from "@udemy/react-checked-state-components";
import { IconButton } from "@udemy/react-core-components";
import { FocusTrappingDialog } from "@udemy/react-dialog-components";
import {
  SearchFormAutocompleteStore,
  SearchFormAutocomplete,
} from "@udemy/search-form-autocomplete";
import { SmartBar, SmartBarSpacer } from "@udemy/smart-bar";
import { useUDData } from "@udemy/ud-data";
import { CartBadge } from "../badges.react-component";
import { HeaderContextProvider } from "../contexts/header-context";
import { loadCommonAppContext } from "../external/load-common-app-context";
import { HeaderStore } from "../header.mobx-store";
import { Logo } from "../logo.react-component";
import styles from "./mobile-header.module.css";
import { MobileIAStudentNav } from "./mobile-nav/mobile-ia-student-nav.react-component";
import { MobileNavStore } from "./mobile-nav/mobile-nav.mobx-store";
export const MobileHeader = observer((_ref) => {
  let {
    searchPhrase = "",
    ufbContext,
    isInsideDesktopHeader = false,
    persistentSearch = false,
    showAutocompletePopularQueriesOnEmptyState = "disabled",
    shoppingClient,
    useLangPrefixedUrls = false,
    mobileAppLink,
  } = _ref;
  const isUFB = !!ufbContext;
  const udData = useUDData();
  const udConfig = udData.Config;
  const { gettext, locale } = useI18n();
  const [mobileNavStore] = useState(() => new MobileNavStore());
  const [wasSearchPhraseInitialized, setWasSearchPhraseInitialized] =
    useState(false);
  const [headerStore] = useState(
    () =>
      new HeaderStore({
        mobileAppLink,
        ufbContext,
        shoppingClient,
      })
  );
  const [searchFormAutocompleteStore] = useState(
    () =>
      new SearchFormAutocompleteStore({
        url: headerStore.urls.SEARCH_SUGGESTIONS,
        getFormParams: () => headerStore.formActionParams,
        isPopularQueriesExperimentEnabled:
          showAutocompletePopularQueriesOnEmptyState === "enabled",
        gettext,
        inputValue: searchPhrase,
      })
  );
  const ufbStores = useMemo(() => {
    var _ufbContext$createSto;
    return ufbContext === null || ufbContext === void 0
      ? void 0
      : (_ufbContext$createSto = ufbContext.createStores) === null ||
        _ufbContext$createSto === void 0
      ? void 0
      : _ufbContext$createSto.call(ufbContext, headerStore);
  }, [headerStore, ufbContext]);
  const searchDialogRef = useRef();
  const searchInputRef = useRef();
  // TODO: do we need this?
  // const searchBarCheckboxRef = useRef<any>();
  const [floatingHeaderIsVisible, setFloatingHeaderIsVisible] = useState(false);
  useEffect(() => {
    (async () => {
      const response = await loadCommonAppContext(locale, isUFB);
      headerStore.setUserSpecificContext(response.data.header);
      searchFormAutocompleteStore.setSearchFormExperimentFeatures(
        headerStore.userSpecificContext.searchFormExperimentFeatures
      );
      mobileNavStore.loadNavigationCategories(response.data.header);
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  function handleHeaderIntersection(entry) {
    const intersectionRatio = entry.intersectionRatio;

    // Display floating header if normal header is entirely out of view
    if (!floatingHeaderIsVisible && intersectionRatio === 0) {
      setFloatingHeaderIsVisible(true);
    }
  }
  function handleTopMarkIntersection(entry) {
    const { top } = entry.boundingClientRect;

    // However, only restore normal header if we are all the way back at the top of the page.
    if (floatingHeaderIsVisible && top >= 0) {
      setFloatingHeaderIsVisible(false);
    }
  }
  function findSearchBarNodeToFocusOn() {
    return document.getElementById("header-mobile-search-bar");
  }
  function onChangeSearchBar(event) {
    var _searchDialogRef$curr, _searchInputRef$curre;
    const isSearchBarStateChecked = isChecked(event);
    (_searchDialogRef$curr = searchDialogRef.current) === null ||
    _searchDialogRef$curr === void 0
      ? void 0
      : _searchDialogRef$curr.onToggle(isSearchBarStateChecked);
    if (
      searchPhrase &&
      !wasSearchPhraseInitialized &&
      isSearchBarStateChecked
    ) {
      // Initialize the search phrase the first time the search bar is opened.
      // We need to do this here, after the search bar receives focus,
      // so that the cursor is positioned at the end of the input value.
      searchFormAutocompleteStore.setInputValue(searchPhrase || "");
      setWasSearchPhraseInitialized(true);
    }
    if (isSearchBarStateChecked) {
      searchFormAutocompleteStore.openMenu();
    } else {
      searchFormAutocompleteStore.closeMenu();
    }
    (_searchInputRef$curre = searchInputRef.current) === null ||
    _searchInputRef$curre === void 0
      ? void 0
      : _searchInputRef$curre.focus();
  }
  function getSearchBarLabel() {
    var _headerStore$userSpec, _headerStore$userSpec2;
    if (
      isUFB &&
      (_headerStore$userSpec = headerStore.userSpecificContext) !== null &&
      _headerStore$userSpec !== void 0 &&
      (_headerStore$userSpec2 = _headerStore$userSpec.user) !== null &&
      _headerStore$userSpec2 !== void 0 &&
      _headerStore$userSpec2.enable_in_lecture_search_segments
    ) {
      return gettext("What would you like to learn today?");
    } else {
      return gettext("Search for anything");
    }
  }
  function renderHeader(udConfig, floating) {
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        className: classNames(
          "ud-header",
          styles.header,
          styles["with-shadow"],
          {
            [styles.floating]: floating,
          }
        ),
        "data-testid": "mobile-header",
      },
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: classNames(styles.row),
        },
        /*#__PURE__*/ React.createElement(
          IconButton,
          {
            udStyle: "ghost",
            cssToggleId: "header-toggle-side-nav",
            className: "ud-mobile-header-btn",
            "data-purpose": "side-menu-opener",
          },
          /*#__PURE__*/ React.createElement(MenuIcon, {
            color: "neutral",
            label: gettext("Open side drawer"),
          })
        ),
        udConfig.features.shopping_cart &&
          headerStore.showCartDropdown &&
          /*#__PURE__*/ React.createElement("div", {
            className: classNames(styles["button-spacer"]),
          }),
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: classNames(styles.row, styles.middle),
          },
          /*#__PURE__*/ React.createElement(
            "a",
            {
              href: headerStore.urls.BROWSE,
            },
            /*#__PURE__*/ React.createElement(Logo, {
              ufbContext: ufbContext,
              width: 75,
              height: 28,
              style: {
                verticalAlign: "middle",
              },
            })
          )
        ),
        /*#__PURE__*/ React.createElement(
          IconButton,
          {
            udStyle: "ghost",
            cssToggleId: "header-toggle-search-bar",
            className: "ud-mobile-header-btn",
          },
          /*#__PURE__*/ React.createElement(SearchIcon, {
            id: "mobile-header-open-search-icon",
            color: "neutral",
            label: gettext("Open search"),
          })
        ),
        udConfig.features.shopping_cart &&
          headerStore.showCartDropdown &&
          /*#__PURE__*/ React.createElement(
            IconButton,
            {
              udStyle: "ghost",
              componentClass: "a",
              href: headerStore.urls.CART,
              overlaychildren: /*#__PURE__*/ React.createElement(CartBadge, {
                className: classNames(styles["cart-badge"]),
              }),
              className: "ud-mobile-header-btn",
            },
            /*#__PURE__*/ React.createElement(CartIcon, {
              color: "neutral",
              label: gettext("Go to cart"),
            })
          )
      )
    );
  }
  return /*#__PURE__*/ React.createElement(
    HeaderContextProvider,
    Object.assign(
      {
        headerStore: headerStore,
        mobileNavStore: mobileNavStore,
      },
      ufbStores,
      {
        ufbContext: ufbContext,
      }
    ),
    /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      /*#__PURE__*/ React.createElement(CheckedStateCheckbox, {
        id: "header-toggle-search-bar",
        className: "ud-full-page-overlay-checkbox",
        onChange: onChangeSearchBar,
        closeOnEscape: true,
      }),
      !isInsideDesktopHeader &&
        headerStore.userSpecificContext.user &&
        /*#__PURE__*/ React.createElement(SmartBar, {
          isPersonalPlanSubscriber: headerStore.isPersonalPlanSubscriber,
          isUdemyBusinessSubscriber:
            Object.keys(
              ufbContext !== null && ufbContext !== void 0 ? ufbContext : {}
            ).length > 0,
        }),
      !isInsideDesktopHeader &&
        headerStore.userSpecificContext.user &&
        /*#__PURE__*/ React.createElement(SmartBarSpacer, {
          disableHideButtonWhenVisible: true,
        }),
      /*#__PURE__*/ React.createElement(
        Observer,
        {
          onChange: handleTopMarkIntersection,
        },
        /*#__PURE__*/ React.createElement("span", {
          className: classNames(styles.mark),
        })
      ),
      /*#__PURE__*/ React.createElement(
        Observer,
        {
          onChange: handleHeaderIntersection,
        },
        renderHeader(udConfig, false)
      ),
      floatingHeaderIsVisible &&
        persistentSearch &&
        renderHeader(udConfig, true),
      /*#__PURE__*/ React.createElement(
        FocusTrappingDialog,
        {
          ref: searchDialogRef,
          labelledById: "header-mobile-search-bar-title",
          findNodeToFocusOn: findSearchBarNodeToFocusOn,
          className: classNames(
            styles["search-bar"],
            styles["search-bar-layer"]
          ),
        },
        /*#__PURE__*/ React.createElement(
          IconButton,
          {
            udStyle: "ghost",
            cssToggleId: "header-toggle-search-bar",
            className: classNames(
              "ud-mobile-header-btn",
              styles["search-bar-close"]
            ),
          },
          /*#__PURE__*/ React.createElement(CloseIcon, {
            color: "neutral",
            label: gettext("Close search"),
          })
        ),
        /*#__PURE__*/ React.createElement(
          "span",
          {
            className: "ud-sr-only",
          },
          gettext("Search bar")
        ),
        /*#__PURE__*/ React.createElement(SearchFormAutocomplete, {
          searchFormAutocompleteStore: searchFormAutocompleteStore,
          id: "header-mobile-search-bar",
          formAction: headerStore.urls.SEARCH,
          formActionParams: headerStore.formActionParams,
          label: getSearchBarLabel(),
          inputProps: {
            className: "js-header-search-field",
            name: "q",
            /* ref: searchInputRef, */
          },

          reversed: true,
          className: classNames(styles["search-bar-form"]),
          showResultsWithImage:
            !udConfig.brand.has_organization &&
            !headerStore.isPersonalPlanSubscriber,
        })
      ),
      /*#__PURE__*/ React.createElement(MobileIAStudentNav, {
        useLangPrefixedUrls: useLangPrefixedUrls,
      })
    )
  );
});
//# sourceMappingURL=mobile-header.react-component.js.map
