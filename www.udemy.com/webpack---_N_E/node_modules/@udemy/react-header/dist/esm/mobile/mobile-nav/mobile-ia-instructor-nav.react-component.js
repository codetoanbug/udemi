import { observer } from "mobx-react";
import React from "react";
import { useI18n } from "@udemy/i18n";
import { useUDData } from "@udemy/ud-data";
import {
  UnreadMessagesBadge,
  UnreadActivityNotificationsBadge,
} from "../../badges.react-component";
import { useHeaderStore } from "../../hooks/use-header-store";
import { useMobileNavStore } from "../../hooks/use-mobile-nav-store";
import { ManageSubNavs } from "../../ufb-mobile/mobile-nav/manage-sub-navs.react-component";
import { MobileInstructorAccountNav } from "./level-one/mobile-instructor-account-nav.react-component";
import { MobileInstructorCommunicationNav } from "./level-one/mobile-instructor-communication-nav.react-component";
import { MobileInstructorHelpNav } from "./level-one/mobile-instructor-help-nav.react-component";
import { MobileInstructorPerformanceNav } from "./level-one/mobile-instructor-performance-nav.react-component";
import { MobileInstructorProfileNav } from "./level-one/mobile-instructor-profile-nav.react-component";
import { MobileInstructorToolsNav } from "./level-one/mobile-instructor-tools-nav.react-component";
import styles from "./mobile-nav.module.css";
import {
  MobileNav,
  MobileNavItem,
  MobileNavL2Nav,
  MobileNavSection,
  MobileNavWelcomeSection,
} from "./mobile-nav.react-component";
export const MobileIAInstructorNav = observer(() => {
  const udData = useUDData();
  const udConfig = udData.Config;
  const headerStore = useHeaderStore();
  const mobileNavStore = useMobileNavStore();
  const { gettext } = useI18n();
  function onToggle() {
    mobileNavStore.ensureLevelIsLoaded(1);
  }
  function iaSwitchSection() {
    const { instructorURLs } = headerStore;
    const { organizationState } = headerStore.userSpecificContext;
    return /*#__PURE__*/ React.createElement(
      MobileNavSection,
      null,
      udConfig.brand.is_teaching_enabled &&
        /*#__PURE__*/ React.createElement(
          MobileNavItem,
          {
            href: instructorURLs.BROWSE,
            color: "link",
          },
          udConfig.brand.has_organization
            ? gettext("Switch to learner view")
            : gettext("Switch to student view")
        ),
      (organizationState === null || organizationState === void 0
        ? void 0
        : organizationState.should_show_manage_menu) &&
        /*#__PURE__*/ React.createElement(
          MobileNavItem,
          {
            cssToggleId: "header-toggle-side-nav-manage",
          },
          gettext("Manage")
        )
    );
  }
  function instructorSection1() {
    const { instructorURLs } = headerStore;
    return /*#__PURE__*/ React.createElement(
      MobileNavSection,
      null,
      /*#__PURE__*/ React.createElement(
        MobileNavItem,
        {
          href: instructorURLs.COURSES,
        },
        gettext("Courses")
      ),
      /*#__PURE__*/ React.createElement(
        MobileNavItem,
        {
          cssToggleId: "header-toggle-side-nav-instructor-communication",
        },
        gettext("Communication"),
        /*#__PURE__*/ React.createElement(UnreadMessagesBadge, {
          className: styles["inline-notification-badge"],
        })
      ),
      /*#__PURE__*/ React.createElement(
        MobileNavItem,
        {
          cssToggleId: "header-toggle-side-nav-instructor-performance",
        },
        gettext("Performance")
      ),
      /*#__PURE__*/ React.createElement(
        MobileNavItem,
        {
          cssToggleId: "header-toggle-side-nav-instructor-tools",
        },
        gettext("Tools")
      ),
      /*#__PURE__*/ React.createElement(
        MobileNavItem,
        {
          cssToggleId: "header-toggle-side-nav-instructor-help",
        },
        gettext("Resources")
      )
    );
  }
  function instructorSection2() {
    var _headerStore$mobileAp;
    const { instructorURLs, userSpecificContext } = headerStore;
    const { user } = userSpecificContext;
    return /*#__PURE__*/ React.createElement(
      MobileNavSection,
      null,
      udConfig.features.notifications &&
        /*#__PURE__*/ React.createElement(
          MobileNavItem,
          {
            href: instructorURLs.VIEW_NOTIFICATIONS,
          },
          gettext("Notifications"),
          /*#__PURE__*/ React.createElement(UnreadActivityNotificationsBadge, {
            className: styles["inline-notification-badge"],
          })
        ),
      /*#__PURE__*/ React.createElement(
        MobileNavItem,
        {
          cssToggleId: "header-toggle-side-nav-instructor-account",
        },
        gettext("Account settings")
      ),
      headerStore.isPayoutSettingsEnabled &&
        /*#__PURE__*/ React.createElement(
          MobileNavItem,
          {
            href: instructorURLs.PAYOUT_SETTINGS,
          },
          gettext("Payout & tax settings")
        ),
      headerStore.isRevenueReportEnabled &&
        /*#__PURE__*/ React.createElement(
          MobileNavItem,
          {
            href: instructorURLs.REVENUE_REPORT,
          },
          gettext("Revenue report")
        ),
      /*#__PURE__*/ React.createElement(
        MobileNavItem,
        {
          href:
            (_headerStore$mobileAp = headerStore.mobileAppLink) === null ||
            _headerStore$mobileAp === void 0
              ? void 0
              : _headerStore$mobileAp.url,
          target: "_blank",
          rel: "noopener noreferrer",
        },
        gettext("Get the app")
      ),
      /*#__PURE__*/ React.createElement(
        MobileNavItem,
        {
          href: user.logout_url,
        },
        gettext("Log out")
      )
    );
  }
  function engagementSubMenu() {
    const { basePath, paths } = headerStore.getInstructorPerformancePaths();
    return /*#__PURE__*/ React.createElement(
      MobileNavL2Nav,
      {
        id: "header-toggle-side-nav-instructor-performance-engagement",
        l1NavId: "header-toggle-side-nav-instructor-performance",
        l1NavTitle: gettext("Engagement"),
      },
      /*#__PURE__*/ React.createElement(
        MobileNavSection,
        null,
        /*#__PURE__*/ React.createElement(
          MobileNavItem,
          {
            href: `${basePath}${paths.engagementPath}`,
          },
          gettext("Course engagement")
        ),
        /*#__PURE__*/ React.createElement(
          MobileNavItem,
          {
            href: `${basePath}${paths.practiceInsightsPath}`,
          },
          gettext("Practice insights")
        )
      )
    );
  }
  function subNavs() {
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      headerStore.isDisplayPracticeInsightsNewPageWithFunnelViewEnabled &&
        mobileNavStore.isLevelLoaded(2) &&
        engagementSubMenu(),
      mobileNavStore.isLevelLoaded(1) &&
        /*#__PURE__*/ React.createElement(MobileInstructorAccountNav, null),
      mobileNavStore.isLevelLoaded(1) &&
        /*#__PURE__*/ React.createElement(MobileInstructorHelpNav, null),
      mobileNavStore.isLevelLoaded(1) &&
        /*#__PURE__*/ React.createElement(MobileInstructorToolsNav, null),
      mobileNavStore.isLevelLoaded(1) &&
        /*#__PURE__*/ React.createElement(MobileInstructorPerformanceNav, null),
      mobileNavStore.isLevelLoaded(1) &&
        /*#__PURE__*/ React.createElement(
          MobileInstructorCommunicationNav,
          null
        ),
      /*#__PURE__*/ React.createElement(ManageSubNavs, null),
      mobileNavStore.isLevelLoaded(1) &&
        /*#__PURE__*/ React.createElement(MobileInstructorProfileNav, null)
    );
  }
  return /*#__PURE__*/ React.createElement(
    MobileNav,
    {
      onToggle: onToggle,
      subDrawers: subNavs(),
    },
    /*#__PURE__*/ React.createElement(MobileNavWelcomeSection, {
      cssToggleId: "header-toggle-side-nav-instructor-profile",
    }),
    iaSwitchSection(),
    instructorSection1(),
    instructorSection2()
  );
});
//# sourceMappingURL=mobile-ia-instructor-nav.react-component.js.map
