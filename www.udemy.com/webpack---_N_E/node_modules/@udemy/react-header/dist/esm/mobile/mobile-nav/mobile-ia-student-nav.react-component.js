import { observer } from "mobx-react";
import React, { useRef, useState } from "react";
import {
  UFBNoticeClickEvent,
  UFBNoticeImpressionEvent,
} from "@udemy/browse-event-tracking";
import { Tracker, TrackImpression } from "@udemy/event-tracking";
import { useI18n } from "@udemy/i18n";
import {
  LanguageSelectorButton,
  LanguageSeoLinks,
} from "@udemy/language-selector";
import { ProBadge } from "@udemy/learning-path";
import { toBusinessUdemy } from "@udemy/organization";
import { range } from "@udemy/shared-utils";
import { UDEMY_PRO_PLACEHOLDER_URL } from "@udemy/subscription-browse";
import { udLink, useUDData } from "@udemy/ud-data";
import { ProfileBadge } from "../../badges.react-component";
import { BROWSE_LEARNING_TYPES, BADGING_NAV } from "../../browse-constants";
import { LanguageSelectorLocation } from "../../constants";
import {
  CategoryNavItemSelectEvent,
  LearningTypeNavItemSelectEvent,
  BadgeNavItemSelectEvent,
} from "../../events";
import { MOST_POPULAR_SUBCATEGORY_IDS } from "../../fetch-popular-topics";
import { useHeaderStore } from "../../hooks/use-header-store";
import { useMobileNavStore } from "../../hooks/use-mobile-nav-store";
import { useUfbContext } from "../../hooks/use-ufb-context";
import { LanguageSelectorOverlay } from "./language-selector/language-selector-overlay.react-component";
import { MobileCategoryNav } from "./level-one/mobile-category-nav.react-component";
import { MobilePopularTopicNavs } from "./level-one/mobile-popular-topic-navs.react-component";
import { MobileStudentProfileNav } from "./level-one/mobile-student-profile-nav.react-component";
import { MobileSubcategoryNav } from "./level-two/mobile-subcategory-nav.react-component";
import styles from "./mobile-nav.module.css";
import {
  MobileNavSection,
  MobileNavItem,
  MobileNavSectionHeading,
  MobileNav,
  MobileNavWelcomeSection,
} from "./mobile-nav.react-component";
export const MobileIAStudentNav = observer((_ref) => {
  var _ufbContext$subNavs, _ufbContext$manageAnd, _ufbContext$browseSec;
  let { useLangPrefixedUrls } = _ref;
  const { gettext, locale } = useI18n();
  const headerStore = useHeaderStore();
  const mobileNavStore = useMobileNavStore();
  const ufbContext = useUfbContext();
  const udData = useUDData();
  const udMe = udData.me;
  const sideDrawerRef = useRef(null);
  const [isLanguageSelectorOpen, setLanguageSelectorOpen] = useState(false);
  function handleLanguageSelectorButtonClick() {
    var _sideDrawerRef$curren;
    setLanguageSelectorOpen(true);
    (_sideDrawerRef$curren = sideDrawerRef.current) === null ||
    _sideDrawerRef$curren === void 0
      ? void 0
      : _sideDrawerRef$curren.scrollTo(0, 0);
  }
  function handleBrowseLearningItemClick(item) {
    Tracker.publishEvent(new LearningTypeNavItemSelectEvent(item.type));
  }
  function handleBadgeNavItemClick(item) {
    Tracker.publishEvent(new BadgeNavItemSelectEvent(item.type));
  }
  function handleSubcategoryNavClick(item) {
    const context = {
      categoryId: item.parentId,
      subcategoryId: item.id,
      topicId: null,
    };
    Tracker.publishEvent(
      new CategoryNavItemSelectEvent({
        context,
      })
    );
  }
  function onToggle() {
    setLanguageSelectorOpen(false);
    mobileNavStore.ensureLevelIsLoaded(1);
    mobileNavStore.loadMostPopularTopicsForSubcategories(locale);
  }
  function loggedOutSection() {
    const { user } = headerStore.userSpecificContext;
    if (!user || user.id) {
      return null;
    }
    return /*#__PURE__*/ React.createElement(
      MobileNavSection,
      null,
      /*#__PURE__*/ React.createElement(
        MobileNavItem,
        {
          href: udLink.toAuth({
            showLogin: true,
            responseType: "html",
          }),
          color: "link",
        },
        gettext("Log in")
      ),
      /*#__PURE__*/ React.createElement(
        MobileNavItem,
        {
          href: udLink.toAuth({
            ...headerStore.signupParams,
            responseType: "html",
          }),
          color: "link",
          "data-purpose": "header-signup-mobile-nav",
        },
        gettext("Sign up")
      )
    );
  }
  function iaSwitchSection() {
    const { isInstructor, user } = headerStore.userSpecificContext;
    if (!user || !user.id || !isInstructor) {
      return null;
    }
    return /*#__PURE__*/ React.createElement(
      MobileNavSection,
      null,
      /*#__PURE__*/ React.createElement(
        MobileNavItem,
        {
          href: headerStore.urls.TEACH,
          color: "link",
        },
        gettext("Switch to instructor view")
      )
    );
  }
  function learnSection() {
    const { user } = headerStore.userSpecificContext;
    if (!user || !user.id) {
      return null;
    }
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      /*#__PURE__*/ React.createElement(
        MobileNavSectionHeading,
        null,
        gettext("Learn")
      ),
      /*#__PURE__*/ React.createElement(
        MobileNavSection,
        null,
        /*#__PURE__*/ React.createElement(
          MobileNavItem,
          {
            href: headerStore.urls.MY_LEARNING,
          },
          gettext("My learning")
        ),
        user.sms_subscriptions_active &&
          /*#__PURE__*/ React.createElement(
            MobileNavItem,
            {
              href: UDEMY_PRO_PLACEHOLDER_URL,
              color: "link",
            },
            gettext("All programs")
          ),
        headerStore.enableCartOnMobileNav &&
          headerStore.notificationBadgeContext.cartBuyables > 0 &&
          /*#__PURE__*/ React.createElement(
            MobileNavItem,
            {
              href: headerStore.urls.CART,
            },
            gettext("My cart")
          )
      )
    );
  }
  function showPersonalPlanNav() {
    const { user } = headerStore.userSpecificContext;
    return user === null || user === void 0
      ? void 0
      : user.consumer_subscription_active;
  }
  function showUBProNav() {
    var _organization;
    const udConfig = udData.Config;
    return (
      udConfig.brand.has_organization &&
      (udConfig.features.organization.learning_path.pro_path ||
        (udMe === null || udMe === void 0
          ? void 0
          : (_organization = udMe.organization) === null ||
            _organization === void 0
          ? void 0
          : _organization.is_pro_license_holder))
    );
  }
  function showBadgingNavChangesForPPUB() {
    const { user } = headerStore.userSpecificContext;
    return user === null || user === void 0
      ? void 0
      : user.show_updated_pp_and_ub_navigation;
  }
  function showBadgingNavChangesForMX() {
    const { user } = headerStore.userSpecificContext;
    return user === null || user === void 0
      ? void 0
      : user.show_updated_mx_navigation;
  }
  function renderLearningTypeNavItem(item) {
    return /*#__PURE__*/ React.createElement(
      MobileNavItem,
      {
        "data-purpose": `link-${item.type}`,
        onClick: () => handleBrowseLearningItemClick(item),
        href: item.absolute_url,
      },
      item.title
    );
  }
  function learningTypesSectionTitle() {
    if (showPersonalPlanNav() && showBadgingNavChangesForPPUB())
      return gettext("Explore active learning ");
    else if (showUBProNav() && showBadgingNavChangesForPPUB())
      return gettext("Explore Pro");
    return gettext("Explore by type");
  }
  function learningTypesSection() {
    const { user } = headerStore.userSpecificContext;
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      /*#__PURE__*/ React.createElement(
        MobileNavSectionHeading,
        {
          "data-purpose": "section-active-learning",
        },
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: styles["learning-types-section"],
          },
          learningTypesSectionTitle(),
          showUBProNav() && /*#__PURE__*/ React.createElement(ProBadge, null)
        )
      ),
      /*#__PURE__*/ React.createElement(
        MobileNavSection,
        null,
        ((user === null || user === void 0
          ? void 0
          : user.enableLabsInPersonalPlan) ||
          showUBProNav()) &&
          renderLearningTypeNavItem(BROWSE_LEARNING_TYPES(gettext).LABS),
        renderLearningTypeNavItem(BROWSE_LEARNING_TYPES(gettext).ASSESSMENTS),
        showUBProNav() &&
          showBadgingNavChangesForPPUB() &&
          renderLearningTypeNavItem(
            BROWSE_LEARNING_TYPES(gettext).UDEMY_PRO_PATHS
          )
      )
    );
  }
  function badgesSection() {
    var _brand$organization;
    // Hide Badges section for UB China
    const { brand } = udData.Config;
    if (
      brand.organization &&
      (_brand$organization = brand.organization) !== null &&
      _brand$organization !== void 0 &&
      _brand$organization.is_enterprise_china
    ) {
      return null;
    }
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      /*#__PURE__*/ React.createElement(
        MobileNavSectionHeading,
        {
          "data-purpose": "section-badges",
        },
        gettext("Explore badges")
      ),
      /*#__PURE__*/ React.createElement(
        MobileNavSection,
        null,
        /*#__PURE__*/ React.createElement(
          MobileNavItem,
          {
            "data-purpose": "certifications-link",
            onClick: () =>
              handleBadgeNavItemClick(BADGING_NAV(gettext).CERTIFICATIONS),
            href: BADGING_NAV(gettext).CERTIFICATIONS.absolute_url,
          },
          BADGING_NAV(gettext).CERTIFICATIONS.title
        )
      )
    );
  }
  function mostPopularSection() {
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      /*#__PURE__*/ React.createElement(
        MobileNavSectionHeading,
        null,
        showPersonalPlanNav() || showBadgingNavChangesForMX()
          ? gettext("Explore by category")
          : gettext("Most popular")
      ),
      /*#__PURE__*/ React.createElement(
        MobileNavSection,
        null,
        mobileNavStore.mostPopularSubcategories
          ? mobileNavStore.mostPopularSubcategories.map((s) =>
              /*#__PURE__*/ React.createElement(
                MobileNavItem,
                {
                  onClick: () => handleSubcategoryNavClick(s),
                  key: `most-popular-subcategory-item-${s.id}`,
                  cssToggleId: `header-toggle-side-nav-popular-topics-of-${s.id}`,
                  "data-purpose": "most-popular-subcategory-item",
                },
                s.title
              )
            )
          : range(MOST_POPULAR_SUBCATEGORY_IDS.length).map((i) =>
              /*#__PURE__*/ React.createElement(MobileNavItem, {
                key: `most-popular-id-${i}`,
                loading: true,
              })
            ),
        mobileNavStore.navigationCategories
          ? /*#__PURE__*/ React.createElement(
              MobileNavItem,
              {
                cssToggleId: "header-toggle-side-nav-categories",
              },
              gettext("All categories")
            )
          : /*#__PURE__*/ React.createElement(MobileNavItem, {
              loading: true,
            })
      )
    );
  }
  const ubHookPlacement = "ufb_header_mobile";
  function trackUFBNoticeImpressionEvent() {
    Tracker.publishEvent(
      new UFBNoticeImpressionEvent({
        locale,
        placement: ubHookPlacement,
        url: "/udemy-business/request-demo-mx/",
      })
    );
  }
  function handleTryUFBClick() {
    Tracker.publishEvent(
      new UFBNoticeClickEvent({
        locale,
        placement: ubHookPlacement,
        url: "/udemy-business/request-demo-mx/",
      })
    );
  }
  function moreFromUdemySection() {
    const udConfig = udData.Config;
    const { mobileAppLink, urls } = headerStore;
    const hasOrganization = udConfig.brand.has_organization;
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      /*#__PURE__*/ React.createElement(
        MobileNavSectionHeading,
        null,
        gettext("More from Udemy")
      ),
      /*#__PURE__*/ React.createElement(
        MobileNavSection,
        null,
        !hasOrganization &&
          /*#__PURE__*/ React.createElement(
            MobileNavItem,
            {
              href: toBusinessUdemy("request-demo", {
                ref: ubHookPlacement,
              }),
              target: "_blank",
              rel: "noopener noreferrer",
              "data-purpose": "try-ufb-link",
              onClick: handleTryUFBClick,
            },
            /*#__PURE__*/ React.createElement(
              TrackImpression,
              {
                trackFunc: trackUFBNoticeImpressionEvent,
              },
              /*#__PURE__*/ React.createElement(
                "div",
                null,
                gettext("Udemy Business")
              )
            )
          ),
        /*#__PURE__*/ React.createElement(
          MobileNavItem,
          {
            href:
              mobileAppLink === null || mobileAppLink === void 0
                ? void 0
                : mobileAppLink.url,
            target: "_blank",
            rel: "noopener noreferrer",
          },
          gettext("Get the app")
        ),
        !hasOrganization &&
          /*#__PURE__*/ React.createElement(
            MobileNavItem,
            {
              href: urls.INVITE,
            },
            gettext("Invite friends")
          ),
        /*#__PURE__*/ React.createElement(
          MobileNavItem,
          {
            href: urls.SUPPORT,
            target: "_blank",
            rel: "noopener noreferrer",
          },
          gettext("Help")
        )
      )
    );
  }
  function subNavs() {
    var _mobileNavStore$navig;
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      /*#__PURE__*/ React.createElement(
        "div",
        null,
        mobileNavStore.isLevelLoaded(2) &&
          ((_mobileNavStore$navig = mobileNavStore.navigationCategories) ===
            null || _mobileNavStore$navig === void 0
            ? void 0
            : _mobileNavStore$navig.map((category) =>
                /*#__PURE__*/ React.createElement(MobileSubcategoryNav, {
                  key: `mobile-subcategory-nav-${category.id}`,
                  parentCategory: category,
                  subcategories: category.children,
                })
              )),
        mobileNavStore.isLevelLoaded(1) &&
          /*#__PURE__*/ React.createElement(MobileCategoryNav, null)
      ),
      mobileNavStore.isLevelLoaded(1) &&
        /*#__PURE__*/ React.createElement(MobilePopularTopicNavs, null),
      mobileNavStore.isLevelLoaded(1) &&
        /*#__PURE__*/ React.createElement(MobileStudentProfileNav, null)
    );
  }
  const { user } = headerStore.userSpecificContext;
  return /*#__PURE__*/ React.createElement(
    MobileNav,
    {
      ref: sideDrawerRef,
      onToggle: onToggle,
      subDrawers:
        (_ufbContext$subNavs =
          ufbContext === null || ufbContext === void 0
            ? void 0
            : ufbContext.subNavs) !== null && _ufbContext$subNavs !== void 0
          ? _ufbContext$subNavs
          : subNavs(),
    },
    isLanguageSelectorOpen
      ? /*#__PURE__*/ React.createElement(LanguageSelectorOverlay, {
          useLangPrefixedUrls: useLangPrefixedUrls,
        })
      : /*#__PURE__*/ React.createElement(
          React.Fragment,
          null,
          loggedOutSection(),
          /*#__PURE__*/ React.createElement(MobileNavWelcomeSection, {
            cssToggleId: "header-toggle-side-nav-student-profile",
            badge: /*#__PURE__*/ React.createElement(ProfileBadge, {
              dot: true,
              className: styles["profile-badge"],
            }),
          }),
          (_ufbContext$manageAnd =
            ufbContext === null || ufbContext === void 0
              ? void 0
              : ufbContext.manageAndTeachSection) !== null &&
            _ufbContext$manageAnd !== void 0
            ? _ufbContext$manageAnd
            : iaSwitchSection(),
          learnSection(),
          (showBadgingNavChangesForPPUB() || showBadgingNavChangesForMX()) &&
            badgesSection(),
          (showPersonalPlanNav() ||
            (showUBProNav() && showBadgingNavChangesForPPUB())) &&
            learningTypesSection(),
          (_ufbContext$browseSec =
            ufbContext === null || ufbContext === void 0
              ? void 0
              : ufbContext.browseSection) !== null &&
            _ufbContext$browseSec !== void 0
            ? _ufbContext$browseSec
            : mostPopularSection(),
          moreFromUdemySection(),
          /*#__PURE__*/ React.createElement(
            "div",
            {
              className: styles["nav-item"],
              "data-testid": "language-selector",
            },
            /*#__PURE__*/ React.createElement(LanguageSelectorButton, {
              publishEvents: {
                uiRegion: LanguageSelectorLocation.MOBILE_NAV,
              },
              onClick: handleLanguageSelectorButtonClick,
            }),
            user && /*#__PURE__*/ React.createElement(LanguageSeoLinks, null)
          )
        )
  );
});
//# sourceMappingURL=mobile-ia-student-nav.react-component.js.map
