import React from "react";
import { useBreakpoint } from "@udemy/hooks";
import { useI18n } from "@udemy/i18n";
import { useUDData } from "@udemy/ud-data";
import { DesktopHeader } from "./desktop/desktop-header.react-component";
import styles from "./header.module.css";
import { MobileHeader } from "./mobile/mobile-header.react-component";
import { createUFBContext as createDesktopUFBContext } from "./ufb-desktop/create-ufb-context";
import { createUFBContext as createMobileUFBContext } from "./ufb-mobile/create-ufb-context";
export const Header = (props) => {
  const udData = useUDData();
  const i18n = useI18n();
  const breakpoint = useBreakpoint({
    mobile: 800,
    desktop: 9999,
  });
  const ufbContext = React.useMemo(() => {
    if (!udData.Config.brand.has_organization) {
      return undefined;
    }
    return breakpoint === "mobile"
      ? createMobileUFBContext(udData, i18n)
      : createDesktopUFBContext(udData, i18n);
  }, [udData, i18n, breakpoint]);
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    breakpoint !== "desktop" &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["mobile-only"],
        },
        /*#__PURE__*/ React.createElement(
          MobileHeader,
          Object.assign(
            {
              ufbContext: ufbContext,
            },
            props
          )
        )
      ),
    breakpoint !== "mobile" &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["desktop-only"],
        },
        /*#__PURE__*/ React.createElement(
          DesktopHeader,
          Object.assign(
            {
              ufbContext: ufbContext,
            },
            props
          )
        )
      )
  );
};
//# sourceMappingURL=header.react-component.js.map
