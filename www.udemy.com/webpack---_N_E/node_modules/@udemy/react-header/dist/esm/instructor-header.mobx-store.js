import { getLinkPaths } from "@udemy/instructor";
import { serverOrClient } from "@udemy/shared-utils";
import { HeaderStore } from "./header.mobx-store";
export class InstructorHeaderStore extends HeaderStore {
  constructor(props) {
    var _props$instructorCont;
    super(props);
    this.isPayoutSettingsEnabled = void 0;
    this.isRevenueReportEnabled = void 0;
    this.isDisplayPracticeInsightsNewPageWithFunnelViewEnabled =
      (_props$instructorCont =
        props.instructorContext
          .isDisplayPracticeInsightsNewPageWithFunnelViewEnabled) !== null &&
      _props$instructorCont !== void 0
        ? _props$instructorCont
        : false;
    this.isFeaturedQuestionsEnabled =
      props.instructorContext.isFeaturedQuestionsEnabled;
    this.isPayoutSettingsEnabled =
      props.instructorContext.isPayoutSettingsEnabled;
    this.isRevenueReportEnabled =
      props.instructorContext.isRevenueReportEnabled;
    this.setUserSpecificContext({
      isInstructor: props.instructorContext.isInstructor,
      user: props.instructorContext.user,
      organizationState: props.instructorContext.organizationState,
      organizationManageMenu: props.instructorContext.organizationManageMenu,
    });
  }
  getInstructorPerformancePaths() {
    const basePath = "/instructor/performance";
    const searchParams = new URLSearchParams(
      serverOrClient.global.location.search
    );
    const searchDict = {};
    for (const [k, v] of searchParams.entries()) {
      searchDict[k] = v;
    }
    const paths = getLinkPaths(searchDict);
    return {
      basePath,
      paths,
    };
  }
}
//# sourceMappingURL=instructor-header.mobx-store.js.map
