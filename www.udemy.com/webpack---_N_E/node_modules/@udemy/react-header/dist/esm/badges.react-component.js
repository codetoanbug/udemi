import { observer } from "mobx-react";
import React from "react";
import { useI18n } from "@udemy/i18n";
import { NotificationBadge } from "@udemy/react-messaging-components";
import { useHeaderStore } from "./hooks/use-header-store";
export const UnreadActivityNotificationsBadge = observer((_ref) => {
  var _headerStore$notifica;
  let { dot, ...props } = _ref;
  const headerStore = useHeaderStore();
  const { ninterpolate } = useI18n();
  const count =
    (_headerStore$notifica =
      headerStore.notificationBadgeContext.unreadActivityNotifications) !==
      null && _headerStore$notifica !== void 0
      ? _headerStore$notifica
      : 0;
  return /*#__PURE__*/ React.createElement(
    NotificationBadge,
    Object.assign({}, props, {
      label: ninterpolate(
        "%(count)s unread notification",
        "%(count)s unread notifications",
        count,
        {
          count,
        }
      ),
      "data-testid": "unread-activity-notifications-badge",
    }),
    dot && count > 0 ? null : count
  );
});
export const UnreadMessagesBadge = observer((props) => {
  var _headerStore$notifica2;
  const headerStore = useHeaderStore();
  const { ninterpolate } = useI18n();
  const count =
    (_headerStore$notifica2 =
      headerStore.notificationBadgeContext.unreadMessages) !== null &&
    _headerStore$notifica2 !== void 0
      ? _headerStore$notifica2
      : 0;
  return /*#__PURE__*/ React.createElement(
    NotificationBadge,
    Object.assign({}, props, {
      label: ninterpolate(
        "%(count)s unread message",
        "%(count)s unread messages",
        count,
        {
          count,
        }
      ),
      "data-testid": "unread-messages-badge",
    }),
    count
  );
});
export const UnseenCreditsBadge = observer((_ref2) => {
  let { ...props } = _ref2;
  const headerStore = useHeaderStore();
  const { ninterpolate } = useI18n();
  const count = headerStore.notificationBadgeContext.unseenCredits;
  return /*#__PURE__*/ React.createElement(
    NotificationBadge,
    Object.assign({}, props, {
      label: ninterpolate(
        "%(count)s unseen credit",
        "%(count)s unseen credits",
        count,
        {
          count,
        }
      ),
      "data-testid": "unseen-credits-badge",
    }),
    count
  );
});
export const CartBadge = observer((_ref3) => {
  let { ...props } = _ref3;
  const headerStore = useHeaderStore();
  const { ninterpolate } = useI18n();
  const count = headerStore.notificationBadgeContext.cartBuyables;
  return /*#__PURE__*/ React.createElement(
    NotificationBadge,
    Object.assign({}, props, {
      "aria-hidden": "true",
      label: ninterpolate(
        "%(count)s item in the cart",
        "%(count)s items in the cart",
        count,
        {
          count,
        }
      ),
      "data-testid": "cart-badge",
    }),
    count
  );
});
export const ProfileBadge = observer((_ref4) => {
  let { dot, ...props } = _ref4;
  const headerStore = useHeaderStore();
  const { gettext } = useI18n();
  const count = headerStore.notificationBadgeContext.unreadAlerts;
  return /*#__PURE__*/ React.createElement(
    NotificationBadge,
    Object.assign({}, props, {
      label: gettext("You have alerts"),
      "data-testid": "profile-badge",
    }),
    dot && count > 0 ? null : count
  );
});
//# sourceMappingURL=badges.react-component.js.map
