import classNames from "classnames";
import { observer } from "mobx-react";
import React from "react";
import {
  discoveryTracker,
  DiscoveryItemImpressionEvent,
} from "@udemy/browse-event-tracking";
import { GenericAddToCart } from "@udemy/cart";
import { useI18n } from "@udemy/i18n";
import { Button } from "@udemy/react-core-components";
import { DynamicPriceText } from "@udemy/react-merchandising-components";
import {
  CourseCardSkeletonGroup,
  Loader,
} from "@udemy/react-reveal-components";
import { formatCurrency, serverOrClient } from "@udemy/shared-utils";
import { shoppingItemTypes, trackPriceImpression } from "@udemy/shopping";
import { useUDData } from "@udemy/ud-data";
import { PURCHASE_PRICE_TYPES } from "../../constants";
import menuStyles from "../panel-menu.module.css";
import { ShoppingItem } from "./shopping-item.react-component";
import styles from "./shopping-items.module.css";
export const ShoppingItems = observer((_ref) => {
  var _shoppingList$purchas, _shoppingList$listPri;
  let {
    shoppingClient,
    shoppingList,
    cta,
    scroll,
    zeroState,
    showAddToCart,
    showTotal = true,
  } = _ref;
  const { gettext } = useI18n();
  const { Config } = useUDData();
  const totalDue = Math.max(
    ((_shoppingList$purchas =
      shoppingList === null || shoppingList === void 0
        ? void 0
        : shoppingList.purchasePriceAmount) !== null &&
    _shoppingList$purchas !== void 0
      ? _shoppingList$purchas
      : 0) - shoppingClient.credit.amount,
    0
  );
  const priceProps = {
    discountPrice: totalDue,
    listPrice:
      (_shoppingList$listPri =
        shoppingList === null || shoppingList === void 0
          ? void 0
          : shoppingList.listPriceAmount) !== null &&
      _shoppingList$listPri !== void 0
        ? _shoppingList$listPri
        : 0,
  };
  const trackPriceView = () => {
    trackPriceImpression({
      ...priceProps,
      currency: Config.price_country.currency,
      trackingEventContext: {
        priceType: PURCHASE_PRICE_TYPES.total,
      },
    });
  };
  const renderSkeleton = () => {
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        className: menuStyles["panel"],
      },
      /*#__PURE__*/ React.createElement(CourseCardSkeletonGroup, {
        size: "small",
        style: {
          width: "25.6rem",
          maxWidth: "25.6rem",
          minWidth: "25.6rem",
        },
        imageStyle: {
          width: "6.4rem",
          height: "6.4rem",
        },
        lineCount: 3,
        cardCountPerRow: 1,
        rowCount: 2,
        "data-testid": "skeleton",
      })
    );
  };
  const renderZeroItems = () => {
    const { cta, text } = zeroState;
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        className: menuStyles["panel"],
      },
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: `ud-text-md ${menuStyles["gap-bottom"]} ${menuStyles["no-items"]}`,
        },
        text
      ),
      /*#__PURE__*/ React.createElement(
        "a",
        {
          className: "ud-heading-sm",
          "data-testid": "header-shopping-cta",
          href: cta.url,
        },
        cta.text
      )
    );
  };
  const renderItemsOfType = (itemsOfType, key) => {
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      {
        key: key,
      },
      itemsOfType.map((item, i) => {
        const trackingContext = {
          trackImpressionFunc: discoveryTracker.trackDiscoveryImpression,
          index: i,
          backendSource:
            DiscoveryItemImpressionEvent.backendSourceOptions.SHOPPING_CARTS,
        };
        if (showAddToCart && item.list_price.amount > 0) {
          return /*#__PURE__*/ React.createElement(
            "div",
            {
              key: i,
              className: `${menuStyles["item"]} ${styles["item-wrapper"]}`,
            },
            /*#__PURE__*/ React.createElement(ShoppingItem, {
              item: item,
              trackingContext: trackingContext,
            }),
            /*#__PURE__*/ React.createElement(GenericAddToCart, {
              allowAddToCartSuccessModal: false,
              buttonClass: Button,
              buttonStyleProps: {
                udStyle: "secondary",
                size: "medium",
              },
              buyables: [item.buyable],
              cartButtonTextAdd: gettext("Add to cart"),
              loader: /*#__PURE__*/ React.createElement(Loader, {
                color: "inherit",
                size: "medium",
              }),
              notificationStyle: "ud-heading-sm",
              shoppingClient: shoppingClient,
            })
          );
        }
        return /*#__PURE__*/ React.createElement(ShoppingItem, {
          key: i,
          item: item,
          className: menuStyles["item"],
          trackingContext: trackingContext,
        });
      })
    );
  };
  const renderFooter = (scrollable) => {
    const showAction = serverOrClient.global.location.pathname !== cta.url;
    if (!showTotal && !showAction) {
      return null;
    }
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        className: classNames(menuStyles["footer"], {
          [styles["sticky-footer"]]: scrollable,
        }),
      },
      showTotal &&
        shoppingList &&
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: `ud-heading-lg ${styles["total"]}`,
            "data-testid": "header-shopping-total",
          },
          /*#__PURE__*/ React.createElement(
            "div",
            null,
            gettext("Total:"),
            "\xA0"
          ),
          /*#__PURE__*/ React.createElement(
            DynamicPriceText,
            Object.assign(
              {
                discountPriceClassName: "ud-heading-lg",
                listPriceClassName: "ud-text-md",
                onView: trackPriceView,
              },
              priceProps
            )
          )
        ),
      showAction &&
        /*#__PURE__*/ React.createElement(
          Button,
          {
            componentClass: "a",
            "data-testid": "header-shopping-cta",
            href: cta.url,
            udStyle: "primary",
            className: menuStyles["cta"],
          },
          cta.text
        )
    );
  };
  const renderCredit = () => {
    return (
      shoppingClient.credit.amount > 0 &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["credit"],
        },
        /*#__PURE__*/ React.createElement(
          "span",
          null,
          gettext("Credit balance")
        ),
        /*#__PURE__*/ React.createElement(
          "span",
          null,
          formatCurrency(shoppingClient.credit.amount)
        )
      )
    );
  };
  if (!shoppingList) {
    return renderSkeleton();
  }
  if (shoppingList.isEmpty) {
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      renderZeroItems(),
      renderCredit()
    );
  }
  const allItems = [];
  let allItemsCount = 0;
  shoppingItemTypes.forEach((itemType) => {
    const itemsOfType = [];
    shoppingList === null || shoppingList === void 0
      ? void 0
      : shoppingList.items.forEach((item) => {
          if (item.buyable.buyable_object_type === itemType.type) {
            itemsOfType.push(...itemType.buildShoppingItems(item));
          }
        });
    allItems.push(itemsOfType);
    allItemsCount += itemsOfType.length;
  });
  const scrollable = allItemsCount > scroll.itemCount;
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: classNames({
          [styles["scrollable"]]: scrollable,
        }),
        style: {
          maxHeight: scroll.maxHeight,
        },
      },
      allItems.map((itemsOfType, i) => renderItemsOfType(itemsOfType, i))
    ),
    renderFooter(scrollable),
    renderCredit()
  );
});
//# sourceMappingURL=shopping-items.react-component.js.map
