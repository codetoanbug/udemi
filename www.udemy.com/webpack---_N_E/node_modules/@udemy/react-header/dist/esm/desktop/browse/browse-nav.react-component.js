import { observer } from "mobx-react";
import React from "react";
import ReactDOM from "react-dom";
import {
  FocusCycle,
  forceTabOrder,
  KeyStrings,
} from "@udemy/design-system-utils";
import { useMatchMedia } from "@udemy/hooks";
import { useI18n } from "@udemy/i18n";
import NextIcon from "@udemy/icons/dist/next.ud-icon";
import { ProBadge } from "@udemy/learning-path";
import { BlockList } from "@udemy/react-core-components";
import { menuAim, MenuAimArea } from "@udemy/react-popup-components";
import { noop, range } from "@udemy/shared-utils";
import { pxToEm } from "@udemy/styles";
import { useUDData } from "@udemy/ud-data";
import { BADGING_NAV, BROWSE_LEARNING_TYPES } from "../../browse-constants";
import { getBrowseURL } from "../../get-browse-url";
import { forceHover } from "../header-dropdown.react-component";
import menuStyles from "../list-menu.module.css";
import styles from "./browse-nav.module.css";
import { DesktopNavSectionHeading } from "./desktop-nav.react-component";
export class BrowseNavItemFinders {
  constructor() {
    this.findSelectedLevelOneItem = (browseNavStore) => {
      const item = browseNavStore.selectedLevelOneItem;
      if (!item) {
        return null;
      }
      return document.querySelector(
        `.js-browse-nav-level-one [data-id="${item.id}"]`
      );
    };
    this.findSelectedLevelTwoItem = (browseNavStore) => {
      const item = browseNavStore.selectedLevelTwoItem;
      if (!item) {
        return null;
      }
      return document.querySelector(
        `.js-browse-nav-level-two [data-id="${item.id}"]`
      );
    };
    this.findFirstLevelTwoItem = () => {
      return document.querySelector(".js-browse-nav-level-two [data-id]");
    };
    this.findLastLevelTwoItem = () => {
      const items = document.querySelectorAll(
        ".js-browse-nav-level-two [data-id]"
      );
      return items ? items[items.length - 1] : null;
    };
    this.findFirstLevelThreeItem = () => {
      return document.querySelector(".js-browse-nav-level-three [data-id]");
    };
    this.findLastLevelThreeItem = () => {
      const items = document.querySelectorAll(
        ".js-browse-nav-level-three [data-id]"
      );
      return items ? items[items.length - 1] : null;
    };
  }
}
export const BrowseNav = observer((_ref) => {
  var _useMatchMedia,
    _me$organization,
    _headerStore$userSpec,
    _headerStore$userSpec2,
    _headerStore$userSpec3;
  let { browseNavStore, headerStore, ufbContext } = _ref;
  const { Config, me } = useUDData();
  const { gettext } = useI18n();
  const canFitLevelThree =
    (_useMatchMedia = useMatchMedia(`(min-width: ${pxToEm(930)}em)`)) !==
      null && _useMatchMedia !== void 0
      ? _useMatchMedia
      : true;
  const ref = React.useRef(null);
  const [disposeForceTabOrder, setDisposeForceTabOrder] = React.useState();
  const [itemFinders] = React.useState(new BrowseNavItemFinders());

  // Flags
  const isUBUser = me.is_authenticated && !!me.organization;
  const isUBProUser =
    isUBUser &&
    (Config.features.organization.learning_path.pro_path ||
      (me.is_authenticated &&
        ((_me$organization = me.organization) === null ||
        _me$organization === void 0
          ? void 0
          : _me$organization.is_pro_license_holder)));
  const isPPUser =
    (_headerStore$userSpec = headerStore.userSpecificContext.user) === null ||
    _headerStore$userSpec === void 0
      ? void 0
      : _headerStore$userSpec.consumer_subscription_active;
  const isTPUser = isUBUser && Config.brand.is_team;
  const showUpdatedPPAndUBNavigation =
    (_headerStore$userSpec2 = headerStore.userSpecificContext.user) === null ||
    _headerStore$userSpec2 === void 0
      ? void 0
      : _headerStore$userSpec2.show_updated_pp_and_ub_navigation;
  const showUpdatedMXNavigation =
    (_headerStore$userSpec3 = headerStore.userSpecificContext.user) === null ||
    _headerStore$userSpec3 === void 0
      ? void 0
      : _headerStore$userSpec3.show_updated_mx_navigation;
  const showLearningTypesMenu =
    isPPUser || (isUBProUser && showUpdatedPPAndUBNavigation);
  const showBadgesMenu =
    showUpdatedPPAndUBNavigation || showUpdatedMXNavigation;

  // Item finders
  const findSelectedLevelOneItem = () =>
    itemFinders.findSelectedLevelOneItem(browseNavStore);
  const findSelectedLevelTwoItem = () =>
    itemFinders.findSelectedLevelTwoItem(browseNavStore);
  const findFirstLevelTwoItem = () => itemFinders.findFirstLevelTwoItem();
  const findLastLevelTwoItem = itemFinders.findLastLevelTwoItem;
  const findFirstLevelThreeItem = itemFinders.findFirstLevelThreeItem;
  const findLastLevelThreeItem = itemFinders.findLastLevelThreeItem;
  React.useEffect(() => {
    // - If you TAB on the selected level N item, you go to level N + 1.
    // - If you ESC on level N + 1, you go back to level N.
    const dispose = forceTabOrder([
      [findSelectedLevelOneItem, findFirstLevelTwoItem],
      [findSelectedLevelTwoItem, findFirstLevelThreeItem],
      [findLastLevelThreeItem, findSelectedLevelTwoItem],
      [findLastLevelTwoItem, findSelectedLevelOneItem],
    ]);
    setDisposeForceTabOrder(dispose);
    const currentRef = ref.current;
    // We use event.stopPropagation when you ESC on sub-navs to prevent Popover from
    // closing entirely; we want only the sub-nav to close.
    // The stopPropagation works only via addEventListener, not via React's onKeyUp.
    currentRef === null || currentRef === void 0
      ? void 0
      : currentRef.addEventListener("keyup", onKeyUp);
    return () => {
      disposeForceTabOrder === null || disposeForceTabOrder === void 0
        ? void 0
        : disposeForceTabOrder();
      currentRef === null || currentRef === void 0
        ? void 0
        : currentRef.removeEventListener("keyup", onKeyUp);
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  function onKeyUp(event) {
    if (event.key === KeyStrings.ESCAPE || event.key === KeyStrings.LEFT) {
      if (browseNavStore.selectedLevelTwoItem) {
        var _findSelectedLevelTwo;
        // Deselect the selected level two item on ESCAPE.
        event.stopPropagation();
        (_findSelectedLevelTwo = findSelectedLevelTwoItem()) === null ||
        _findSelectedLevelTwo === void 0
          ? void 0
          : _findSelectedLevelTwo.focus();
        browseNavStore.selectLevelTwoItem(browseNavStore.selectedLevelTwoItem);
      } else if (browseNavStore.selectedLevelOneItem) {
        var _findSelectedLevelOne;
        // Deselect the selected level one item on ESCAPE.
        event.stopPropagation();
        (_findSelectedLevelOne = findSelectedLevelOneItem()) === null ||
        _findSelectedLevelOne === void 0
          ? void 0
          : _findSelectedLevelOne.focus();
        browseNavStore.selectLevelOneItem(browseNavStore.selectedLevelOneItem);
      }
    }
  }
  function renderLevelOneNavItem(item) {
    return /*#__PURE__*/ React.createElement(BrowseNavItem, {
      navItem: item,
      key: item.id,
      onSelect: browseNavStore.selectLevelOneItem,
      href: item.absolute_url,
      id: `header-browse-nav-${item.type}-${item.id}`,
      isLearningTypeNavItem: true,
      isSelected: item === browseNavStore.selectedLevelOneItem,
    });
  }
  function renderLearningTypesMenu() {
    var _headerStore$userSpec4;
    let headingText;
    if (isUBProUser) {
      headingText = gettext("Explore Pro");
    } else {
      headingText = showUpdatedPPAndUBNavigation
        ? gettext("Explore active learning")
        : gettext("Explore by type");
    }
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      /*#__PURE__*/ React.createElement(
        DesktopNavSectionHeading,
        null,
        headingText,
        isUBProUser &&
          /*#__PURE__*/ React.createElement(ProBadge, {
            "aria-hidden": "true",
          })
      ),
      /*#__PURE__*/ React.createElement(
        BlockList,
        {
          size: "small",
          className: menuStyles["section"],
        },
        (((_headerStore$userSpec4 = headerStore.userSpecificContext.user) ===
          null || _headerStore$userSpec4 === void 0
          ? void 0
          : _headerStore$userSpec4.enableLabsInPersonalPlan) ||
          isUBProUser) &&
          renderLevelOneNavItem(BROWSE_LEARNING_TYPES(gettext).LABS),
        renderLevelOneNavItem(BROWSE_LEARNING_TYPES(gettext).ASSESSMENTS),
        isUBProUser &&
          renderLevelOneNavItem(BROWSE_LEARNING_TYPES(gettext).UDEMY_PRO_PATHS)
      )
    );
  }
  function renderBadgesMenu() {
    // Hide Badges section for UB China
    if (
      Config.brand.organization &&
      Config.brand.organization.is_enterprise_china
    ) {
      return null;
    }
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      /*#__PURE__*/ React.createElement(
        DesktopNavSectionHeading,
        null,
        gettext("Explore badges")
      ),
      /*#__PURE__*/ React.createElement(
        BlockList,
        {
          size: "small",
          className: menuStyles["section"],
        },
        renderLevelOneNavItem(BADGING_NAV(gettext).CERTIFICATIONS)
      )
    );
  }
  function renderCategoriesMenu() {
    var _browseNavStore$navig;
    const showHeading =
      isPPUser ||
      (isUBUser && !isTPUser) ||
      (isTPUser && showUpdatedPPAndUBNavigation) ||
      showUpdatedMXNavigation;
    const showUpdatedCategoriesHeading =
      isPPUser || showUpdatedPPAndUBNavigation || showUpdatedMXNavigation;
    const hasBrowseNavigationCategories =
      ((_browseNavStore$navig = browseNavStore.navigationCategories) === null ||
      _browseNavStore$navig === void 0
        ? void 0
        : _browseNavStore$navig.length) > 0;
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      showHeading &&
        /*#__PURE__*/ React.createElement(
          DesktopNavSectionHeading,
          null,
          showUpdatedCategoriesHeading
            ? gettext("Explore by category")
            : gettext("All categories")
        ),
      /*#__PURE__*/ React.createElement(
        BlockList,
        {
          size: "small",
          className: menuStyles["section"],
          iconAlignment: "right",
        },
        hasBrowseNavigationCategories
          ? browseNavStore.navigationCategories.map((category) =>
              /*#__PURE__*/ React.createElement(BrowseNavItem, {
                key: category.id,
                navItem: category,
                onSelect: browseNavStore.selectLevelOneItem,
                findFirstSubNavItem: findFirstLevelTwoItem,
                isSelected: category === browseNavStore.selectedLevelOneItem,
                subNavId: "header-browse-nav-level-two",
                id: `header-browse-nav-${category.type}-${category.id}`,
              })
            )
          : range(13).map((i) =>
              /*#__PURE__*/ React.createElement(BlockList.Item, {
                key: i,
                loading: true,
                className: menuStyles["item"],
              })
            )
      )
    );
  }
  function renderLevelOneNav() {
    var _ufbContext$getBrowse;
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        className: `js-browse-nav-level-one ${styles["nav"]}`,
        "data-testid": "browse-nav-list",
      },
      showBadgesMenu && renderBadgesMenu(),
      showLearningTypesMenu && renderLearningTypesMenu(),
      ufbContext === null || ufbContext === void 0
        ? void 0
        : (_ufbContext$getBrowse = ufbContext.getBrowseNavLevelOneItems) ===
            null || _ufbContext$getBrowse === void 0
        ? void 0
        : _ufbContext$getBrowse.call(ufbContext, itemFinders),
      renderCategoriesMenu()
    );
  }
  function renderSubcategoryNav() {
    let labelledbyId;
    let content = null;
    const parentItem = browseNavStore.selectedLevelOneItem;

    // We don't want to show the subcategory nav for certain parent items
    const isExcludedParentItemType =
      Boolean(parentItem) &&
      [
        ...Object.values(BADGING_NAV(gettext)).map((item) => item.type),
        ...Object.values(BROWSE_LEARNING_TYPES(gettext)).map(
          (item) => item.type
        ),
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      ].includes(
        parentItem === null || parentItem === void 0 ? void 0 : parentItem.type
      );
    if (parentItem && !isExcludedParentItemType) {
      var _ufbContext$getBrowse2, _parentItem$children;
      labelledbyId = `header-browse-nav-${parentItem.type}-${parentItem.id}`;
      const ufbContent =
        ufbContext === null || ufbContext === void 0
          ? void 0
          : (_ufbContext$getBrowse2 = ufbContext.getBrowseNavLevelTwoItems) ===
              null || _ufbContext$getBrowse2 === void 0
          ? void 0
          : _ufbContext$getBrowse2.call(ufbContext, parentItem);
      content =
        ufbContent ||
        /*#__PURE__*/ React.createElement(
          BlockList,
          {
            size: "small",
            className: menuStyles["section"],
            iconAlignment: "right",
          },
          (_parentItem$children = parentItem.children) === null ||
            _parentItem$children === void 0
            ? void 0
            : _parentItem$children.map((subcategory) =>
                /*#__PURE__*/ React.createElement(BrowseNavItem, {
                  key: subcategory.id,
                  navItem: subcategory,
                  onSelect: browseNavStore.selectLevelTwoItem,
                  isSelected:
                    subcategory === browseNavStore.selectedLevelTwoItem,
                  findFirstSubNavItem: findFirstLevelThreeItem,
                  subNavId: canFitLevelThree
                    ? "header-browse-nav-level-three"
                    : undefined,
                  id: `header-browse-nav-${subcategory.type}-${subcategory.id}`,
                })
              )
        );
    }
    return /*#__PURE__*/ React.createElement(
      FocusCycle,
      null,
      /*#__PURE__*/ React.createElement(
        "div",
        {
          "aria-labelledby": labelledbyId,
          id: "header-browse-nav-level-two",
          className: `js-browse-nav-level-two ${styles["nav"]}`,
          style: {
            display: content ? "block" : "none",
          },
          "data-testid": "browse-nav-list",
        },
        content
      )
    );
  }
  function renderTopicNav() {
    if (!canFitLevelThree) {
      return null;
    }
    let labelledbyId;
    let heading = null;
    let content = null;
    const parentItem = browseNavStore.selectedLevelTwoItem;
    if (parentItem) {
      const topics = browseNavStore.getTopics(parentItem);
      labelledbyId = `header-browse-nav-${parentItem.type}-${parentItem.id}`;
      heading = /*#__PURE__*/ React.createElement(
        DesktopNavSectionHeading,
        null,
        gettext("Popular topics")
      );
      content = /*#__PURE__*/ React.createElement(
        BlockList,
        {
          size: "small",
          className: menuStyles["section"],
          iconAlignment: "right",
        },
        topics
          ? topics.map((topic) =>
              /*#__PURE__*/ React.createElement(BrowseNavItem, {
                onSelect: browseNavStore.selectLevelThreeItem,
                key: topic.id,
                navItem: topic,
              })
            )
          : range(9).map((i) =>
              /*#__PURE__*/ React.createElement(BlockList.Item, {
                key: i,
                loading: true,
                className: menuStyles["item"],
              })
            )
      );
    }
    return /*#__PURE__*/ React.createElement(
      FocusCycle,
      null,
      /*#__PURE__*/ React.createElement(
        "div",
        {
          "aria-labelledby": labelledbyId,
          id: "header-browse-nav-level-three",
          className: `js-browse-nav-level-three ${styles["nav"]}`,
          style: {
            display: content ? "block" : "none",
          },
          "data-testid": "browse-nav-list",
        },
        heading,
        content
      )
    );
  }
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      ref: ref,
      className: `${menuStyles["list-menu-container"]} ${styles["nav-container"]}`,
      "data-testid": "browse-nav",
    },
    renderLevelOneNav(),
    renderSubcategoryNav(),
    renderTopicNav()
  );
});
const InternalBrowseNavItem = /*#__PURE__*/ React.forwardRef((_ref2, ref) => {
  let {
    navItem,
    isSelected,
    subNavId,
    isLearningTypeNavItem,
    onSelect,
    findFirstSubNavItem,
    onMenuAimUpdate = noop,
    ...blockListItemProps
  } = _ref2;
  const { Config } = useUDData();
  const [selectedVia, setSelectedVia] = React.useState();
  const itemRef = React.useRef(null);
  const getMenuNode = React.useCallback(() => {
    if (subNavId) {
      return document.getElementById(subNavId);
    }
    return null;
  }, [subNavId]);
  React.useImperativeHandle(
    ref,
    () => {
      return {
        getTriggerNode: () => itemRef.current,
        onMouseLeave: (mousePos) => forceHover(`.${menuStyles.item}`, mousePos),
        getMenuNode,
      };
    },
    [getMenuNode]
  );
  function focusOnFirstSubNavItem() {
    const firstSubNavItem =
      findFirstSubNavItem === null || findFirstSubNavItem === void 0
        ? void 0
        : findFirstSubNavItem();
    firstSubNavItem && firstSubNavItem.focus();
  }
  function onClick(event) {
    if (selectedVia === "keyboard" && subNavId) {
      // See HeaderButton.onClick in header-dropdown.react-component.js.
      event.preventDefault();
    }
    setSelectedVia("click");
    onSelect === null || onSelect === void 0
      ? void 0
      : onSelect(navItem, {
          toggle: false,
          selectedVia: "click",
        });
  }
  function onKeyDown(event) {
    if (
      event.key === KeyStrings.RETURN ||
      event.key === KeyStrings.SPACE ||
      event.key === KeyStrings.RIGHT
    ) {
      event.preventDefault();
      setSelectedVia("keyboard");
      onSelect === null || onSelect === void 0
        ? void 0
        : onSelect(navItem, {
            toggle: event.key !== KeyStrings.RIGHT,
            selectedVia: "keyboard",
          });
      if (findFirstSubNavItem) {
        setTimeout(focusOnFirstSubNavItem, 0);
      }
    }
  }
  function onMouseOver(event) {
    if (!isSelected) {
      setSelectedVia("mouse");
      onSelect === null || onSelect === void 0
        ? void 0
        : onSelect(navItem, {
            toggle: false,
            selectedVia: "mouse",
          });
      const target = event.target;
      if (target.tagName && target.tagName.toLowerCase() !== "path") {
        // Ignore mouseover events on MenuAimSVG.
        setTimeout(onMenuAimUpdate, 0); // Wait for menu to render.
      }
    }
  }

  function renderAimArea() {
    const container = getMenuNode();
    return (
      container &&
      /*#__PURE__*/ ReactDOM.createPortal(
        /*#__PURE__*/ React.createElement(MenuAimArea, null),
        container
      )
    );
  }
  const enableMouseOver = subNavId || isLearningTypeNavItem;

  // We want onClick for a11y, not onFocus.
  /* eslint-disable jsx-a11y/mouse-events-have-key-events */
  return /*#__PURE__*/ React.createElement(
    BlockList.Item,
    Object.assign(
      {
        ref: itemRef.current ? itemRef : null,
        href: getBrowseURL(navItem.absolute_url, Config.brand.has_organization),
        "data-testid": "browse-nav-item",
      },
      blockListItemProps,
      {
        "data-id": navItem.id,
        className: menuStyles["item"],
        color: subNavId && isSelected ? "link" : "neutral",
        icon: subNavId
          ? /*#__PURE__*/ React.createElement(NextIcon, {
              label: false,
            })
          : null,
        "aria-expanded": !subNavId ? undefined : isSelected,
        onClick: onSelect ? onClick : undefined,
        onKeyDown: subNavId ? onKeyDown : undefined,
        onMouseOver: enableMouseOver ? onMouseOver : undefined,
      }
    ),
    navItem.title,
    isSelected && renderAimArea()
  );
  /* eslint-enable jsx-a11y/mouse-events-have-key-events */
});

export const BrowseNavItem = menuAim({
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  getTriggerNode: (component) => component.getTriggerNode(),
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  getMenuNode: (component) => component.getMenuNode(),
  onMouseLeave: (component, mousePos) => component.onMouseLeave(mousePos),
  // @ts-expect-error TS doesn't like this
})(InternalBrowseNavItem);
//# sourceMappingURL=browse-nav.react-component.js.map
