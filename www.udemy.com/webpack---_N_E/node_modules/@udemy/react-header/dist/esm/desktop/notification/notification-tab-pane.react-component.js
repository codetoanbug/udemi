import { observer } from "mobx-react";
import React from "react";
import { useI18n } from "@udemy/i18n";
import { Button } from "@udemy/react-core-components";
import { CourseCardSkeletonGroup } from "@udemy/react-reveal-components";
import { useActivityNotificationsStore } from "../../hooks/use-activity-notifications-store";
import { useHeaderStore } from "../../hooks/use-header-store";
import menuStyles from "../panel-menu.module.css";
import { NotificationItem } from "./notification-item.react-component";
import styles from "./notification-items.module.css";
export const MAX_NOTIFICATIONS_TO_SHOW = 3;
export const NotificationItemsSkeleton = () =>
  /*#__PURE__*/ React.createElement(
    "div",
    {
      className: `${menuStyles.panel} ${styles.panel}`,
      "data-testid": "notification-items-skeleton",
    },
    /*#__PURE__*/ React.createElement(CourseCardSkeletonGroup, {
      size: "small",
      style: {
        width: "32.8rem",
        maxWidth: "32.8rem",
        minWidth: "32.8rem",
      },
      imageStyle: {
        width: "6.4rem",
        height: "6.4rem",
        borderRadius: "50%",
      },
      lineCount: 3,
      cardCountPerRow: 1,
      rowCount: 2,
    })
  );
export const ZeroNotificationItems = () => {
  const { gettext } = useI18n();
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      className: `ud-text-md ${menuStyles.panel} ${menuStyles["no-items"]} ${styles.panel}`,
    },
    gettext("No notifications.")
  );
};
export const NotificationTabPane = observer((_ref) => {
  let { tabName } = _ref;
  const headerStore = useHeaderStore();
  const activityNotificationsStore = useActivityNotificationsStore();
  const { gettext } = useI18n();
  const tabState = activityNotificationsStore[tabName];
  function onClickMarkAsRead() {
    if (
      (tabState === null || tabState === void 0
        ? void 0
        : tabState.unreadActivitiesCount) > 0
    ) {
      activityNotificationsStore.markAllNotificationsAsRead(tabName);
    }
  }
  function renderFooter() {
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        className: menuStyles.footer,
      },
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["footer-btns"],
        },
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: styles["footer-btn-wrapper"],
          },
          /*#__PURE__*/ React.createElement(
            Button,
            {
              disabled: tabState.unreadActivitiesCount === 0,
              onClick: onClickMarkAsRead,
              udStyle: "ghost",
              className: menuStyles.cta,
              "data-testid": "mark-all-notifications-as-read",
            },
            gettext("Mark all as read")
          )
        ),
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: styles["footer-btn-wrapper"],
          },
          /*#__PURE__*/ React.createElement(
            Button,
            {
              componentClass: "a",
              href: headerStore.urls.VIEW_NOTIFICATIONS,
              udStyle: "secondary",
              className: menuStyles.cta,
              "data-testid": "see-all-notifications",
            },
            gettext("See all")
          )
        )
      )
    );
  }
  if (tabState.loadingState !== "LOADED") {
    return /*#__PURE__*/ React.createElement(NotificationItemsSkeleton, null);
  }
  if (tabState.totalActivitiesCount === 0) {
    return /*#__PURE__*/ React.createElement(ZeroNotificationItems, null);
  }
  const notifications = tabState.notifications.slice(
    0,
    MAX_NOTIFICATIONS_TO_SHOW
  );
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    notifications.map((notification) =>
      /*#__PURE__*/ React.createElement(NotificationItem, {
        key: notification.mainActivity.id,
        notification: notification,
        tabName: tabName,
        className: menuStyles.item,
      })
    ),
    renderFooter()
  );
});
//# sourceMappingURL=notification-tab-pane.react-component.js.map
