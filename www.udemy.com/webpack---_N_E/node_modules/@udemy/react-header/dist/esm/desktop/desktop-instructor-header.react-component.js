import { observer } from "mobx-react";
import React from "react";
import {
  ActivityNotificationsStore,
  setGlobalActivityNotificationsStore,
} from "@udemy/activity-notifications";
import { AboveTheFoldProvider } from "@udemy/design-system-utils";
import { useI18n } from "@udemy/i18n";
import { SmartBar } from "@udemy/smart-bar";
import { useUDData } from "@udemy/ud-data";
import { HeaderContextProvider } from "../contexts/header-context";
import { loadCommonAppContext } from "../external/load-common-app-context";
import { InstructorHeaderStore } from "../instructor-header.mobx-store";
import { MobileInstructorHeader } from "../mobile/mobile-instructor-header.react-component";
import { createUFBContext } from "../ufb-desktop/create-ufb-context";
import baseStyles from "./desktop-header.module.css";
import styles from "./desktop-instructor-header.module.css";
import { LearnerDropdown } from "./instructor/learner-dropdown.react-component";
import { NotificationDropdown } from "./notification/notification-dropdown.react-component";
import { InstructorProfileDropdown } from "./user-profile/instructor-profile-dropdown.react-component";

// Keep in sync with $breakpoint-instructor-mobile-max in instructor/variables.less in monolith
export const BREAKPOINT_INSTRUCTOR_MOBILE_MAX =
  "unit(round((767 * @px-to-rem / @font-size-md), 2), em)";
export const DesktopInstructorHeader = observer((_ref) => {
  let { isLoggedIn, ...storeProps } = _ref;
  const udData = useUDData();
  const i18n = useI18n();
  const locale = i18n.locale;
  const [ufbContext] = React.useState(() => {
    if (udData.Config.brand.has_organization) {
      return createUFBContext(udData, i18n);
    }
  });
  const [headerStore] = React.useState(
    () =>
      new InstructorHeaderStore({
        isLoggedIn,
        ufbContext,
        ...storeProps,
      })
  );
  const [activityNotificationsStore] = React.useState(() => {
    const store = new ActivityNotificationsStore(i18n);
    setGlobalActivityNotificationsStore(store);
    return store;
  });
  React.useEffect(() => {
    const isUFB = !!ufbContext;
    loadCommonAppContext(locale, isUFB, (response) => {
      headerStore.setUserSpecificContext(response.data.header);
      activityNotificationsStore.setUserSpecificContext({
        user: headerStore.userSpecificContext.user,
        userType: "instructor",
      });
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  function renderLoggedInPart() {
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      ufbContext === null || ufbContext === void 0
        ? void 0
        : ufbContext.packageAlert,
      ufbContext === null || ufbContext === void 0
        ? void 0
        : ufbContext.manageDropdown,
      udData.Config.brand.is_teaching_enabled &&
        /*#__PURE__*/ React.createElement(LearnerDropdown, {
          className: baseStyles["gap-button"],
        }),
      udData.Config.features.notifications &&
        /*#__PURE__*/ React.createElement(NotificationDropdown, {
          className: "",
        }),
      /*#__PURE__*/ React.createElement(InstructorProfileDropdown, {
        className: "",
      })
    );
  }
  function renderUserSpecificPart() {
    // Instructor header requires login.
    return isLoggedIn ? renderLoggedInPart() : null;
  }
  const headerProviderContext = {
    headerStore,
    activityNotificationsStore,
    ufbContext,
  };
  return /*#__PURE__*/ React.createElement(
    HeaderContextProvider,
    headerProviderContext,
    /*#__PURE__*/ React.createElement(
      AboveTheFoldProvider,
      {
        headerStore: headerStore,
        activityNotificationsStore: activityNotificationsStore,
        ufbContext: ufbContext,
      },
      /*#__PURE__*/ React.createElement(
        React.Fragment,
        null,
        /*#__PURE__*/ React.createElement(SmartBar, null),
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: `${baseStyles["mobile-header"]} ${styles["mobile-header"]}`,
          },
          /*#__PURE__*/ React.createElement(
            MobileInstructorHeader,
            Object.assign({}, storeProps, {
              isLoggedIn: isLoggedIn,
              ufbContext:
                ufbContext === null || ufbContext === void 0
                  ? void 0
                  : ufbContext.mobileContext,
              isInsideDesktopHeader: true,
            })
          )
        ),
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: `ud-text-sm ${baseStyles["header"]} ${styles["header"]}`,
            "data-purpose": "header",
          },
          /*#__PURE__*/ React.createElement("div", {
            style: {
              flex: 1,
            },
          }),
          renderUserSpecificPart()
        )
      )
    )
  );
});
//# sourceMappingURL=desktop-instructor-header.react-component.js.map
