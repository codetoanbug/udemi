import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _dec, _dec2, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;
import { action, observable, when } from "mobx";
import {
  QUERIES_BY_USE_CASE,
  ProgramEnrollmentStore,
} from "@udemy/subscription-browse";
import { udApi } from "@udemy/ud-api";
import { COURSE_PAGE_SIZE, PROGRAM_PAGE_SIZE } from "./constants";

// eslint-disable-next-line @typescript-eslint/no-empty-function
function noop() {}
export let MyLearningStore =
  ((_dec = observable.ref),
  (_dec2 = observable.ref),
  ((_class = class MyLearningStore {
    constructor(headerStore) {
      _initializerDefineProperty(this, "isLoading", _descriptor, this);
      _initializerDefineProperty(this, "courses", _descriptor2, this);
      _initializerDefineProperty(this, "programs", _descriptor3, this);
      this.headerStore = void 0;
      this.programEnrollmentStore = void 0;
      this.loadPromise = void 0;
      _initializerDefineProperty(
        this,
        "loadMyLearningContent",
        _descriptor4,
        this
      );
      this.headerStore = headerStore;
      this.programEnrollmentStore = new ProgramEnrollmentStore();
    }
    get user() {
      return this.headerStore.userSpecificContext.user;
    }
    loadPrograms() {
      if (this.user.sms_subscriptions_active) {
        return (
          this.programEnrollmentStore
            // Using PROGRAM_ENROLLMENTS because the result is likely cached
            .queryProgramEnrollments(QUERIES_BY_USE_CASE.PROGRAM_ENROLLMENTS)
            .then(() =>
              this.programEnrollmentStore.programCardData.slice(
                0,
                PROGRAM_PAGE_SIZE
              )
            )
            .catch(noop)
        );
      }
      return Promise.resolve();
    }
    loadCourses() {
      const myCoursesUrl = this.user.consumer_subscription_active
        ? "/users/me/subscription-course-enrollments/"
        : "/users/me/subscribed-courses/";
      const params = {
        page_size: COURSE_PAGE_SIZE,
        ordering: "-last_accessed",
        "fields[course]": "image_240x135,title,completion_ratio",
      };
      if (!this.user.consumer_subscription_active) {
        params.is_archived = false;
      }
      return udApi
        .get(myCoursesUrl, {
          params,
        })
        .catch(noop);
    }
  }),
  ((_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "isLoading",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return true;
      },
    }
  )),
  (_descriptor2 = _applyDecoratedDescriptor(
    _class.prototype,
    "courses",
    [_dec],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return [];
      },
    }
  )),
  (_descriptor3 = _applyDecoratedDescriptor(
    _class.prototype,
    "programs",
    [_dec2],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return [];
      },
    }
  )),
  (_descriptor4 = _applyDecoratedDescriptor(
    _class.prototype,
    "loadMyLearningContent",
    [action],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return () => {
          if (this.loadPromise) {
            return this.loadPromise;
          }
          this.loadPromise = when(() => !!this.user)
            .then(() => Promise.all([this.loadPrograms(), this.loadCourses()]))
            .then(
              action((_ref) => {
                let [programsResponse, coursesResponse] = _ref;
                if (programsResponse) {
                  this.programs = programsResponse;
                }
                if (coursesResponse) {
                  this.courses = coursesResponse.data.results || [];
                }
                this.isLoading = false;
              })
            )
            .catch(
              action(() => {
                this.isLoading = false;
              })
            );
          return this.loadPromise;
        };
      },
    }
  ))),
  _class));
//# sourceMappingURL=my-learning.mobx-store.js.map
