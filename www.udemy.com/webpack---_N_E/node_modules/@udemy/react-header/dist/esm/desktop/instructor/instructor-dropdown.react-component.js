import { observer } from "mobx-react";
import React from "react";
import { useI18n } from "@udemy/i18n";
import { Button } from "@udemy/react-core-components";
import { useHeaderStore } from "../../hooks/use-header-store";
import { useUfbContext } from "../../hooks/use-ufb-context";
import {
  HeaderDropdown,
  HeaderButton,
  HeaderMenu,
} from "../header-dropdown.react-component";
import styles from "../panel-menu.module.css";
export const InstructorDropdown = observer((_ref) => {
  let { className } = _ref;
  const headerStore = useHeaderStore();
  const ufbContext = useUfbContext();
  const { gettext } = useI18n();
  function renderForInstructor() {
    var _ufbContext$instructo;
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        className: className,
        "data-purpose": "instructor-dropdown",
      },
      /*#__PURE__*/ React.createElement(
        HeaderButton,
        {
          componentClass: "a",
          href: headerStore.urls.TEACH,
          "data-testid": "instructor-link",
        },
        (_ufbContext$instructo =
          ufbContext === null || ufbContext === void 0
            ? void 0
            : ufbContext.instructorDropdownText) !== null &&
          _ufbContext$instructo !== void 0
          ? _ufbContext$instructo
          : gettext("Instructor")
      )
    );
  }
  function renderForProspectiveInstructor() {
    var _ufbContext$prospecti, _ufbContext$prospecti2, _ufbContext$prospecti3;
    return /*#__PURE__*/ React.createElement(
      HeaderDropdown,
      {
        className: className,
        a11yRole: "description",
        trigger: /*#__PURE__*/ React.createElement(
          HeaderButton,
          {
            componentClass: "a",
            href: headerStore.urls.TEACH,
            "data-purpose": "instructor-dropdown",
            "data-testid": "teach-on-udemy-link",
          },
          (_ufbContext$prospecti =
            ufbContext === null || ufbContext === void 0
              ? void 0
              : ufbContext.prospectiveInstructorDropdownText) !== null &&
            _ufbContext$prospecti !== void 0
            ? _ufbContext$prospecti
            : gettext("Teach on Udemy")
        ),
      },
      /*#__PURE__*/ React.createElement(
        HeaderMenu,
        null,
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: styles.panel,
          },
          /*#__PURE__*/ React.createElement(
            "div",
            {
              className: `ud-heading-lg ${styles["gap-bottom"]}`,
            },
            (_ufbContext$prospecti2 =
              ufbContext === null || ufbContext === void 0
                ? void 0
                : ufbContext.prospectiveInstructorHeadline) !== null &&
              _ufbContext$prospecti2 !== void 0
              ? _ufbContext$prospecti2
              : gettext(
                  "Turn what you know into an opportunity and reach millions around the world."
                )
          ),
          /*#__PURE__*/ React.createElement(
            Button,
            {
              componentClass: "a",
              href: headerStore.urls.TEACH,
              className: styles.cta,
              "data-testid": "learn-more-link",
            },
            (_ufbContext$prospecti3 =
              ufbContext === null || ufbContext === void 0
                ? void 0
                : ufbContext.prospectiveInstructorCTAText) !== null &&
              _ufbContext$prospecti3 !== void 0
              ? _ufbContext$prospecti3
              : gettext("Learn more")
          )
        )
      )
    );
  }
  const { isInstructor } = headerStore.userSpecificContext;
  return isInstructor
    ? renderForInstructor()
    : renderForProspectiveInstructor();
});
//# sourceMappingURL=instructor-dropdown.react-component.js.map
