import { observer } from "mobx-react";
import React from "react";
import {
  CompactCourseProgressCard,
  CourseProgressCardsSkeleton,
} from "@udemy/browse-course";
import { useI18n } from "@udemy/i18n";
import { Button } from "@udemy/react-core-components";
import {
  CompactProgramProgressCard,
  UDEMY_PRO_PLACEHOLDER_URL,
} from "@udemy/subscription-browse";
import { useSiteStats } from "@udemy/ud-data";
import { useHeaderStore } from "../../hooks/use-header-store";
import { useMyLearningStore } from "../../hooks/use-my-learning-store";
import styles from "../panel-menu.module.css";
import { COURSE_COUNT_WITH_SUBSCRIPTION, MY_LEARNING_CTA } from "./constants";
export const MyLearningItems = observer(() => {
  const headerStore = useHeaderStore();
  const myLearningStore = useMyLearningStore();
  const { gettext, interpolate } = useI18n();
  const siteStats = useSiteStats();
  function renderSkeleton() {
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        className: styles.panel,
        "data-testid": "my-learning-skeleton",
      },
      /*#__PURE__*/ React.createElement(CourseProgressCardsSkeleton, {
        size: "compact",
        cardCountPerRow: 1,
        rowCount: 2,
      })
    );
  }
  function renderZeroItems(_ref) {
    let { text, cta } = _ref;
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        className: styles.panel,
      },
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: `ud-heading-lg ${styles["gap-bottom"]}`,
        },
        text
      ),
      /*#__PURE__*/ React.createElement(
        Button,
        {
          componentClass: "a",
          href: cta.url,
          udStyle: "secondary",
          className: styles.cta,
        },
        cta.text
      )
    );
  }
  function renderHeading(_ref2) {
    let { text, link } = _ref2;
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        className: styles["section-heading"],
      },
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: `ud-heading-lg ${styles["section-heading-title"]}`,
        },
        text
      ),
      /*#__PURE__*/ React.createElement(
        "a",
        {
          className: `ud-heading-sm ${styles["section-heading-link"]}`,
          href: link.url,
        },
        link.text
      )
    );
  }
  function renderProgram(program) {
    const props = {
      key: program.id,
      program: program,
      className: styles.item,
    };
    return /*#__PURE__*/ React.createElement(CompactProgramProgressCard, props);
  }
  function renderCourse(course) {
    return /*#__PURE__*/ React.createElement(CompactCourseProgressCard, {
      key: course.id,
      course: course,
      className: styles.item,
    });
  }
  function getContentWithSubscription(courses, programs) {
    const { user } = headerStore.userSpecificContext;
    const subscriptionCTA = {
      url: UDEMY_PRO_PLACEHOLDER_URL,
      text: gettext("View all IT Certification Programs"),
    };
    const programSection = /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      (programs.length > 0 || courses.length > 0) &&
        renderHeading({
          text: gettext("Programs"),
          // TODO: check if /home/my-courses/programs/ is valid for Udemy Pro
          link: {
            text: gettext("My programs"),
            url: headerStore.urls.MY_PROGRAMS,
          },
        }),
      programs.length === 0 &&
        renderZeroItems({
          text: gettext("Youâ€™re not enrolled in any programs yet."),
          cta: subscriptionCTA,
        }),
      programs.length > 0 && programs.map(renderProgram),
      programs.length > 0 &&
        /*#__PURE__*/ React.createElement(
          "a",
          {
            href: subscriptionCTA.url,
            className: `ud-heading-sm ${styles.cta} ${styles.item}`,
            style: {
              display: "block",
              textAlign: "center",
            },
          },
          subscriptionCTA.text
        )
    );
    const courseSection =
      courses.length > 0 &&
      /*#__PURE__*/ React.createElement(
        React.Fragment,
        null,
        renderHeading({
          text: gettext("Courses"),
          link: user.consumer_subscription_active
            ? {
                text: gettext("My learning"),
                url: headerStore.urls.PREMIUM_COURSES,
              }
            : {
                text: gettext("My courses"),
                url: headerStore.urls.MY_COURSES,
              },
        }),
        courses.slice(0, COURSE_COUNT_WITH_SUBSCRIPTION).map(renderCourse)
      );
    return {
      programSection,
      courseSection,
    };
  }
  function getContentWithoutSubscription(courses) {
    let courseSection;
    const { user } = headerStore.userSpecificContext;
    if (courses.length === 0) {
      courseSection = renderZeroItems({
        text: user.consumer_subscription_active
          ? gettext("Start learning today.")
          : interpolate(
              gettext("Start learning from over %(count)s courses today."),
              {
                count: siteStats.getNumericSiteStat("num_courses"),
              },
              true
            ),
        cta: {
          url: headerStore.urls.BROWSE,
          text: gettext("Browse now"),
        },
      });
    } else {
      courseSection = /*#__PURE__*/ React.createElement(
        React.Fragment,
        null,
        user.consumer_subscription_active &&
          renderHeading({
            text: gettext("Courses"),
            link: {
              text: gettext("My learning"),
              url: headerStore.urls.PREMIUM_COURSES,
            },
          }),
        courses.map(renderCourse)
      );
    }
    return {
      courseSection,
    };
  }
  const { user } = headerStore.userSpecificContext;
  const { isLoading, courses, programs } = myLearningStore;
  if (isLoading) {
    return renderSkeleton();
  }
  const content = user.sms_subscriptions_active
    ? getContentWithSubscription(courses, programs)
    : getContentWithoutSubscription(courses);
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    content === null || content === void 0 ? void 0 : content.programSection,
    content.courseSection,
    (courses.length > 0 || programs.length > 0) &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles.item,
        },
        /*#__PURE__*/ React.createElement(
          Button,
          {
            componentClass: "a",
            href: user.consumer_subscription_active
              ? headerStore.urls.PREMIUM_COURSES
              : headerStore.urls.MY_LEARNING,
            udStyle: "primary",
            className: styles.cta,
          },
          MY_LEARNING_CTA(gettext).TEXT
        )
      )
  );
});
//# sourceMappingURL=my-learning-items.react-component.js.map
