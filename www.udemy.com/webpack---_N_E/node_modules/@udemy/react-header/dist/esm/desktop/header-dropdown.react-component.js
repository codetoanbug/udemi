import classNames from "classnames";
import React from "react";
import ReactDOM from "react-dom";
import { FocusCycle } from "@udemy/design-system-utils";
import { Button, IconButton } from "@udemy/react-core-components";
import {
  BasicPopover,
  menuAim,
  MenuAimArea,
} from "@udemy/react-popup-components";
import styles from "./desktop-header.module.css";
export function forceHover(selector, mousePos) {
  // On Chrome, manually trigger hover on the element behind the menu-aim triangle.
  setTimeout(() => {
    const { x, y } = mousePos;
    const hoverEl = Array.from(document.querySelectorAll(selector)).find(
      (el) => {
        const { top, right, bottom, left } = el.getBoundingClientRect();
        return x >= left && x <= right && y >= top && y <= bottom;
      }
    );
    hoverEl &&
      hoverEl.dispatchEvent(
        new Event("mouseover", {
          bubbles: true,
        })
      );
  }, 0);
}
const InternalHeaderDropdown = /*#__PURE__*/ React.forwardRef((_ref, ref) => {
  let { getFocusCycle = FocusCycle.defaultProps.getCycle, ...popoverProps } =
    _ref;
  const popoverRef = React.useRef(null);
  React.useImperativeHandle(
    ref,
    () => {
      return {
        // eslint-disable-next-line react/no-find-dom-node
        getTriggerNode: () => ReactDOM.findDOMNode(popoverRef.current),
        onMouseLeave: (mousePos) => {
          if (popoverRef.current) {
            popoverRef.current.onMouseLeave();
            forceHover(".js-header-button", mousePos);
          }
        },
        getMenuNode: () => {
          if (popoverRef.current) {
            return document.getElementById(popoverRef.current.contentId);
          }
          return null;
        },
      };
    },
    []
  );
  const renderContent = function (_ref2) {
    var _BasicPopover$default, _BasicPopover$default2;
    let { className, ...props } = _ref2;
    for (
      var _len = arguments.length,
        args = new Array(_len > 1 ? _len - 1 : 0),
        _key = 1;
      _key < _len;
      _key++
    ) {
      args[_key - 1] = arguments[_key];
    }
    return (_BasicPopover$default = (_BasicPopover$default2 =
      BasicPopover.defaultProps).renderContent) === null ||
      _BasicPopover$default === void 0
      ? void 0
      : _BasicPopover$default.call(
          _BasicPopover$default2,
          {
            className: classNames(className, styles.dropdown),
            ...props,
          },
          ...args
        );
  };
  return /*#__PURE__*/ React.createElement(
    FocusCycle,
    {
      getCycle: getFocusCycle,
    },
    /*#__PURE__*/ React.createElement(
      BasicPopover,
      Object.assign(
        {
          ref: popoverRef,
          canToggleOnHover: true,
          placement: "bottom-end",
          withArrow: false,
          withPadding: false,
          renderContent: renderContent,
        },
        popoverProps
      )
    )
  );
});
export const HeaderDropdown = menuAim({
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  getTriggerNode: (component) => component.getTriggerNode(),
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  getMenuNode: (component) => component.getMenuNode(),
  onMouseLeave: (component, mousePos) => component.onMouseLeave(mousePos),
  // @ts-expect-error TS doesn't like this
})(InternalHeaderDropdown);
export const HeaderButton = (_ref3) => {
  let { udStyle = "text", children, ...buttonProps } = _ref3;
  const ButtonComponent = udStyle === "icon" ? IconButton : Button;
  return /*#__PURE__*/ React.createElement(
    ButtonComponent,
    Object.assign({}, buttonProps, {
      udStyle: "ghost",
      className: `js-header-button ${styles["dropdown-button"]}`,
    }),
    udStyle !== "text"
      ? children
      : /*#__PURE__*/ React.createElement(
          "span",
          {
            className: `ud-text-sm ${styles["dropdown-button-text"]}`,
          },
          children
        )
  );
};
export const HeaderMenu = (_ref4) => {
  let { children } = _ref4;
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      className: `ud-header-menu ${styles["menu"]}`,
      "data-testid": "header-menu",
    },
    children,
    /*#__PURE__*/ React.createElement(MenuAimArea, null)
  );
};
//# sourceMappingURL=header-dropdown.react-component.js.map
