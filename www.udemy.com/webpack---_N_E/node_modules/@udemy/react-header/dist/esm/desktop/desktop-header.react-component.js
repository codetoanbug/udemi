import Observer from "@researchgate/react-intersection-observer";
import classNames from "classnames";
import { observer } from "mobx-react";
import React from "react";
import {
  ActivityNotificationsStore,
  setGlobalActivityNotificationsStore,
} from "@udemy/activity-notifications";
import { useMatchMedia } from "@udemy/hooks";
import { useI18n } from "@udemy/i18n";
import LanguageIcon from "@udemy/icons/dist/language.ud-icon";
import { LabsLearningBanner } from "@udemy/labs";
import {
  LanguageSeoLinks,
  ModalLanguageSelector,
} from "@udemy/language-selector";
import { IconButton } from "@udemy/react-core-components";
import { SkipToContentButton } from "@udemy/react-navigation-components";
import {
  SearchFormAutocomplete,
  SearchFormAutocompleteStore,
} from "@udemy/search-form-autocomplete";
import { SmartBar, SmartBarSpacer } from "@udemy/smart-bar";
import { tokens } from "@udemy/styles";
import { useUDData } from "@udemy/ud-data";
import { LanguageSelectorLocation } from "../constants";
import { HeaderContextProvider } from "../contexts/header-context";
import { loadCommonAppContext } from "../external/load-common-app-context";
import { HeaderStore } from "../header.mobx-store";
import { Logo } from "../logo.react-component";
import { BrowseNavDropdown } from "./browse/browse-nav-dropdown.react-component";
import { BrowseNavStore } from "./browse/browse-nav.mobx-store";
import styles from "./desktop-header.module.css";
import { HeaderAuthButton } from "./header-auth-button.react-component";
import { InstructorDropdown } from "./instructor/instructor-dropdown.react-component";
import { MyLearningDropdown } from "./my-learning/my-learning-dropdown.react-component";
import { MyLearningStore } from "./my-learning/my-learning.mobx-store";
import { NotificationDropdown } from "./notification/notification-dropdown.react-component";
import { CartDropdown } from "./shopping/cart-dropdown.react-component";
import { WishlistDropdown } from "./shopping/wishlist-dropdown.react-component";
import { TryUFBDropdown } from "./try-ufb/try-ufb-dropdown.react-component";
import { UserProfileDropdown } from "./user-profile/user-profile-dropdown.react-component";
export const DesktopHeader = observer((_ref) => {
  var _useMatchMedia,
    _headerData$ufbContex5,
    _headerStore$userSpec3,
    _headerData$ufbContex6;
  let {
    searchPhrase,
    persistentSearch,
    showAutocompletePopularQueriesOnEmptyState = "disabled",
    shoppingClient,
    useLangPrefixedUrls = false,
    _mockStores,
    ...headerData
  } = _ref;
  const isUFB = !!headerData.ufbContext;
  const i18n = useI18n();
  const locale = i18n.locale;
  const udData = useUDData();
  const [headerStore] = React.useState(() => {
    var _mockStores$headerSto;
    return (_mockStores$headerSto =
      _mockStores === null || _mockStores === void 0
        ? void 0
        : _mockStores.headerStore) !== null && _mockStores$headerSto !== void 0
      ? _mockStores$headerSto
      : new HeaderStore({
          ...headerData,
          shoppingClient,
        });
  });
  const [browseNavStore] = React.useState(
    () =>
      new BrowseNavStore(
        i18n.gettext,
        i18n.locale,
        udData.request.navigation_locale,
        isUFB
      )
  );
  const [searchFormAutocompleteStore] = React.useState(() => {
    const store = new SearchFormAutocompleteStore({
      url: headerStore.urls.SEARCH_SUGGESTIONS,
      getFormParams: () => headerStore.formActionParams,
      isPopularQueriesExperimentEnabled:
        showAutocompletePopularQueriesOnEmptyState === "enabled",
      gettext: i18n.gettext,
    });
    store.setInputValue(
      searchPhrase !== null && searchPhrase !== void 0 ? searchPhrase : ""
    );
    return store;
  });
  const [myLearningStore] = React.useState(
    () => new MyLearningStore(headerStore)
  );
  const [activityNotificationsStore] = React.useState(() => {
    var _mockStores$activityN;
    const store =
      (_mockStores$activityN =
        _mockStores === null || _mockStores === void 0
          ? void 0
          : _mockStores.activityNotificationsStore) !== null &&
      _mockStores$activityN !== void 0
        ? _mockStores$activityN
        : new ActivityNotificationsStore(i18n);
    setGlobalActivityNotificationsStore(store);
    return store;
  });
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const [MobileHeader, setMobileHeader] = React.useState(null);
  const [floatingHeaderIsVisible, setFloatingHeaderIsVisible] =
    React.useState(false);
  const isMobile =
    (_useMatchMedia = useMatchMedia(
      `(max-width: ${tokens["breakpoint-header-mobile-max"]})`
    )) !== null && _useMatchMedia !== void 0
      ? _useMatchMedia
      : false;
  React.useEffect(() => {
    const isUFB = !!headerData.ufbContext;
    loadCommonAppContext(locale, isUFB, (response) => {
      // TODO: rewire how `navigationCategories is resolved from `loadCommonAppContext()` response
      headerStore.setUserSpecificContext(response.data.header);
      activityNotificationsStore.setUserSpecificContext({
        user: headerStore.userSpecificContext.user,
        // If `nav_user_type = 'instructor'`, InstructorHeader is rendered.
        userType: null,
      });
      searchFormAutocompleteStore.setSearchFormExperimentFeatures(
        headerStore.userSpecificContext.searchFormExperimentFeatures
      );
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  React.useEffect(() => {
    if (isMobile) {
      import("../mobile/mobile-header.react-component").then((headerModule) =>
        setMobileHeader(headerModule.MobileHeader)
      );
    }
  }, [isMobile]);
  function getSearchBarLabel() {
    var _headerStore$userSpec, _headerStore$userSpec2;
    if (
      isUFB &&
      (_headerStore$userSpec = headerStore.userSpecificContext) !== null &&
      _headerStore$userSpec !== void 0 &&
      (_headerStore$userSpec2 = _headerStore$userSpec.user) !== null &&
      _headerStore$userSpec2 !== void 0 &&
      _headerStore$userSpec2.enable_in_lecture_search_segments
    ) {
      return i18n.gettext("What would you like to learn today?");
    } else {
      return i18n.gettext("Search for anything");
    }
  }
  function handleHeaderIntersection(entry) {
    const intersectionRatio = entry.intersectionRatio;

    // If the header fully exits view, show the floating header.
    if (!floatingHeaderIsVisible && intersectionRatio === 0) {
      setFloatingHeaderIsVisible(true);
    }
  }
  function handleTopMarkIntersection(entry) {
    const { top } = entry.boundingClientRect;

    // However, only restore the non-floating header if we scroll back up to the top of the page.
    if (floatingHeaderIsVisible && top >= 0) {
      setFloatingHeaderIsVisible(false);
    }
  }
  function renderLoggedInPart() {
    var _headerData$ufbContex, _headerData$ufbContex2;
    const { organizationState } = headerStore.userSpecificContext;
    const myLearningGroup =
      organizationState !== null &&
      organizationState !== void 0 &&
      organizationState.should_show_manage_menu
        ? "group-b"
        : "";
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      !headerStore.isPersonalPlanSubscriber &&
        /*#__PURE__*/ React.createElement(TryUFBDropdown, {
          className: classNames(styles["gap-button"], styles["group-a"]),
        }),
      (_headerData$ufbContex = headerData.ufbContext) === null ||
        _headerData$ufbContex === void 0
        ? void 0
        : _headerData$ufbContex.packageAlert,
      udData.Config.brand.is_teaching_enabled &&
        headerStore.showInstructorDropdown &&
        /*#__PURE__*/ React.createElement(InstructorDropdown, {
          className: classNames(styles["gap-button"], styles["group-b"]),
        }),
      (_headerData$ufbContex2 = headerData.ufbContext) === null ||
        _headerData$ufbContex2 === void 0
        ? void 0
        : _headerData$ufbContex2.manageDropdown,
      /*#__PURE__*/ React.createElement(MyLearningDropdown, {
        className: classNames(styles["gap-button"], styles[myLearningGroup]),
      }),
      !headerStore.isPersonalPlanSubscriber &&
        udData.Config.features.wishlist &&
        /*#__PURE__*/ React.createElement(WishlistDropdown, {
          className: styles["group-c"],
        }),
      udData.Config.features.shopping_cart &&
        headerStore.showCartDropdown &&
        /*#__PURE__*/ React.createElement(CartDropdown, {
          className: "",
        }),
      udData.Config.features.notifications &&
        /*#__PURE__*/ React.createElement(NotificationDropdown, {
          className: styles["group-c"],
        }),
      /*#__PURE__*/ React.createElement(UserProfileDropdown, {
        className: "",
        useLangPrefixedUrls: useLangPrefixedUrls,
      })
    );
  }
  function renderLoggedOutPart() {
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      /*#__PURE__*/ React.createElement(TryUFBDropdown, {
        className: classNames(styles["gap-button"], styles["group-a"]),
      }),
      udData.Config.brand.is_teaching_enabled &&
        /*#__PURE__*/ React.createElement(InstructorDropdown, {
          className: classNames(styles["gap-button"], styles["group-b"]),
        }),
      udData.Config.features.shopping_cart &&
        headerStore.showCartDropdown &&
        /*#__PURE__*/ React.createElement(CartDropdown, {
          className: "",
        }),
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["gap-auth-button"],
        },
        /*#__PURE__*/ React.createElement(
          HeaderAuthButton,
          {
            udStyle: "secondary",
            authParams: {
              showLogin: true,
            },
            "data-purpose": "header-login",
          },
          i18n.gettext("Log in")
        )
      ),
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["gap-auth-button"],
        },
        /*#__PURE__*/ React.createElement(
          HeaderAuthButton,
          {
            "data-purpose": "header-signup",
            authParams: headerStore.signupParams,
          },
          i18n.gettext("Sign up")
        )
      ),
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["gap-auth-button"],
        },
        /*#__PURE__*/ React.createElement(ModalLanguageSelector, {
          uiRegion: LanguageSelectorLocation.DESKTOP_HEADER,
          useLangPrefixedUrls: useLangPrefixedUrls,
          trigger: /*#__PURE__*/ React.createElement(
            IconButton,
            {
              udStyle: "secondary",
              size: "medium",
            },
            /*#__PURE__*/ React.createElement(LanguageIcon, {
              color: "neutral",
              label: i18n.gettext("Choose a language"),
            })
          ),
        }),
        /*#__PURE__*/ React.createElement(LanguageSeoLinks, null)
      )
    );
  }
  function renderUserSpecificPart() {
    const { user } = headerStore.userSpecificContext;
    if (!user) {
      return /*#__PURE__*/ React.createElement("div", {
        style: {
          flex: 1,
        },
      });
    }
    if (!user.id) {
      return renderLoggedOutPart();
    }
    return renderLoggedInPart();
  }
  function renderHeaderBar(floating) {
    var _headerData$ufbContex3, _headerData$ufbContex4;
    return /*#__PURE__*/ React.createElement(
      "div",
      {
        className: classNames(
          "ud-header",
          "ud-text-sm",
          styles.header,
          styles["flex-middle"],
          {
            [styles.floating]: floating,
          }
        ),
        "data-purpose": "header",
      },
      !floating &&
        /*#__PURE__*/ React.createElement(SkipToContentButton, {
          goToContentSelector: ".ud-main-content",
          label: i18n.gettext("Skip to content"),
        }),
      /*#__PURE__*/ React.createElement(
        "a",
        {
          href: headerStore.urls.BROWSE,
          className: classNames(styles["flex-middle"], styles.logo),
        },
        /*#__PURE__*/ React.createElement(Logo, {
          ufbContext: headerData.ufbContext,
          width: 91,
          height: 34,
        })
      ),
      (_headerData$ufbContex3 =
        (_headerData$ufbContex4 = headerData.ufbContext) === null ||
        _headerData$ufbContex4 === void 0
          ? void 0
          : _headerData$ufbContex4.browseButtons) !== null &&
        _headerData$ufbContex3 !== void 0
        ? _headerData$ufbContex3
        : /*#__PURE__*/ React.createElement(BrowseNavDropdown, {
            className: styles["gap-button"],
          }),
      /*#__PURE__*/ React.createElement(SearchFormAutocomplete, {
        searchFormAutocompleteStore: searchFormAutocompleteStore,
        formAction: headerStore.urls.SEARCH,
        formActionParams: headerStore.formActionParams,
        label: getSearchBarLabel(),
        inputProps: {
          className: "js-header-search-field",
          name: "q",
        },
        reversed: true,
        textSize: "small",
        className: styles["search-bar"],
        showResultsWithImage:
          !udData.Config.brand.has_organization &&
          !headerStore.isPersonalPlanSubscriber,
      }),
      renderUserSpecificPart()
    );
  }
  const headerProviderContext = {
    headerStore: headerStore,
    browseNavStore: browseNavStore,
    myLearningStore: myLearningStore,
    activityNotificationsStore: activityNotificationsStore,
    ufbContext: headerData.ufbContext,
  };
  return /*#__PURE__*/ React.createElement(
    HeaderContextProvider,
    headerProviderContext,
    headerStore.userSpecificContext.user &&
      /*#__PURE__*/ React.createElement(SmartBar, {
        isPersonalPlanSubscriber: headerStore.isPersonalPlanSubscriber,
        isUdemyBusinessSubscriber:
          Object.keys(
            (_headerData$ufbContex5 = headerData.ufbContext) !== null &&
              _headerData$ufbContex5 !== void 0
              ? _headerData$ufbContex5
              : {}
          ).length > 0,
      }),
    headerStore.userSpecificContext.user &&
      /*#__PURE__*/ React.createElement(SmartBarSpacer, {
        disableHideButtonWhenVisible: true,
      }),
    ((_headerStore$userSpec3 = headerStore.userSpecificContext.user) === null ||
    _headerStore$userSpec3 === void 0
      ? void 0
      : _headerStore$userSpec3.id) &&
      (!MobileHeader || !isMobile) &&
      /*#__PURE__*/ React.createElement(LabsLearningBanner, null),
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: styles["mobile-header"],
      },
      MobileHeader
        ? /*#__PURE__*/ React.createElement(MobileHeader, {
            ...headerData,
            ufbContext:
              (_headerData$ufbContex6 = headerData.ufbContext) === null ||
              _headerData$ufbContex6 === void 0
                ? void 0
                : _headerData$ufbContex6.mobileContext,
            isInsideDesktopHeader: true,
            useLangPrefixedUrls,
          })
        : /*#__PURE__*/ React.createElement("div", {
            "data-testid": "mobile-header-placeholder",
            className: styles["mobile-header-placeholder"],
          })
    ),
    /*#__PURE__*/ React.createElement(
      Observer,
      {
        onChange: handleTopMarkIntersection,
      },
      /*#__PURE__*/ React.createElement("span", {
        className: styles.mark,
      })
    ),
    /*#__PURE__*/ React.createElement(
      Observer,
      {
        onChange: handleHeaderIntersection,
      },
      renderHeaderBar(false)
    ),
    floatingHeaderIsVisible && persistentSearch && renderHeaderBar(true)
  );
});
//# sourceMappingURL=desktop-header.react-component.js.map
