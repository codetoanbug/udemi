import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _dec,
  _dec2,
  _dec3,
  _dec4,
  _class,
  _descriptor,
  _descriptor2,
  _descriptor3,
  _descriptor4,
  _descriptor5,
  _descriptor6,
  _descriptor7,
  _descriptor8;
import { action, runInAction, observable, toJS } from "mobx";
import { Tracker as tracker } from "@udemy/event-tracking";
import { debounce, udExpiringLocalStorage } from "@udemy/shared-utils";
import {
  BADGING_NAV,
  BROWSE_LEARNING_TYPES,
  BROWSE_TYPE,
} from "../../browse-constants";
import { SUBCATEGORY_NOT_IN_PERSONAL_PLAN } from "../../constants";
import {
  BadgeNavItemSelectEvent,
  CategoryNavItemSelectEvent,
  LearningTypeNavItemSelectEvent,
} from "../../events";
import { loadCommonAppContext } from "../../external/load-common-app-context";
import { fetchPopularTopicsForSubcategory } from "../../fetch-popular-topics";
export let BrowseNavStore =
  ((_dec = observable.ref),
  (_dec2 = observable.ref),
  (_dec3 = observable.ref),
  (_dec4 = observable.ref),
  ((_class = class BrowseNavStore {
    constructor(gettext, locale, navigation_locale) {
      var _this = this;
      let isUFB =
        arguments.length > 3 && arguments[3] !== undefined
          ? arguments[3]
          : false;
      this.gettext = gettext;
      this.locale = locale;
      this.navigation_locale = navigation_locale;
      this.isUFB = isUFB;
      this._localStorage = void 0;
      this._debouncedLoadTopics = void 0;
      _initializerDefineProperty(
        this,
        "navigationCategories",
        _descriptor,
        this
      );
      this._topics = observable.map(
        {},
        {
          deep: false,
        }
      );
      _initializerDefineProperty(
        this,
        "selectedLevelOneItem",
        _descriptor2,
        this
      );
      _initializerDefineProperty(
        this,
        "selectedLevelTwoItem",
        _descriptor3,
        this
      );
      _initializerDefineProperty(
        this,
        "selectedLevelThreeItem",
        _descriptor4,
        this
      );
      this.commonAppContext = void 0;
      this.loadNavigationCategories = async function (locale) {
        let isUFB =
          arguments.length > 1 && arguments[1] !== undefined
            ? arguments[1]
            : false;
        // TODO: move common app context to argument (will require more unit test updates)
        if (!_this.commonAppContext) {
          _this.commonAppContext = await loadCommonAppContext(locale, isUFB);
        }
        const commonAppContext = _this.commonAppContext;
        const headerData = commonAppContext.data.header;
        const { user } = headerData;

        // Map header data to `navigateCategories` structure
        const navigationCategories = headerData.navigationCategories.map(
          (_ref) => {
            let { sd_tag: category, sublist } = _ref;
            // Build children from sublist categories
            const navigationCategoriesChildren = sublist.items.map((_ref2) => {
              let { sd_tag: subcategory } = _ref2;
              // If user has a consumer subscription, exclude some subcategories
              if (
                user.consumer_subscription_active &&
                SUBCATEGORY_NOT_IN_PERSONAL_PLAN.includes(subcategory.id)
              ) {
                return null;
              }
              return {
                id: subcategory.id,
                title: subcategory.title,
                absolute_url: subcategory.url,
                type: BROWSE_TYPE.SUBCATEGORY,
              };
            });
            const navigationCategory = {
              id: category.id,
              title: category.title,
              absolute_url: category.url,
              type: BROWSE_TYPE.CATEGORY,
              children: navigationCategoriesChildren.filter(Boolean),
            };
            return navigationCategory;
          }
        );
        runInAction(() => {
          _this.navigationCategories = navigationCategories;
        });
      };
      _initializerDefineProperty(
        this,
        "selectLevelOneItem",
        _descriptor5,
        this
      );
      _initializerDefineProperty(
        this,
        "selectLevelTwoItem",
        _descriptor6,
        this
      );
      _initializerDefineProperty(
        this,
        "selectLevelThreeItem",
        _descriptor7,
        this
      );
      this.trackSelect = () => {
        this._trackSelect({
          selectedVia: "click",
        });
      };
      _initializerDefineProperty(this, "_loadTopics", _descriptor8, this);
      const expirationDate = new Date(Date.now() + 4 * 3600 * 1000);
      this._localStorage = udExpiringLocalStorage(
        "header-browse-nav",
        "items",
        expirationDate
      );
      this._debouncedLoadTopics = debounce(this._loadTopics, 150);
    }
    _trackSelect(options) {
      if (options.selectedVia === "click") {
        // Event will vary depending on if it's a learning type nav item (labs, assessments)
        if (options.learningItemType) {
          tracker.publishEvent(
            new LearningTypeNavItemSelectEvent(options.learningItemType)
          );
        } else if (options.badgeItemType) {
          tracker.publishEvent(
            new BadgeNavItemSelectEvent(options.badgeItemType)
          );
        } else if (this.selectedLevelOneItem) {
          var _this$selectedLevelTw, _this$selectedLevelTh;
          const context = {
            categoryId: this.selectedLevelOneItem.id,
            subcategoryId:
              (_this$selectedLevelTw = this.selectedLevelTwoItem) === null ||
              _this$selectedLevelTw === void 0
                ? void 0
                : _this$selectedLevelTw.id,
            topicId:
              (_this$selectedLevelTh = this.selectedLevelThreeItem) === null ||
              _this$selectedLevelTh === void 0
                ? void 0
                : _this$selectedLevelTh.id,
          };
          tracker.publishEvent(
            new CategoryNavItemSelectEvent({
              context,
            })
          );
        }
      }
    }
    _selectItem(selectedItemKey, item, givenOptions) {
      const options = {
        toggle: true,
        ...givenOptions,
      };

      // Identify the type of item being selected in order to fire appropriate event
      if (
        Object.values(BROWSE_LEARNING_TYPES(this.gettext))
          .map((item) => item.type)
          .includes(item.type)
      ) {
        options.learningItemType = item.type;
      } else if (
        Object.values(BADGING_NAV)
          .map((item) => item(this.gettext).type)
          .includes(item.type)
      ) {
        options.badgeItemType = item.type;
      }

      /* eslint-disable @typescript-eslint/no-explicit-any */
      if (item === this[selectedItemKey] && options.toggle) {
        this[selectedItemKey] = null;
      } else {
        this[selectedItemKey] = item;
        this._trackSelect(options);
      }
      /* eslint-enable @typescript-eslint/no-explicit-any */
    }

    getTopics(subcategory) {
      return this._topics.get(subcategory.id);
    }
  }),
  ((_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "navigationCategories",
    [_dec],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return [];
      },
    }
  )),
  (_descriptor2 = _applyDecoratedDescriptor(
    _class.prototype,
    "selectedLevelOneItem",
    [_dec2],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return null;
      },
    }
  )),
  (_descriptor3 = _applyDecoratedDescriptor(
    _class.prototype,
    "selectedLevelTwoItem",
    [_dec3],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return null;
      },
    }
  )),
  (_descriptor4 = _applyDecoratedDescriptor(
    _class.prototype,
    "selectedLevelThreeItem",
    [_dec4],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return null;
      },
    }
  )),
  (_descriptor5 = _applyDecoratedDescriptor(
    _class.prototype,
    "selectLevelOneItem",
    [action],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        var _this2 = this;
        return function (item) {
          let options =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {};
          _this2._selectItem("selectedLevelOneItem", item, options);
          _this2.selectedLevelTwoItem = null;
          _this2.selectedLevelThreeItem = null;
        };
      },
    }
  )),
  (_descriptor6 = _applyDecoratedDescriptor(
    _class.prototype,
    "selectLevelTwoItem",
    [action],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        var _this3 = this;
        return function (item) {
          let options =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {};
          _this3._selectItem("selectedLevelTwoItem", item, options);
          _this3.selectedLevelThreeItem = null;
          if (
            _this3.selectedLevelTwoItem === item &&
            item.type === BROWSE_TYPE.SUBCATEGORY
          ) {
            _this3._debouncedLoadTopics(item, _this3.isUFB);
          }
        };
      },
    }
  )),
  (_descriptor7 = _applyDecoratedDescriptor(
    _class.prototype,
    "selectLevelThreeItem",
    [action],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        var _this4 = this;
        return function (item) {
          let options =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : {};
          _this4._selectItem("selectedLevelThreeItem", item, options);
        };
      },
    }
  )),
  (_descriptor8 = _applyDecoratedDescriptor(
    _class.prototype,
    "_loadTopics",
    [action],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        var _this5 = this;
        return async function (subcategory) {
          let isUFB =
            arguments.length > 1 && arguments[1] !== undefined
              ? arguments[1]
              : false;
          if (!_this5.commonAppContext) {
            _this5.commonAppContext = await loadCommonAppContext(
              _this5.locale,
              isUFB
            );
          }
          const commonAppContext = _this5.commonAppContext;
          const { user } = commonAppContext.data.header;
          if (_this5.getTopics(subcategory)) {
            return Promise.resolve();
          }
          const cacheKey = user.consumer_subscription_active
            ? `PP:${subcategory.id}:${_this5.locale}`
            : `${subcategory.id}:${_this5.locale}`;
          const cachedTopics = _this5._localStorage.get(cacheKey);
          if (cachedTopics) {
            _this5._topics.set(subcategory.id, toJS(cachedTopics));
            return Promise.resolve();
          }
          const params = {
            page_size: 9,
            locale: _this5.locale,
          };
          if (_this5.navigation_locale) {
            params.navigation_locale = _this5.navigation_locale;
          }
          try {
            const response = await fetchPopularTopicsForSubcategory(
              subcategory.id,
              _this5.locale,
              9,
              isUFB
            );
            const topics = response.stats
              .map((topic) => {
                return {
                  id: topic.id,
                  absolute_url: topic.url,
                  title: topic.title,
                  type: BROWSE_TYPE.TOPIC,
                };
              })
              .filter((topic) => {
                var _subcategory$title;
                return (
                  topic.title.toLowerCase() !==
                  ((_subcategory$title = subcategory.title) === null ||
                  _subcategory$title === void 0
                    ? void 0
                    : _subcategory$title.toLowerCase())
                );
              });
            _this5._localStorage.set(cacheKey, topics);
            _this5._topics.set(subcategory.id, topics);
          } catch (e) {
            _this5._topics.set(subcategory.id, []);
          }
        };
      },
    }
  ))),
  _class));
//# sourceMappingURL=browse-nav.mobx-store.js.map
