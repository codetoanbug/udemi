import React from "react";
import {
  TrackImpression,
  trackGenericCourseClick,
} from "@udemy/event-tracking";
import { Image } from "@udemy/react-core-components";
import { StaticPriceText } from "@udemy/react-merchandising-components";
import { ItemCard } from "@udemy/react-structure-components";
import { trackPriceImpression } from "@udemy/shopping";
import { useUDData } from "@udemy/ud-data";
import { PURCHASE_PRICE_TYPES } from "../../constants";
import styles from "./shopping-item.module.css";
export const ShoppingItem = (_ref) => {
  var _item$buyable$visible;
  let { className, item, trackingContext } = _ref;
  const { Config } = useUDData();
  const trackImpression = () => {
    if (
      trackingContext &&
      item.buyable &&
      "course" === item.buyable.buyable_object_type
    ) {
      const { trackImpressionFunc, ...trackingContextRest } = trackingContext;
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      trackImpressionFunc(
        {
          item: item.buyable,
        },
        trackingContextRest
      );
    }
  };
  const trackClick = () => {
    if (item.buyable && "course" === item.buyable.buyable_object_type) {
      var _ref2, _ref3, _course$frontendTrack;
      const course = item.buyable;
      trackGenericCourseClick({
        courseId: course.id,
        courseTrackingId:
          (_ref2 =
            (_ref3 =
              (_course$frontendTrack = course.frontendTrackingId) !== null &&
              _course$frontendTrack !== void 0
                ? _course$frontendTrack
                : course.tracking_id) !== null && _ref3 !== void 0
              ? _ref3
              : course.trackingId) !== null && _ref2 !== void 0
            ? _ref2
            : String(course.id),
        componentName: "shoppingItem",
      });
    }
  };
  const priceProps = {
    discountPrice: item.purchase_price.amount,
    discountPriceString: item.purchase_price.price_string,
    listPrice: item.list_price.amount,
    listPriceString: item.list_price.price_string,
  };
  const trackPriceView = () => {
    trackPriceImpression({
      ...priceProps,
      currency: Config.price_country.currency,
      trackingEventContext: {
        buyableId: item.buyable.id,
        priceType: PURCHASE_PRICE_TYPES.individual_shopping_buyable,
        buyableType: item.buyable.type,
        priceServeTrackingId: item.price_serve_tracking_id,
      },
    });
  };
  return /*#__PURE__*/ React.createElement(
    TrackImpression,
    {
      trackFunc: trackImpression,
    },
    /*#__PURE__*/ React.createElement(
      ItemCard,
      {
        className: className,
        onContextMenu: trackClick,
        "data-testid": "shopping-item",
      },
      /*#__PURE__*/ React.createElement(
        ItemCard.ImageWrapper,
        null,
        /*#__PURE__*/ React.createElement(Image, {
          src: item.buyable.image_100x100,
          alt: "",
          width: 100,
          height: 100,
        })
      ),
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["buyable-info"],
        },
        /*#__PURE__*/ React.createElement(
          ItemCard.Title,
          {
            className: `ud-heading-sm ${styles["buyable-title"]}`,
            href: item.buyable.url,
            onClick: trackClick,
          },
          item.buyable.title
        ),
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: `ud-text-xs ${styles["buyable-instructors"]}`,
          },
          ((_item$buyable$visible = item.buyable.visible_instructors) !==
            null && _item$buyable$visible !== void 0
            ? _item$buyable$visible
            : []
          )
            .map((instructor) => instructor.title)
            .join(", ")
        ),
        /*#__PURE__*/ React.createElement(
          StaticPriceText,
          Object.assign(
            {
              discountPriceClassName: "ud-heading-sm",
              listPriceClassName: "ud-text-xs",
              onView: trackPriceView,
            },
            priceProps
          )
        )
      )
    )
  );
};
//# sourceMappingURL=shopping-item.react-component.js.map
