import { Keys } from "@udemy/design-system-utils";
import React from "react";
/**
 * Mimic the Event interface through to the data-checked attribute.
 *
 * See {@link isChecked} to help read the checked state from this event object.
 *
 * @remarks
 * Note: the Event interface allows for target property to be null. This is the
 * case when an event object is created `new Event()`. However, when an event
 * is triggered through the DOM via dispatchEvent(), target shouldn't ever be
 * null. Assuming that the DOM events we are mimicking with this interface either
 * define target explicitly or use dispatchEvent(), assuming a defined target
 * simplifies working with target.dataset.checked.
 */

/**
 * This component represents the toggle state for {@link CheckedStateCheckbox | CheckedStateCheckbox}
 * and {@link CheckedStateRadioGroup | CheckedStateRadioGroup}.
 *
 * @remarks
 * Thie component renders a span element with a `[data-checked]` attribute that
 * can be toggled between `checked` and `''` (not checked).
 *
 * Components that support CSS toggle mechanism can reference the `[data-checked]`
 * attribute in a CSS selector.
 *
 * Toggle logic is implemented by `CheckedStateCheckbox` and `CheckedStateRadioGroup`.
 *
 * `csstoggle` event is dispatched by the {@link Button} component or non-React script.
 *
 */
export class CheckedState extends React.Component {
  constructor() {
    super(...arguments);
    this.ref = /*#__PURE__*/ React.createRef();

    this.onKeyDown = (event) => {
      const code = event.which || event.keyCode;

      if (code === Keys.ESCAPE && this.ref.current) {
        var _this$props$onEscape, _this$props;

        (_this$props$onEscape = (_this$props = this.props).onEscape) === null ||
        _this$props$onEscape === void 0
          ? void 0
          : _this$props$onEscape.call(_this$props, this.ref.current);
      }
    };
  }

  componentDidMount() {
    var _this$ref$current;

    document.addEventListener("keydown", this.onKeyDown); // @ts-expect-error: TS does not know custom event 'csstoggle'

    (_this$ref$current = this.ref.current) === null ||
    _this$ref$current === void 0
      ? void 0
      : _this$ref$current.addEventListener("csstoggle", this.props.onChange);
  }

  componentWillUnmount() {
    var _this$ref$current2;

    document.removeEventListener("keydown", this.onKeyDown); // @ts-expect-error: TS does not know custom event 'csstoggle'

    (_this$ref$current2 = this.ref.current) === null ||
    _this$ref$current2 === void 0
      ? void 0
      : _this$ref$current2.removeEventListener(
          "csstoggle",
          this.props.onChange
        );
  }

  render() {
    const { onChange, onEscape, ...props } = this.props;
    return /*#__PURE__*/ React.createElement(
      "span",
      Object.assign({}, props, {
        ref: this.ref,
        style: {
          display: "none",
        },
      })
    );
  }
}
/**
 * Helper function to evaluate the checked state from `CheckedState#onChange` event.
 *
 * @param event - event dispatched via `CheckedState#onChange`
 * @returns true if dataset field `checked` is 'checked'
 */

export function isChecked(event) {
  return event.target.dataset.checked === "checked";
}
//# sourceMappingURL=checked-state.react-component.js.map
