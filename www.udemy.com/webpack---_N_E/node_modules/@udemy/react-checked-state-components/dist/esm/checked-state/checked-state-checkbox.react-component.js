import React, { useState } from "react";
import { CheckedState } from "./checked-state.react-component";
/** Event handler interface for `CheckedStateCheckbox` */

/** The `CheckedStateCheckbox` component. A toggle that is mostly invisible to the user.  */
export const CheckedStateCheckbox = (_ref) => {
  let {
    closeOnEscape = false,
    checked: isPropsChecked = null,
    defaultChecked = false,
    checkedStateComponent: CheckedStateComponent = CheckedState,
    ...props
  } = _ref;
  // Updating defaultChecked prop will not update checked state
  const [isStateChecked, setIsStateChecked] = useState(defaultChecked);

  const handleChange = (event) => {
    var _props$onChange;

    event.target.dataset.checked = event.target.dataset.checked
      ? ""
      : "checked";
    setIsStateChecked(!!event.target.dataset.checked);
    (_props$onChange = props.onChange) === null || _props$onChange === void 0
      ? void 0
      : _props$onChange.call(props, event);
  };

  const handleEscape = (inputDOMNode) => {
    if (inputDOMNode.dataset.checked) {
      var _props$onChange2;

      inputDOMNode.dataset.checked = "";
      setIsStateChecked(false);
      (_props$onChange2 = props.onChange) === null ||
      _props$onChange2 === void 0
        ? void 0
        : _props$onChange2.call(
            props,
            {
              target: inputDOMNode,
            },
            "KEYBOARD"
          );
    }
  };

  const isChecked = isPropsChecked !== null ? isPropsChecked : isStateChecked;
  return /*#__PURE__*/ React.createElement(
    CheckedStateComponent,
    Object.assign({}, props, {
      "data-type": "checkbox",
      "data-checked": isChecked ? "checked" : "",
      onChange: handleChange,
      onEscape: closeOnEscape ? handleEscape : undefined,
    })
  );
};
//# sourceMappingURL=checked-state-checkbox.react-component.js.map
