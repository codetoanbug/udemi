function isModernBrowser() {
  if (typeof window === "undefined") {
    return true;
  } else {
    return !!window.URLSearchParams;
  }
}
function chainFilters() {
  for (
    var _len = arguments.length, filters = new Array(_len), _key = 0;
    _key < _len;
    _key++
  ) {
    filters[_key] = arguments[_key];
  }
  return function (event) {
    return filters.reduce((currentEvent, currentFilter) => {
      if (!currentEvent) {
        return null;
      }
      return currentFilter(currentEvent);
    }, event);
  };
}
const ignoreLegacyBrowsers = function (event) {
  return isModernBrowser() ? event : null;
};
const normalizeStackTrace = function (event) {
  // This block normalizes stack traces for better grouping.
  //
  // https://docs.sentry.io/data-management/rollups/?platform=javascript
  // > When Sentry detects a stack trace in the event data (either directly or as part of
  // > an exception), the grouping effectively is based entirely on the stack trace.
  //
  // The problem with our prod stack traces is that native methods are tagged with the page url:
  // > /datascience/learn/lecture/3527284 in Array.prototype.forEach
  // Hence, errors on course landing pages or course taking pages tend to not be grouped.
  // Avoid this by removing such urls.
  getExceptionFrames(event).forEach((frame) => {
    if (frame.filename && !frame.filename.endsWith(".js")) {
      // Note: on dev, these are tagged as <anonymous>.
      // I'm picking a more greppable name so that it's more obvious that we're
      // patching this behavior.
      frame.filename = "<not-a-js-file-see-@udemy-sentry>";
    }
  });
  return event;
};
const groupVideoJSErrors = function (event) {
  var _frames, _frames$filename;
  const frames = getExceptionFrames(event);
  // Group all videojs errors together
  if (
    frames.length > 0 &&
    (_frames = frames[frames.length - 1]) !== null &&
    _frames !== void 0 &&
    (_frames$filename = _frames.filename) !== null &&
    _frames$filename !== void 0 &&
    _frames$filename.includes("videojs")
  ) {
    if (event) {
      event.fingerprint = ["videojs"];
    }
  }
  return event;
};
const getExceptionFrames = function (event) {
  var _event$exception;
  const exceptionValues =
    ((event === null || event === void 0 ? void 0 : event.exception) &&
      (event === null || event === void 0
        ? void 0
        : (_event$exception = event.exception) === null ||
          _event$exception === void 0
        ? void 0
        : _event$exception.values)) ||
    [];
  if (exceptionValues.length > 0) {
    const value = exceptionValues[0];
    return (value.stacktrace && value.stacktrace.frames) || [];
  }
  return [];
};
export function beforeSend(event) {
  return chainFilters(
    ignoreLegacyBrowsers,
    groupVideoJSErrors,
    normalizeStackTrace
  )(event);
}
//# sourceMappingURL=before-send.js.map
