import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _dec, _class, _descriptor, _descriptor2, _descriptor3;
import autobind from "autobind-decorator";
import { action, computed, observable } from "mobx";
import { ToasterStore } from "@udemy/react-messaging-components";
import { udSentry } from "@udemy/sentry";
import { udSystemMessage } from "@udemy/shared-utils";
import { udApi } from "@udemy/ud-api";
import {
  LAB_REFRESH_AND_RETRIEVE_LABS_URL,
  terminateLabInstanceApiUrl,
} from "../apis";
import {
  LABS_MODULAR_URL_PATTERN,
  LAB_LAUNCHER_FEEDBACK,
  LAB_MODE,
} from "../constants";
import { MODAL_TYPE } from "./constants";
export let LabsLearningBannerStore =
  ((_dec = observable.ref),
  ((_class = class LabsLearningBannerStore {
    constructor() {
      _initializerDefineProperty(this, "isDismissed", _descriptor, this);
      _initializerDefineProperty(this, "data", _descriptor2, this);
      _initializerDefineProperty(this, "modalType", _descriptor3, this);
    }
    setData(data) {
      this.data = data;
    }
    get firstRunningLab() {
      if (this.data.length === 1) {
        return this.data[0].lab_instance;
      }
    }
    get url() {
      if (this.firstRunningLab) {
        var _this$firstRunningLab, _this$firstRunningLab2;
        if (
          (_this$firstRunningLab = this.firstRunningLab) !== null &&
          _this$firstRunningLab !== void 0 &&
          _this$firstRunningLab.lab.url
        ) {
          return this.firstRunningLab.lab.url;
        }
        return `${LABS_MODULAR_URL_PATTERN}${
          (_this$firstRunningLab2 = this.firstRunningLab) === null ||
          _this$firstRunningLab2 === void 0
            ? void 0
            : _this$firstRunningLab2.id
        }/`;
      }
    }
    get firstTaskUrl() {
      return `${this.url}tasks/1/`;
    }
    get tasksPageUrl() {
      return `${this.url}tasks/`;
    }
    get overviewUrl() {
      return `${this.url}overview/`;
    }
    get projectOverviewUrl() {
      return `${this.url}project-overview/`;
    }
    get lastActiveTaskPageUrl() {
      if (this.getActiveTaskNumber()) {
        return `${this.tasksPageUrl}${this.getActiveTaskNumber()}/`;
      }
      return this.firstTaskUrl;
    }
    get continueLabPageUrl() {
      var _this$firstRunningLab3, _this$firstRunningLab4;
      const currentMode =
        (_this$firstRunningLab3 = this.firstRunningLab) === null ||
        _this$firstRunningLab3 === void 0
          ? void 0
          : (_this$firstRunningLab4 = _this$firstRunningLab3.lab.enrollment) ===
              null || _this$firstRunningLab4 === void 0
          ? void 0
          : _this$firstRunningLab4.last_attempted_mode;
      if (currentMode === LAB_MODE.STRUCTURED) {
        // Student has started structured mode
        return this.lastActiveTaskPageUrl;
      }
      if (currentMode === LAB_MODE.FOLLOW_ALONG) {
        // Student has started follow along mode
        return this.tasksPageUrl;
      }
      return this.projectOverviewUrl;
    }
    getActiveTaskNumber() {
      var _this$data;
      return (_this$data = this.data) === null || _this$data === void 0
        ? void 0
        : _this$data[0].active_task_number;
    }
    async refreshAndRetrieveRunningLabs() {
      try {
        const response = await udApi.post(LAB_REFRESH_AND_RETRIEVE_LABS_URL);
        if (response.data && response.data.results.length > 0) {
          this.setData(response.data.results);
        }
      } catch (e) {
        udSentry.captureException(e);
      }
    }
    async checkDismissed() {
      const promises = (this.data || []).map(async (lab) => {
        if (lab.lab_instance) {
          const response = await udSystemMessage.hasSeen(
            udSystemMessage.ids.hasSeenActiveLabBanner,
            {
              obj_type: "lab_instance",
              obj_id: lab.lab_instance.id,
            }
          );
          if (response.data === false) {
            this.setIsDismissed(false);
          }
        }
      });
      await Promise.allSettled(promises);
      this.setIsDismissed(this.isDismissed);
    }
    async setDismissed() {
      const promises = (this.data || []).map(async (lab) => {
        if (lab.lab_instance) {
          await udSystemMessage.seen(
            udSystemMessage.ids.hasSeenActiveLabBanner,
            {
              obj_type: "lab_instance",
              obj_id: lab.lab_instance.id,
            }
          );
        }
      });
      await Promise.allSettled(promises);
      this.setIsDismissed(true);
    }
    setIsDismissed(value) {
      this.isDismissed = value;
    }
    _showErrorToast(title) {
      const bannerProps = {
        udStyle: "error",
        title,
        showCta: false,
      };
      ToasterStore.addAlertBannerToast(bannerProps, {
        autoDismiss: true,
      });
    }
    showDismissModal() {
      this.modalType = MODAL_TYPE.DISMISS_MODAL;
    }
    hideModal() {
      this.modalType = undefined;
    }
    get shouldRenderMultipleLabsBanner() {
      return this.data.length > 1 && !this.isDismissed;
    }
    get isDismissModalActive() {
      return this.modalType === MODAL_TYPE.DISMISS_MODAL;
    }
    async terminateLab(gettext) {
      if (!this.firstRunningLab) {
        return;
      }
      try {
        var _this$firstRunningLab5, _this$firstRunningLab6;
        await udApi.delete(
          terminateLabInstanceApiUrl(
            (_this$firstRunningLab5 = this.firstRunningLab) === null ||
              _this$firstRunningLab5 === void 0
              ? void 0
              : _this$firstRunningLab5.id,
            (_this$firstRunningLab6 = this.firstRunningLab) === null ||
              _this$firstRunningLab6 === void 0
              ? void 0
              : _this$firstRunningLab6.uuid
          )
        );
      } catch (e) {
        udSentry.captureException(e);
        this._showErrorToast(
          LAB_LAUNCHER_FEEDBACK.TERMINATE_LAB_FEEDBACK(gettext)
        );
      }
    }
  }),
  ((_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "isDismissed",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return true;
      },
    }
  )),
  (_descriptor2 = _applyDecoratedDescriptor(_class.prototype, "data", [_dec], {
    configurable: true,
    enumerable: true,
    writable: true,
    initializer: function () {
      return [];
    },
  })),
  (_descriptor3 = _applyDecoratedDescriptor(
    _class.prototype,
    "modalType",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  _applyDecoratedDescriptor(
    _class.prototype,
    "setData",
    [autobind, action],
    Object.getOwnPropertyDescriptor(_class.prototype, "setData"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "firstRunningLab",
    [computed],
    Object.getOwnPropertyDescriptor(_class.prototype, "firstRunningLab"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "url",
    [computed],
    Object.getOwnPropertyDescriptor(_class.prototype, "url"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "firstTaskUrl",
    [computed],
    Object.getOwnPropertyDescriptor(_class.prototype, "firstTaskUrl"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "tasksPageUrl",
    [computed],
    Object.getOwnPropertyDescriptor(_class.prototype, "tasksPageUrl"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "overviewUrl",
    [computed],
    Object.getOwnPropertyDescriptor(_class.prototype, "overviewUrl"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "projectOverviewUrl",
    [computed],
    Object.getOwnPropertyDescriptor(_class.prototype, "projectOverviewUrl"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "lastActiveTaskPageUrl",
    [computed],
    Object.getOwnPropertyDescriptor(_class.prototype, "lastActiveTaskPageUrl"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "continueLabPageUrl",
    [computed],
    Object.getOwnPropertyDescriptor(_class.prototype, "continueLabPageUrl"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "setIsDismissed",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "setIsDismissed"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "showDismissModal",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "showDismissModal"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "hideModal",
    [autobind, action],
    Object.getOwnPropertyDescriptor(_class.prototype, "hideModal"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "shouldRenderMultipleLabsBanner",
    [computed],
    Object.getOwnPropertyDescriptor(
      _class.prototype,
      "shouldRenderMultipleLabsBanner"
    ),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "isDismissModalActive",
    [computed],
    Object.getOwnPropertyDescriptor(_class.prototype, "isDismissModalActive"),
    _class.prototype
  )),
  _class));
//# sourceMappingURL=labs-learning-banner.mobx-store.js.map
