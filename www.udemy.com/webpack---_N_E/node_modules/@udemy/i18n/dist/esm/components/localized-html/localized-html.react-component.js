import React from "react";
import { serverOrClient } from "@udemy/shared-utils";

// Use a detached doc so that innerHTML doesn't execute side effects
// (e.g. <img onload="alert(':(){ :|:& };:')" src="http://valid-src.jpg">).
let detachedDoc = null;

// http://www.w3schools.com/jsref/prop_node_nodetype.asp
const TEXT_NODE_TYPE = 3;
function parse(html) {
  var _detachedDoc;
  if (!detachedDoc) {
    var _serverOrClient$globa;
    let doc;
    if (
      serverOrClient.isServer &&
      (_serverOrClient$globa = serverOrClient.global) !== null &&
      _serverOrClient$globa !== void 0 &&
      _serverOrClient$globa.JSDOM
    ) {
      doc = new serverOrClient.global.JSDOM().window.document;
    } else {
      doc = document;
    }
    detachedDoc = doc.implementation.createHTMLDocument("title");
  }
  const wrapper =
    (_detachedDoc = detachedDoc) === null || _detachedDoc === void 0
      ? void 0
      : _detachedDoc.createElement("span");
  wrapper.innerHTML = html;
  return wrapper;
}
function reactify(element, interpolate) {
  let key =
    arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
  if (element.nodeType === TEXT_NODE_TYPE) {
    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      {
        key: key,
      },
      element.textContent
    );
  }
  let children = Array.from(element.childNodes).map((child, i) => {
    return reactify(child, interpolate, key + i);
  });
  if (children.length === 0) {
    // React complains about passing children={ [] } for "void elements" such as <img />.
    children = null;
  }
  const interpolatedComponent = interpolate[element.className];
  if (interpolatedComponent) {
    if (typeof interpolatedComponent === "string") {
      return /*#__PURE__*/ React.createElement(
        React.Fragment,
        {
          key: key,
        },
        interpolatedComponent
      );
    }
    return /*#__PURE__*/ React.cloneElement(
      interpolatedComponent,
      {
        key,
      },
      children
    );
  }
  return /*#__PURE__*/ React.createElement(
    element.tagName.toLowerCase(),
    {
      key,
    },
    children
  );
}

/** React props interface for `LocalizedHtml` component */

/**
 * ### LocalizedHtml
 *
 * This utility component handles localization of strings such as:
 *     This is <a href={ this.href }>a link</a> in a sentence.
 * where something like safelySetInnerHTML is insufficient, as the anchor uses a prop on the component.
 *
 * @example
 * ```
 * <LocalizedHtml
 *     html={gettext('This is <a class="reactLink">a link</a> in a sentence.')}
 *     interpolate={ { reactLink: (<a href={ this.href } />) } } />
 * ```
 *
 * Each key in `interpolate` should match the CSS class of an html tag in the
 * html template.
 *
 * Note, if you pass HTML with tags within the html prop, those tags can't have attributes other
 * than class. They'll just be ignored. You should pass that stuff using the interpolate object
 * instead.
 *
 * @see {@link https://udemywiki.atlassian.net/wiki/spaces/PDEUX/pages/127008627/Localization+Getting+Started#LocalizationGettingStarted-StringContainingReactComponent}
 */
export const LocalizedHtml = (_ref) => {
  let { html = "", interpolate, dataPurpose, ...htmlProps } = _ref;
  const wrapperHTMLElement = parse(html);
  const wrapperReactComponent = reactify(wrapperHTMLElement, interpolate);
  return /*#__PURE__*/ React.createElement(
    "span",
    Object.assign({}, htmlProps, {
      "data-purpose": dataPurpose,
    }),
    wrapperReactComponent.props.children
  );
};
//# sourceMappingURL=localized-html.react-component.js.map
