import classNames from "classnames";
import PropTypes from "prop-types";
import React from "react";
import {
  BasicPopper,
  basicPopperPropTypes,
  getMajorPlacement,
} from "../basic-popper/basic-popper.react-component";
import styles from "../popover/popover.module.css";
/** Props required by makePopover HOC */

/**
 * Higher-order component to create popover from popper base
 * components.
 *
 * @typeParam TPopperProps - React props interface for the base popper component
 * @param PopperComponent - base popper component to be extended
 * @param popperComponentPropTypes - propTypes object for the base popper
 * @returns a `Popover` component with a forwarded ref to the base Popper component
 *
 * @remarks
 * `popperComponentPropTypes` is a separate parameter because BasicPopper does
 * not have a static field `propTypes`.
 *
 * @internal
 */
export function makePopover(PopperComponent, popperComponentPropTypes) {
  const Popover = (_ref) => {
    var _PopperComponent$defa;

    let {
      forwardedRef,
      withArrow = true,
      withPadding = true,
      renderContent = (_PopperComponent$defa = PopperComponent.defaultProps) ===
        null || _PopperComponent$defa === void 0
        ? void 0
        : _PopperComponent$defa.renderContent,
      ...props
    } = _ref;

    const localRenderContent = (renderContentProps, placement, offset) => {
      let arrow;
      const majorPlacement = getMajorPlacement(placement);
      let majorOffsetStyle = `popover-${majorPlacement}`;

      if (withArrow && offset !== null) {
        majorOffsetStyle = `${majorOffsetStyle}-arrow`;
        const offsetPx = `${offset}px`;
        let arrowOffset;

        switch (majorPlacement) {
          case "top":
            arrowOffset = {
              top: "100%",
              left: offsetPx,
            };
            break;

          case "bottom":
            arrowOffset = {
              top: 0,
              left: offsetPx,
            };
            break;

          case "left":
            arrowOffset = {
              top: offsetPx,
              left: "100%",
            };
            break;

          case "right":
            arrowOffset = {
              top: offsetPx,
              left: 0,
            };
            break;
        }

        arrow = /*#__PURE__*/ React.createElement("div", {
          className: classNames(
            styles.arrow,
            styles[`arrow-${majorPlacement}`]
          ),
          style: arrowOffset,
        });
      }

      renderContentProps.children = /*#__PURE__*/ React.createElement(
        "div",
        {
          className: classNames(styles.popover, styles[majorOffsetStyle], {
            [styles["popover-padding"]]: withPadding,
          }),
        },
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: styles.inner,
          },
          renderContentProps.children
        ),
        arrow
      );
      return renderContent === null || renderContent === void 0
        ? void 0
        : renderContent(renderContentProps, placement, offset);
    };

    return /*#__PURE__*/ React.createElement(
      PopperComponent,
      Object.assign(
        {
          ref: forwardedRef, // Type checking works on makePopover arguments, but sadly, not
          // here. Improve this by avoiding the cast. Inspiration from
          // https://react-typescript-cheatsheet.netlify.app/docs/hoc/react_hoc_docs/#docs-example-use-hocs-for-cross-cutting-concerns
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
        },
        props,
        {
          renderContent: localRenderContent,
        }
      )
    );
  };

  return Object.assign(
    /*#__PURE__*/ React.forwardRef((props, ref) =>
      /*#__PURE__*/ React.createElement(
        Popover,
        Object.assign({}, props, {
          forwardedRef: ref,
        })
      )
    ),
    {
      // Retain propTypes and defaultProps for consuming components that
      // reference them or spread them into their own classes.
      propTypes: {
        ...popperComponentPropTypes,
        withArrow: PropTypes.bool,
        withPadding: PropTypes.bool,
      },
      defaultProps: {
        // Do not need to explicitly include renderContent since we assume that
        // it is coming from PopperComponent. (See Popover function params.)
        ...PopperComponent.defaultProps,
        withArrow: true,
        withPadding: true,
      },
    }
  );
}

/**
 * BasicPopover component. Use this rather than {@link Popover} if you don't need the
 * extra features offered by that component.
 */
export const BasicPopover = makePopover(BasicPopper, basicPopperPropTypes);
BasicPopover.displayName = "BasicPopover";
//# sourceMappingURL=basic-popover.react-component.js.map
