import classNames from "classnames";
import React from "react";
import { defaultRenderContent } from "../basic-popper/basic-popper.react-component";
import { Popper } from "../popper/popper.react-component";
import styles from "./tooltip.module.css";
/**
 * React props interface for the `Tooltip` component.
 *
 * @privateRemarks
 * Extends a `Partial` set of the {@link PopperProps} interface.
 */

const TooltipBase = (_ref) => {
  let {
    a11yRole = "description",
    forwardedRef,
    udStyle = "black",
    canToggleOnHover,
    placement = "top-start",
    trigger,
    renderContent: propsRenderContent = defaultRenderContent,
    getTabOrder = (selectors) => {
      return [
        [selectors.findTriggerNode, selectors.findFirstFocusableInContent],
        [selectors.findLastFocusableInContent, selectors.findTriggerNode],
      ];
    },
    getScrollContainers = () => [],
    ...props
  } = _ref;

  const renderContent = (props, placement, offset) => {
    const classes = classNames("ud-text-sm", styles.tooltip, {
      [styles.white]: udStyle === "white",
    });
    props.children = /*#__PURE__*/ React.createElement(
      "div",
      {
        className: classes,
      },
      props.children
    );
    return propsRenderContent(props, placement, offset);
  };

  return /*#__PURE__*/ React.createElement(
    Popper,
    Object.assign(
      {
        trigger: trigger,
        ref: forwardedRef,
        a11yRole: a11yRole,
        getScrollContainers: getScrollContainers,
        getTabOrder: getTabOrder,
        canToggleOnHover: true,
        placement: placement,
        renderContent: renderContent,
      },
      props
    )
  );
};
/** The Tooltip component.  */

export const Tooltip = Object.assign(
  /*#__PURE__*/ React.forwardRef((props, ref) =>
    /*#__PURE__*/ React.createElement(
      TooltipBase,
      Object.assign({}, props, {
        forwardedRef: ref,
      })
    )
  ),
  {
    displayName: "Tooltip",
  }
);
//# sourceMappingURL=tooltip.react-component.js.map
