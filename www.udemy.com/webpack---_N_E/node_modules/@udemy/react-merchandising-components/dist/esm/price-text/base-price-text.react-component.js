/* eslint-disable @typescript-eslint/prefer-nullish-coalescing */
import { TrackImpression } from "@udemy/event-tracking";
import { useI18n } from "@udemy/i18n";
import classNames from "classnames";
import React from "react";
import styles from "./base-price-text.module.css";
/** Universal React Prop Interface used for public consumption of a Price Text component */

/**
 * ### BasePriceText
 *
 * @internal
 * This should only be used as the core component for {@link StaticPriceText}
 * and {@link DynamicPriceText}.
 */
export const BasePriceText = (_ref) => {
  let {
    className = "",
    currencyComponent: CurrencyComponent,
    discountPrice,
    discountPriceClassName = "",
    discountPriceString,
    listPrice,
    listPriceClassName = "",
    listPriceString,
    percentDiscount,
    percentDiscountClassName = "",
    showListPriceOnly,
    showPercentDiscount,
    showTotalLabel,
    isSubtotalLabel,
    totalLabelClassName,
    onView,
  } = _ref;
  const { gettext, interpolate } = useI18n();

  const withDefaultFontClass = function (defaultFontClass) {
    for (
      var _len = arguments.length,
        classes = new Array(_len > 1 ? _len - 1 : 0),
        _key = 1;
      _key < _len;
      _key++
    ) {
      classes[_key - 1] = arguments[_key];
    }

    const classList = classNames(...classes).split(" ");
    const hasFontClass = classList.some((cls) => {
      return cls.startsWith("ud-heading-") || cls.startsWith("ud-text-");
    });
    return classNames(classList, hasFontClass ? "" : defaultFontClass);
  };

  const onImpression = () => {
    onView === null || onView === void 0 ? void 0 : onView();
  };

  const defaultDiscountPriceFontClass = "ud-heading-md";
  const defaultListPriceFontClass = "ud-text-sm";
  const defaultPercentDiscountFontClass = "ud-text-sm";
  const containerStyles = withDefaultFontClass("", styles.container, className);
  const discountPriceStyles = withDefaultFontClass(
    defaultDiscountPriceFontClass,
    styles["price-part"],
    discountPriceClassName
  );
  const originalPriceStyles = withDefaultFontClass(
    defaultListPriceFontClass,
    styles["price-part"],
    styles["original-price"],
    listPriceClassName
  );
  const percentageStyles = withDefaultFontClass(
    defaultPercentDiscountFontClass,
    styles["price-part"],
    percentDiscountClassName
  );
  return /*#__PURE__*/ React.createElement(
    TrackImpression,
    {
      trackFunc: onImpression,
    },
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: containerStyles,
        "data-purpose": "price-text-container",
      },
      showTotalLabel &&
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: totalLabelClassName,
            "data-purpose": "course-price-total-label",
          },
          isSubtotalLabel ? gettext("Subtotal:") : gettext("Total:")
        ),
      (showListPriceOnly || discountPrice === 0 || discountPrice) &&
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: discountPriceStyles,
            "data-purpose": "course-price-text",
          },
          /*#__PURE__*/ React.createElement(
            "span",
            {
              className: "ud-sr-only",
            },
            gettext("Current price")
          ),
          /*#__PURE__*/ React.createElement(
            "span",
            null,
            showListPriceOnly &&
              /*#__PURE__*/ React.createElement(CurrencyComponent, {
                value: listPriceString || listPrice,
              }),
            !showListPriceOnly &&
              discountPrice !== 0 &&
              /*#__PURE__*/ React.createElement(CurrencyComponent, {
                value: discountPriceString || discountPrice,
              }),
            !showListPriceOnly && discountPrice === 0 && gettext("Free")
          )
        ),
      !showListPriceOnly &&
        listPrice > discountPrice &&
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: originalPriceStyles,
            "data-purpose": "original-price-container",
          },
          /*#__PURE__*/ React.createElement(
            "div",
            {
              "data-purpose": "course-old-price-text",
            },
            /*#__PURE__*/ React.createElement(
              "span",
              {
                className: "ud-sr-only",
              },
              gettext("Original Price")
            ),
            /*#__PURE__*/ React.createElement(
              "span",
              null,
              /*#__PURE__*/ React.createElement(
                "s",
                null,
                /*#__PURE__*/ React.createElement(CurrencyComponent, {
                  value: listPriceString || listPrice,
                })
              )
            )
          )
        ),
      !showListPriceOnly &&
        showPercentDiscount &&
        percentDiscount &&
        (percentDiscount !== null && percentDiscount !== void 0
          ? percentDiscount
          : 0) &&
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: percentageStyles,
            "data-purpose": "discount-percentage",
          },
          /*#__PURE__*/ React.createElement(
            "span",
            {
              className: "ud-sr-only",
            },
            gettext("Discount")
          ),
          /*#__PURE__*/ React.createElement(
            "span",
            null,
            interpolate(
              gettext("%(percentDiscount)s% off"),
              {
                percentDiscount,
              },
              true
            )
          )
        )
    )
  );
};
//# sourceMappingURL=base-price-text.react-component.js.map
