import { Tracker, ClientEvent } from "@udemy/event-tracking";

// import {TrackingContext} from '@udemy/event-tracking/src/tracker/tracker';

/**
 * Define the Performance Summary event
 */
export class PerformanceSummaryEvent extends ClientEvent {
  constructor(_ref) {
    let { performanceSummary } = _ref;
    super("PerformanceSummaryEvent");
    // clientHeader?: ClientHeader;
    this.lcp = void 0;
    // TODO: figure out how to implement TS interface for all class properties.
    this.page = void 0;
    this.source = void 0;
    Object.assign(this, performanceSummary);
    const firstPageKey = Tracker.firstPageKey || "";
    this.page = {
      entryKey: firstPageKey,
    };
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  processContext(context) {
    super.processContext(context);

    // Save `source` of event
    this.source = context.sourceServiceName;

    // Prefer `firstPageKey` first to support SPA applications
    const firstPageKey = Tracker.firstPageKey;
    if (this.clientHeader && firstPageKey) {
      this.clientHeader.page.key = firstPageKey;
    }
  }
}

/**
 * When page unloads, sends web analytics to backend service.
 *
 * @param {object} collector - metrics collector that contains performance data to send to beacon server
 * @returns None
 */
export const registerWithTracker = (collector) => {
  Tracker.addCloseListener(() => {
    const performanceSummary = collector.getSummary();
    Tracker.publishEvent(
      new PerformanceSummaryEvent({
        performanceSummary,
      })
    );
  }, true);
};
//# sourceMappingURL=beacon.js.map
