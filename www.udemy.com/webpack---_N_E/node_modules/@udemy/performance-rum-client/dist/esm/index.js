import { mark, start, end } from "./api";
import { registerWithTracker } from "./beacon";
import { MetricsCollector } from "./metrics-collector";

// Prevent duplicate loading
export let isInitialized = false;
export { shimUDPerformance } from "./shims";
export { udPerf } from "./api";

/**
 * Processes and activates public API `window.udPerformance`.  Guarantees access to API regardless of load order.
 *
 * Before: `window.udPerformance = [f(), f(), f()];
 * After: `window.udPerformance = {push: (cb) => cb(PUBLIC_API)}
 *
 * Example usage:
 *
 * window.udPerformance.push((api) => {
 *   api.start('myEvent');
 *   setTimeout(() => {
 *      api.end('myEvent');
 *   }, 1000);
 * });
 *
 * @returns None
 */

function processAPI() {
  const publicAPI = {
    mark,
    start,
    end,
  };
  // Process API
  const udPerformanceInvocations = window.udPerformance;

  // Replace `window.udPerformance` with `publicAPI`
  window.udPerformance = {
    push: (cb) => {
      return cb(publicAPI);
    },
  };
  // Process any consent changed events already added
  if (udPerformanceInvocations && udPerformanceInvocations.length > 0) {
    for (let i = 0; i < udPerformanceInvocations.length; i++) {
      var _window$udPerformance, _window$udPerformance2;
      ((_window$udPerformance = window.udPerformance) === null ||
        _window$udPerformance === void 0
        ? void 0
        : (_window$udPerformance2 = _window$udPerformance).push.bind(
            _window$udPerformance2
          ))(udPerformanceInvocations[i]);
    }
  }
}

/**
 * Invokes callback when ready to defer performance tasks
 *
 * @param {function} callback
 * @returns None
 */
function whenReady(callback) {
  if (document.readyState === "complete") {
    // Queue a task so the callback runs after `loadEventEnd`.
    setTimeout(callback, 0);
  } else {
    // Use `pageshow` so the callback runs after `loadEventEnd`.
    window.addEventListener("pageshow", callback);
  }
}
/**
 * Initializes performance client collection
 *
 * @returns {boolean} - indicates whether or not performance collection was initialized
 */
export function initPerformanceCollection(_ref) {
  let {
    isFirstTimeVisitor = null,
    isPageCached = null,
    osName = null,
    deviceType = null,
  } = _ref;
  if (typeof window !== undefined && !isInitialized) {
    whenReady(() => {
      // Initialize metrics collector
      const collector = new MetricsCollector({
        isFirstTimeVisitor,
        isPageCached,
        osName,
        deviceType,
      });

      // Process / activate global API
      processAPI();

      // Register metrics collector with event tracking service
      registerWithTracker(collector);
    });
    isInitialized = true;
    return true;
  }
  return false;
}
//# sourceMappingURL=index.js.map
