/**
 * Helper function to determine time relative to zero-point
 * @returns {boolean|*}
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const now = () => {
  return (
    window.performance && window.performance.now && window.performance.now()
  );
};

/**
 * True if the browser supports the Navigation Timing API,
 * User Timing API and the PerformanceObserver Interface.
 * In Safari, the User Timing API (performance.mark()) is not available,
 * so the DevTools timeline will not be annotated with marks.
 * Support: developer.mozilla.org/en-US/docs/Web/API/Performance/mark
 * Support: developer.mozilla.org/en-US/docs/Web/API/PerformanceObserver
 * Support: developer.mozilla.org/en-US/docs/Web/API/Performance/getEntriesByType
 *
 * @returns {boolean} - returns `true` is performance is supported
 */
export const isPerformanceSupported = () => {
  const WP = window.performance;
  // If performance.now() does not exist or it's polyfilled with Date.now(), do not enable performance
  if (!now() || now() > 86400000) {
    return false;
  }
  return !!(WP && typeof WP.getEntriesByType === "function" && WP.mark);
};

/**
 * Utility function that determines if a resource is loaded from cache.
 * Implementation is taken from https://nicj.net/resourcetiming-in-practice/#cached-resources
 *
 * @returns {boolean} - return true if resource is cached on client
 */

export const isResourceCacheHit = (resourceTimingObj) => {
  if (resourceTimingObj.transferSize > 0) {
    return false;
  }
  if (resourceTimingObj.decodedBodySize > 0) {
    return true;
  }
  return resourceTimingObj.duration < 30;
};

/**
 * Utility function that determines if the browser got a HTTP 304 response for the given resource.
 * Implementation is taken from https://nicj.net/resourcetiming-in-practice/#cached-resources
 *
 * @returns {boolean} - returns true if resource is cached on server
 */
export const is304 = (resourceTimingObj) => {
  if (
    resourceTimingObj.encodedBodySize > 0 &&
    resourceTimingObj.transferSize > 0 &&
    resourceTimingObj.transferSize < resourceTimingObj.encodedBodySize
  ) {
    return true;
  }
  // unknown
  return null;
};

/**
 * Converts Octet representation to KB
 *
 * @param bytes
 * @returns {float} - Float representation of KB
 */
export const convertOctetsToKB = function (bytes) {
  return parseFloat((bytes / 1024).toFixed(2)) || 0;
};
//# sourceMappingURL=utils.js.map
