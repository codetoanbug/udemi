import classNames from "classnames";
import React from "react";
import { useI18n } from "@udemy/i18n";
/* eslint-disable react-hooks/exhaustive-deps */
import { Button } from "@udemy/react-core-components";
import { serverOrClient } from "@udemy/shared-utils";
import { useUDData } from "@udemy/ud-data";
import { SEARCH_URL, UFB_SEARCH_URL } from "../constants";
import styles from "./unit-title.module.css";
function hasLinkableSourceObjects(sourceObjects) {
  const linkableObjectTypes = ["course", "course_label", "subcategory"];
  return (
    (sourceObjects === null || sourceObjects === void 0
      ? void 0
      : sourceObjects.length) &&
    sourceObjects.every((obj) => linkableObjectTypes.includes(obj.type))
  );
}
/**
 * String formatter that supports JSX.
 * Returns an array of React fragments, suitable for using in a component's render method.
 *
 * Basic example:
 *   jsxFormat('Hello {}. I like {}.', ['World', <strong>turtles!</strong>]);
 *
 *   ['Hello ', 'world', '. I like ', <strong>turtles!</strong>]
 *
 * An error will be thrown if a replacement cannot be found:
 *   jsxFormat('Replace this: {}', [])
 */
function jsxFormat(string, replacements) {
  let curIndex = 0;
  return string.split(/({})/).map((fragment, i) => {
    if (fragment === "{}") {
      if (curIndex >= replacements.length) {
        throw new Error(
          `Missing replacement for fragment at index ${curIndex}`
        );
      }
      return /*#__PURE__*/ React.createElement(
        React.Fragment,
        {
          key: i,
        },
        replacements[curIndex++]
      );
    }
    return fragment;
  });
}

/**
 * The UnitTitle component.
 * This component will take a DiscoveryUnit, and render a formatted title with potential subtitle for it.
 */
export const UnitTitle = (_ref) => {
  var _unit$recommendation_2;
  let { unit, small = false, typography, className, subtitleTemplate } = _ref;
  const { interpolate } = useI18n();
  const { Config } = useUDData();
  const buildUrlList = (unit) => {
    const sourceObjects = unit.source_objects;
    if (
      sourceObjects !== null &&
      sourceObjects !== void 0 &&
      sourceObjects.length
    ) {
      var _unit$recommendation_;
      if (
        ((_unit$recommendation_ = unit.recommendation_params) === null ||
        _unit$recommendation_ === void 0
          ? void 0
          : _unit$recommendation_.fft) === "searchrecommendation"
      ) {
        const searchQueryParams = `src=reco&q=${encodeURIComponent(
          sourceObjects[0].title
        )}`;
        const baseSearchUrl = Config.brand.has_organization
          ? UFB_SEARCH_URL
          : SEARCH_URL;
        return [`${baseSearchUrl}?${searchQueryParams}`];
      }
      return sourceObjects.map((item) => item.url);
    }
    return [];
  };
  const { title, subtitle } = React.useMemo(() => {
    const sourceObjects = unit.source_objects;
    let sourceObjectLinks;
    const sourceObjectUrlList = hasLinkableSourceObjects(sourceObjects)
      ? buildUrlList(unit)
      : [];
    if (
      sourceObjectUrlList.length &&
      sourceObjects !== null &&
      sourceObjects !== void 0 &&
      sourceObjects.length
    ) {
      sourceObjectLinks = sourceObjectUrlList.map((url, i) => {
        var _serverOrClient$globa;
        return url !==
          ((_serverOrClient$globa = serverOrClient.global.location) === null ||
          _serverOrClient$globa === void 0
            ? void 0
            : _serverOrClient$globa.pathname)
          ? /*#__PURE__*/ React.createElement(
              "a",
              {
                href: url !== null && url !== void 0 ? url : undefined,
                className: "ud-link-underline",
                "data-purpose": "discovery-unit-url",
              },
              sourceObjects[i].title
            )
          : sourceObjects[i].title;
      });
    }
    return {
      title:
        sourceObjectLinks && unit.raw_title
          ? jsxFormat(unit.raw_title, sourceObjectLinks)
          : unit.title,
      subtitle:
        subtitleTemplate &&
        sourceObjects !== null &&
        sourceObjects !== void 0 &&
        sourceObjects.length
          ? interpolate(
              subtitleTemplate,
              {
                title: sourceObjects[0].title,
              },
              true
            )
          : null,
    };
  }, [unit, unit.title, unit.raw_title, subtitleTemplate]);
  const dataPurpose = {
    ...(((_unit$recommendation_2 = unit.recommendation_params) === null ||
    _unit$recommendation_2 === void 0
      ? void 0
      : _unit$recommendation_2.u) && {
      "data-purpose": `discovery-unit-${unit.recommendation_params.u}`,
    }),
  };
  const headerStyle = classNames(
    typography !== null && typography !== void 0 ? typography : "ud-heading-xl",
    {
      "small-title": small,
    }
  );
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      className: classNames(className, styles.container, {
        [styles["has-title"]]: title && title.length > 0,
      }),
    },
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: styles["title-container"],
      },
      /*#__PURE__*/ React.createElement(
        "h2",
        Object.assign(
          {
            className: classNames(headerStyle, styles.title),
            "data-us": unit.score,
          },
          dataPurpose
        ),
        title
      ),
      unit.actionLink &&
        /*#__PURE__*/ React.createElement(
          Button,
          Object.assign(
            {
              componentClass: "a",
              udStyle: "link-underline",
              size: "medium",
            },
            unit.actionLink.buttonProps
          ),
          unit.actionLink.text
        )
    ),
    subtitle &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: classNames("ud-text-sm", styles.subtitle),
          "data-purpose": "subtitle",
        },
        subtitle
      )
  );
};
//# sourceMappingURL=unit-title.react-component.js.map
