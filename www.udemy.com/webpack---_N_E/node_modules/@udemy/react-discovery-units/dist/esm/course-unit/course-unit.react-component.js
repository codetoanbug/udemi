var _dec, _dec2, _class, _class2;
import classNames from "classnames";
import { inject, observer } from "mobx-react";
import React from "react";
import {
  AsyncPriceCourseCard,
  BrowseCourseCard,
  BrowseCourseCardContext,
} from "@udemy/browse-course";
import { discoveryTracker } from "@udemy/browse-event-tracking";
import { TrackingContextProvider } from "@udemy/event-tracking";
import { withMatchMedia } from "@udemy/hooks";
import { withI18n } from "@udemy/i18n";
import { withCourseCardUBGuard } from "@udemy/react-card-components";
import { CourseCardSkeleton } from "@udemy/react-reveal-components";
import { Carousel } from "@udemy/react-structure-components";
import { BorderedCourseCard } from "@udemy/shared-one-udemy-components";
import { noop } from "@udemy/shared-utils";
import { withUDData } from "@udemy/ud-data";
import { CourseDetailsQuickViewBoxLazy } from "../browse-course/course-details/course-details-quick-view-box-lazy.react-component";
import { UnitTitle } from "../unit-title/unit-title.react-component";
import stylesExperimental from "./course-unit-experimental.module.css";
import { CourseUnitSkeleton } from "./course-unit-skeleton.react-component";
import { CourseUnitStore } from "./course-unit.mobx-store";
import styles from "./course-unit.module.css";

/**
 * Experimental Course Card
 *
 * @internal
 *
 * @privateRemarks
 *
 * Exported for reference in specs. Otherwise not for consumption outside of this module.
 */
export const ExperimentalBorderedCourseCard =
  withCourseCardUBGuard(BorderedCourseCard);
export let CourseUnitInternal =
  ((_dec = withMatchMedia({
    hasHover: "(hover: hover)",
  })),
  (_dec2 = inject("discoveryUnitsStore", "funnelLogContextStore")),
  _dec(
    (_class =
      _dec2(
        (_class =
          observer(
            (_class =
              ((_class2 = class CourseUnitInternal extends React.Component {
                constructor(_props) {
                  var _this$store$unit$titl;
                  super(_props);
                  this.id = void 0;
                  this.store = void 0;
                  this.fetchUnit = async () => {
                    return await this.store.fetchUnit({
                      skipPrice: true,
                    });
                  };
                  this.renderCourseImage = (CourseImageComponent, props) => {
                    return /*#__PURE__*/ React.createElement(
                      CourseImageComponent,
                      Object.assign({}, props, {
                        onLoad: this.props.onLoad,
                      })
                    );
                  };
                  const {
                    discoveryUnitsStore,
                    funnelLogContextStore,
                    unit,
                    udData,
                  } = _props;
                  const { pageType } = discoveryUnitsStore;
                  this.store = new CourseUnitStore(pageType, unit, udData);
                  // only use alphanumeric characters for html id
                  this.id = `course-unit-container-${
                    (_this$store$unit$titl = this.store.unit.title) === null ||
                    _this$store$unit$titl === void 0
                      ? void 0
                      : _this$store$unit$titl.replace(/[^a-z0-9]/gi, "")
                  }`;
                  funnelLogContextStore.updateContext({
                    context2: "featured",
                    subcontext: unit.title,
                    subcontext2:
                      unit === null || unit === void 0 ? void 0 : unit.id,
                  });
                }
                componentDidMount() {
                  if (!this.store.unit.items.length) {
                    this.fetchUnit();
                  }
                }

                /**
                 * TODO: Once we figure out what we want to do for subtitles, use this and the get subtitleTemplate
                 * property to pass subtitle to UnitTitle component
                 */
                get subtitleTemplates() {
                  const { gettext } = this.props;
                  return [
                    gettext(
                      "Explore our %(title)s courses from our top-rated instructors"
                    ),
                    gettext(
                      "Browse our collection of %(title)s courses from our top-rated instructors"
                    ),
                  ];
                }
                get subtitleTemplate() {
                  const bestsellerUnits =
                    this.props.discoveryUnitsStore.units.filter(
                      (unit) =>
                        unit.type === "bestseller" &&
                        unit.raw_title === "Top {} courses in {}"
                    );
                  const thisIndex = bestsellerUnits.findIndex(
                    (unit) => unit.tracking_id === this.props.unit.tracking_id
                  );
                  return thisIndex > -1 &&
                    thisIndex < this.subtitleTemplates.length
                    ? this.subtitleTemplates[thisIndex]
                    : null;
                }
                render() {
                  if (!this.store.unit.items.length && this.store.loading) {
                    return /*#__PURE__*/ React.createElement(
                      CourseUnitSkeleton,
                      {
                        layout: this.props.layout,
                      }
                    );
                  }
                  const courseCardSize =
                    this.props.layout === "multirow" ? "small" : "medium";
                  const showQuickViewBox =
                    this.props.hasHover && this.props.showQuickViewBox;
                  const unitItems = this.store.unit.items;
                  const courseCards = unitItems.map((course, i) =>
                    /*#__PURE__*/ React.createElement(
                      TrackingContextProvider,
                      {
                        key: course.id,
                        trackingContext: {
                          trackImpressionFunc:
                            discoveryTracker.trackDiscoveryImpression,
                          index: i,
                          backendSource: this.store.backendSource,
                        },
                      },
                      /*#__PURE__*/ React.createElement(
                        CourseDetailsQuickViewBoxLazy,
                        {
                          course: course,
                          showQuickViewBox: showQuickViewBox,
                          courseCard: /*#__PURE__*/ React.createElement(
                            AsyncPriceCourseCard,
                            Object.assign(
                              {
                                course: course,
                                size: courseCardSize,
                                width:
                                  this.props.layout === "multirow"
                                    ? "fixed"
                                    : "flexible",
                              },
                              i === 0 && {
                                renderCourseImage: this.renderCourseImage,
                              },
                              {
                                showDetails: false,
                                className: styles["course-card"],
                              },
                              this.props.courseCardProps
                            )
                          ),
                        }
                      )
                    )
                  );
                  if (this.store.hasMore && !this.props.showPager) {
                    const numCards = this.props.layout === "multirow" ? 3 : 1;
                    for (let i = 0; i < numCards; i++) {
                      courseCards.push(
                        /*#__PURE__*/ React.createElement(CourseCardSkeleton, {
                          size:
                            this.props.layout === "multirow"
                              ? "small"
                              : "medium",
                          key: courseCards.length + i,
                        })
                      );
                    }
                  }
                  const cardComponent = this.props.renderExperimentalCourseCards
                    ? ExperimentalBorderedCourseCard
                    : BrowseCourseCard.defaultCardComponent;
                  const carouselClassName = classNames({
                    [styles["multi-row-container"]]:
                      this.props.layout === "multirow",
                    [styles.grid]:
                      this.props.layout !== "multirow" &&
                      !this.props.renderExperimentalCourseCards,
                    [styles[`col-${this.props.gridCols}`]]:
                      !!this.props.gridCols,
                    [stylesExperimental.grid]:
                      this.props.renderExperimentalCourseCards,
                  });
                  return /*#__PURE__*/ React.createElement(
                    "div",
                    {
                      className: this.props.className,
                    },
                    this.props.showTitle &&
                      /*#__PURE__*/ React.createElement(UnitTitle, {
                        unit: this.props.unit,
                        typography: this.props.titleTypography,
                      }),
                    /*#__PURE__*/ React.createElement(
                      BrowseCourseCardContext.Provider,
                      {
                        value: {
                          cardComponent,
                        },
                      },
                      /*#__PURE__*/ React.createElement(
                        Carousel,
                        Object.assign(
                          {
                            className: carouselClassName,
                            "data-testid": "course-unit-carousel",
                            id: this.id,
                            onLoadMore: async () => {
                              this.fetchUnit;
                            },
                            showPager: this.props.showPager,
                            pagerButtonClassName: styles["pager-button"],
                          },
                          this.props.carouselProps
                        ),
                        courseCards
                      )
                    )
                  );
                }
              }),
              (_class2.defaultProps = {
                className: undefined,
                layout: "multirow",
                showTitle: false,
                titleTypography: "ud-heading-xl",
                showPager: false,
                hasHover: null,
                fullWidth: true,
                courseCardProps: {},
                showQuickViewBox: true,
                renderExperimentalCourseCards: false,
                onLoad: noop,
                gridCols: undefined,
              }),
              _class2))
          ) || _class)
      ) || _class)
  ) || _class);
const CourseUnitWithProviders = withUDData(withI18n(CourseUnitInternal));
export { CourseUnitWithProviders as CourseUnit };
//# sourceMappingURL=course-unit.react-component.js.map
