import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _class2;
import { action, observable } from "mobx";
import {
  attachFrontendTrackingIds,
  DiscoveryItemImpressionEvent,
} from "@udemy/browse-event-tracking";
import { DiscoveryAPI } from "@udemy/discovery-api";
export let CourseUnitStore =
  ((_class =
    ((_class2 = class CourseUnitStore {
      constructor(pageType, unit, globalOverrides) {
        _initializerDefineProperty(this, "error", _descriptor, this);
        _initializerDefineProperty(this, "hasMore", _descriptor2, this);
        _initializerDefineProperty(this, "loading", _descriptor3, this);
        this.pageType = void 0;
        this.trackingId = void 0;
        _initializerDefineProperty(this, "unit", _descriptor4, this);
        this.discoveryAPI = void 0;
        this.backendSource =
          DiscoveryItemImpressionEvent.backendSourceOptions.DISCOVERY;
        this.pageType = pageType;
        this.unit = unit;
        this.hasMore = unit.remaining_item_count !== 0;
        attachFrontendTrackingIds(this.unit.items);
        this.discoveryAPI = new DiscoveryAPI({}, globalOverrides);
      }
      async fetchUnit() {
        let options =
          arguments.length > 0 && arguments[0] !== undefined
            ? arguments[0]
            : {};
        if (!this.hasMore || this.loading) {
          return;
        }
        this.loading = true;
        if (this.unit.items && this.unit.items.length) {
          options.lastCourseId = this.unit.items[this.unit.items.length - 1].id;
        }
        if (this.trackingId) {
          options.refTrackingId = this.trackingId;
        }
        try {
          const unit = await this.discoveryAPI.loadItemsForUnit(
            this.unit,
            this.pageType,
            options
          );
          this.trackingId = unit.tracking_id;
          this.receiveUnit(unit);
          return unit;
        } catch (e) {
          this.receiveUnitError(e);
        }
      }
      receiveUnit(unit) {
        this.hasMore = !!unit.remaining_item_count;
        this.loading = false;
        this.unit.items = this.unit.items.concat(unit.items);
        attachFrontendTrackingIds(this.unit.items);
      }
      receiveUnitError(error) {
        this.loading = false;
        this.error = error;
      }
    }),
    (_class2.STORE_ID = "CourseUnitStore"),
    _class2)),
  ((_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "error",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  (_descriptor2 = _applyDecoratedDescriptor(
    _class.prototype,
    "hasMore",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  (_descriptor3 = _applyDecoratedDescriptor(
    _class.prototype,
    "loading",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return false;
      },
    }
  )),
  (_descriptor4 = _applyDecoratedDescriptor(
    _class.prototype,
    "unit",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  _applyDecoratedDescriptor(
    _class.prototype,
    "fetchUnit",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "fetchUnit"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "receiveUnit",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "receiveUnit"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "receiveUnitError",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "receiveUnitError"),
    _class.prototype
  )),
  _class);
//# sourceMappingURL=course-unit.mobx-store.js.map
