import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _class, _descriptor, _descriptor2, _descriptor3;
import { action, observable } from "mobx";
import {
  attachFrontendTrackingIds,
  DiscoveryItemImpressionEvent,
} from "@udemy/browse-event-tracking";
import { DiscoveryAPI } from "@udemy/discovery-api";
export let BundleUnitStore =
  ((_class = class BundleUnitStore {
    constructor(pageType, pageObjectId, udData) {
      let unit =
        arguments.length > 3 && arguments[3] !== undefined
          ? arguments[3]
          : undefined;
      this.pageType = void 0;
      this.pageObjectId = void 0;
      this.discoveryAPI = void 0;
      _initializerDefineProperty(this, "error", _descriptor, this);
      _initializerDefineProperty(this, "loading", _descriptor2, this);
      _initializerDefineProperty(this, "unit", _descriptor3, this);
      this.backendSource =
        DiscoveryItemImpressionEvent.backendSourceOptions.DISCOVERY;
      // Handle the case when discovery api returns a bundle instead of a learning pack
      this.handleBundleUnit = () => {
        var _this$unit;
        if (
          ((_this$unit = this.unit) === null || _this$unit === void 0
            ? void 0
            : _this$unit.type) === "bundle"
        ) {
          const bundle = this.unit.items[0];
          this.unit.items = bundle.buyables;
        }
      };
      this.pageType = pageType;
      this.pageObjectId = pageObjectId;
      this.loading = false;
      this.unit = unit;
      this.discoveryAPI = new DiscoveryAPI({}, udData);
      if (this.unit) {
        this.handleBundleUnit();
      }
    }
    async fetchData(params) {
      if (this.unit) {
        this.loading = false;
        return;
      }
      try {
        this.loading = true;
        const { results: units } = await this.discoveryAPI.loadUnits(
          this.pageType,
          {
            pageObjectId: this.pageObjectId,
            ...params,
          }
        );
        this.receiveUnit(units);
        return units;
      } catch (error) {
        this.onError(error);
      }
    }

    // TODO: markAsSeen

    onError(error) {
      this.loading = false;
      this.error = error;
    }
    receiveUnit(units) {
      this.loading = false;
      this.unit = units[0] || {};
      this.handleBundleUnit();
      if (this.unit.items) {
        attachFrontendTrackingIds(this.unit.items);
      }
    }
  }),
  ((_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "error",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  (_descriptor2 = _applyDecoratedDescriptor(
    _class.prototype,
    "loading",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  (_descriptor3 = _applyDecoratedDescriptor(
    _class.prototype,
    "unit",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  _applyDecoratedDescriptor(
    _class.prototype,
    "fetchData",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "fetchData"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "onError",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "onError"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "receiveUnit",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "receiveUnit"),
    _class.prototype
  )),
  _class);
//# sourceMappingURL=bundle-unit.mobx-store.js.map
