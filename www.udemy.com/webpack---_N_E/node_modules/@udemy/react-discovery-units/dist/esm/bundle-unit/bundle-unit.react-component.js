var _class, _class2;
import classNames from "classnames";
import { toJS } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import {
  AsyncCourseDynamicPriceText,
  AsyncPriceCourseCard,
  BrowseCourseCard,
  BrowseCourseCardContext,
} from "@udemy/browse-course";
import { discoveryTracker } from "@udemy/browse-event-tracking";
import { TrackingContextProvider } from "@udemy/event-tracking";
import { withI18n } from "@udemy/i18n";
import ExpandPlusIcon from "@udemy/icons/dist/expand-plus.ud-icon";
import OfferIcon from "@udemy/icons/dist/offer.ud-icon";
import { AlertBanner } from "@udemy/react-messaging-components";
import { PURCHASE_PRICE_TYPES } from "@udemy/shopping";
import { withUDData } from "@udemy/ud-data";
import { AddToCart } from "../add-to-cart/add-to-cart.react-component";
import { UnitTitle } from "../unit-title/unit-title.react-component";
import { BundleUnitSkeleton } from "./bundle-unit-skeleton.react-component";
import { BundleUnitStore } from "./bundle-unit.mobx-store";
import styles from "./bundle-unit.module.css";
export let InternalBundleUnit =
  observer(
    (_class =
      ((_class2 = class InternalBundleUnit extends React.Component {
        constructor(_props) {
          super(_props);
          this.bundleUnitStore = void 0;
          this.renderCourseCardImage = (ImageComponent, props) => {
            return /*#__PURE__*/ React.createElement(
              ImageComponent,
              Object.assign({}, props, {
                className: classNames(
                  props.className,
                  styles["course-unit-image"]
                ),
              })
            );
          };
          const { pageType, pageObjectId, udData, unit } = _props;
          this.bundleUnitStore = new BundleUnitStore(
            pageType,
            pageObjectId,
            udData,
            unit
          );
        }
        componentDidMount() {
          this.bundleUnitStore.fetchData();
        }
        renderInContainer(content) {
          if (!this.props.applyBorder) {
            return content;
          }
          return /*#__PURE__*/ React.createElement(
            "div",
            {
              className: styles["bundle-border"],
              "data-testid": "bundle-border",
            },
            content
          );
        }
        getCartButtonTextAdd() {
          const { gettext } = this.props;
          if (this.getForceGoToCart()) {
            return gettext("Add all and go to cart");
          }
          return gettext("Add all to cart");
        }
        getCartButtonTextGoToCart() {
          const { gettext } = this.props;
          if (this.getForceGoToCart()) {
            return gettext("Going to cart");
          }
          return gettext("Go to cart");
        }
        getForceGoToCart() {
          var _this$bundleUnitStore;
          if (
            (_this$bundleUnitStore = this.bundleUnitStore.unit) !== null &&
            _this$bundleUnitStore !== void 0 &&
            _this$bundleUnitStore.fbt_go_direct_to_cart
          ) {
            return this.props.forceGoToCart;
          }
          return false;
        }
        renderUnit() {
          var _this$bundleUnitStore2,
            _this$bundleUnitStore3,
            _this$bundleUnitStore4,
            _this$bundleUnitStore5;
          const { gettext, interpolate } = this.props;
          if (!this.bundleUnitStore.unit) {
            return null;
          }
          return /*#__PURE__*/ React.createElement(
            React.Fragment,
            null,
            /*#__PURE__*/ React.createElement(UnitTitle, {
              typography: this.props.titleTypography,
              unit:
                (_this$bundleUnitStore2 = this.bundleUnitStore) === null ||
                _this$bundleUnitStore2 === void 0
                  ? void 0
                  : _this$bundleUnitStore2.unit,
            }),
            /*#__PURE__*/ React.createElement(
              "div",
              {
                className: styles["course-container"],
              },
              (_this$bundleUnitStore3 = this.bundleUnitStore.unit) === null ||
                _this$bundleUnitStore3 === void 0
                ? void 0
                : _this$bundleUnitStore3.items.map((course, i) => {
                    const plusIcon =
                      i > 0 &&
                      /*#__PURE__*/ React.createElement(
                        "div",
                        {
                          className: styles["plus-icon-wrapper"],
                        },
                        /*#__PURE__*/ React.createElement(ExpandPlusIcon, {
                          size: "large",
                          label: false,
                        })
                      );
                    return /*#__PURE__*/ React.createElement(
                      TrackingContextProvider,
                      {
                        key: course.id,
                        trackingContext: {
                          trackImpressionFunc:
                            discoveryTracker.trackDiscoveryImpression,
                          backendSource: this.bundleUnitStore.backendSource,
                          index: i,
                        },
                      },
                      /*#__PURE__*/ React.createElement(
                        "div",
                        {
                          className: styles["course-unit-container"],
                        },
                        /*#__PURE__*/ React.createElement(
                          BrowseCourseCardContext.Provider,
                          {
                            value: {
                              cardComponent:
                                BrowseCourseCard.defaultCardComponent,
                            },
                          },
                          /*#__PURE__*/ React.createElement(
                            AsyncPriceCourseCard,
                            // WARNING: this type assertion could hide bugs:
                            {
                              course: course,
                              size: "large",
                              className: styles["bundle-course-card"],
                              priceProps: {
                                showListPriceOnly: false,
                                listPriceClassName: "bundle-course-price",
                              },
                              showDetails: false,
                              renderCourseImage: this.renderCourseCardImage,
                            }
                          )
                        ),
                        plusIcon
                      )
                    );
                  })
            ),
            ((_this$bundleUnitStore4 = this.bundleUnitStore.unit) === null ||
            _this$bundleUnitStore4 === void 0
              ? void 0
              : _this$bundleUnitStore4.fbt_discount_savings_percent) &&
              /*#__PURE__*/ React.createElement(AlertBanner, {
                className: styles["fbt-discount-banner"],
                title: interpolate(
                  gettext(
                    "Save an extra %(rate)s% in cart when you buy these together"
                  ),
                  {
                    rate: this.bundleUnitStore.unit
                      .fbt_discount_savings_percent,
                  },
                  true
                ),
                icon: /*#__PURE__*/ React.createElement(OfferIcon, {
                  label: false,
                }),
                showCta: false,
              }),
            /*#__PURE__*/ React.createElement(
              "div",
              {
                className: styles["footer-container"],
              },
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  className: styles["price-text-container"],
                },
                /*#__PURE__*/ React.createElement(
                  "span",
                  {
                    className: classNames(
                      "ud-text-lg",
                      styles["price-text-prefix"]
                    ),
                  },
                  gettext("Total:"),
                  " "
                ),
                /*#__PURE__*/ React.createElement(AsyncCourseDynamicPriceText, {
                  courses: this.bundleUnitStore.unit.items,
                  listPriceClassName: "ud-text-md",
                  discountPriceClassName: "ud-heading-lg",
                  trackingEventContext: {
                    priceType: PURCHASE_PRICE_TYPES.bundle,
                  },
                })
              ),
              /*#__PURE__*/ React.createElement(AddToCart, {
                buyables: toJS(
                  (_this$bundleUnitStore5 = this.bundleUnitStore.unit) ===
                    null || _this$bundleUnitStore5 === void 0
                    ? void 0
                    : _this$bundleUnitStore5.items
                ),
                addToCartContext: this.props.context,
                cartButtonTextAdd: this.getCartButtonTextAdd(),
                className: styles["add-to-cart"],
                allowAddToCartSuccessModal:
                  this.props.allowAddToCartSuccessModal,
                forceGoToCart: this.getForceGoToCart(),
                cartButtonTextGoToCart: this.getCartButtonTextGoToCart(),
              })
            )
          );
        }
        render() {
          var _this$bundleUnitStore6, _this$bundleUnitStore7;
          if (this.bundleUnitStore.loading) {
            return this.renderInContainer(
              /*#__PURE__*/ React.createElement(BundleUnitSkeleton, null)
            );
          }
          if (
            !(
              (_this$bundleUnitStore6 = this.bundleUnitStore.unit) !== null &&
              _this$bundleUnitStore6 !== void 0 &&
              (_this$bundleUnitStore7 = _this$bundleUnitStore6.items) !==
                null &&
              _this$bundleUnitStore7 !== void 0 &&
              _this$bundleUnitStore7.length
            )
          ) {
            return null;
          }
          return /*#__PURE__*/ React.createElement(
            "div",
            {
              "data-purpose": "bundle-wrapper",
            },
            this.renderInContainer(this.renderUnit())
          );
        }
      }),
      (_class2.defaultProps = {
        titleTypography: undefined,
        unit: undefined,
        applyBorder: true,
        context: {
          fbt_add_to_cart: true,
        },
        allowAddToCartSuccessModal: true,
        forceGoToCart: false,
      }),
      _class2))
  ) || _class;
export const BundleUnit = withI18n(withUDData(InternalBundleUnit));
//# sourceMappingURL=bundle-unit.react-component.js.map
