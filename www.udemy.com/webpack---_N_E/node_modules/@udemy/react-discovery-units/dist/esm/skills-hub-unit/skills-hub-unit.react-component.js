var _dec, _class, _class2;
import classNames from "classnames";
import { observer } from "mobx-react";
import React from "react";
import { TrackImpression } from "@udemy/event-tracking";
import { withMatchMedia } from "@udemy/hooks";
import { Accordion } from "@udemy/react-reveal-components";
import { Tabs } from "@udemy/react-structure-components";
import { noop } from "@udemy/shared-utils";
import { AlternateHeadline } from "../alternate-headline/alternate-headline.react-component";
import { CourseUnit } from "../course-unit/course-unit.react-component";
import { UnitTitle } from "../unit-title/unit-title.react-component";
import { SkillsHubBanner } from "./skills-hub-banner.react-component";
import { SkillsHubUnitStore } from "./skills-hub-unit.mobx-store";
import styles from "./skills-hub-unit.module.css";
/**
 *
 * The SkillsHubUnit component.
 *
 * @remarks
 * This is a component that's meant to organize a discovery unit into tabs based on their items.
 * It is the responsibility of the parent component to:
 * - Manage the loading/fetching of the DiscoveryUnit to display
 * - Render a CTA show in the mobile Accordion view
 * - Render the content for each Tab/Accordion, given a subnit of a Discovery Unit.
 */
export let SkillsHubUnit =
  ((_dec = withMatchMedia({
    isMobileMax: "mobile-max",
  })),
  _dec(
    (_class =
      observer(
        (_class =
          ((_class2 = class SkillsHubUnit extends React.Component {
            constructor(props) {
              super(props);
              this.store = void 0;
              this.withTabImpression = (node, subUnit, index) => {
                return /*#__PURE__*/ React.createElement(
                  TrackImpression,
                  {
                    key: index,
                    trackFunc: () => {
                      var _this$props$tabTracki, _this$props$tabTracki2;
                      return (_this$props$tabTracki =
                        this.props.tabTrackingContext) === null ||
                        _this$props$tabTracki === void 0
                        ? void 0
                        : (_this$props$tabTracki2 =
                            _this$props$tabTracki.onTabImpression) === null ||
                          _this$props$tabTracki2 === void 0
                        ? void 0
                        : _this$props$tabTracki2.call(
                            _this$props$tabTracki,
                            subUnit,
                            index
                          );
                    },
                    visibilityThreshold: 0.25,
                  },
                  node
                );
              };
              this.store = new SkillsHubUnitStore(this.props.unit);
            }
            renderBanner(key) {
              var _bannerData$topics;
              const { bannerData } = this.props;
              if (
                !(
                  bannerData !== null &&
                  bannerData !== void 0 &&
                  (_bannerData$topics = bannerData.topics) !== null &&
                  _bannerData$topics !== void 0 &&
                  _bannerData$topics[key]
                )
              ) {
                return null;
              }
              return /*#__PURE__*/ React.createElement(
                SkillsHubBanner,
                Object.assign({}, bannerData.topics[key], {
                  onCtaClick:
                    bannerData === null || bannerData === void 0
                      ? void 0
                      : bannerData.onCtaClick,
                })
              );
            }
            render() {
              const { subUnits } = this.store;
              const {
                alternateHeadline,
                className,
                compact,
                courseCardProps,
                isMobileMax,
                onLoad,
                showQuickViewBox,
                showTitle,
                tabSize,
              } = this.props;
              let content;
              const hasBanner = !isMobileMax && !!this.props.bannerData;
              if (isMobileMax) {
                content = /*#__PURE__*/ React.createElement(
                  React.Fragment,
                  null,
                  /*#__PURE__*/ React.createElement(
                    Accordion,
                    {
                      size: compact ? "medium" : undefined,
                    },
                    subUnits.map((subUnit, i) => {
                      var _this$props$renderCon,
                        _this$props,
                        _this$props$renderUni,
                        _this$props2;
                      return this.withTabImpression(
                        /*#__PURE__*/ React.createElement(
                          Accordion.Panel,
                          {
                            key: i,
                            title: subUnit.title,
                            defaultExpanded: i === 0,
                            toggleStrategy: "add-remove",
                            onToggle: () => {
                              var _this$props$tabTracki3,
                                _this$props$tabTracki4;
                              return (_this$props$tabTracki3 =
                                this.props.tabTrackingContext) === null ||
                                _this$props$tabTracki3 === void 0
                                ? void 0
                                : (_this$props$tabTracki4 =
                                    _this$props$tabTracki3.onTabSelect) ===
                                    null || _this$props$tabTracki4 === void 0
                                ? void 0
                                : _this$props$tabTracki4.call(
                                    _this$props$tabTracki3,
                                    subUnit,
                                    i
                                  );
                            },
                          },
                          ((_this$props$renderCon = (_this$props = this.props)
                            .renderContent) === null ||
                          _this$props$renderCon === void 0
                            ? void 0
                            : _this$props$renderCon.call(
                                _this$props,
                                subUnit,
                                isMobileMax
                              )) ||
                            /*#__PURE__*/ React.createElement(CourseUnit, {
                              unit: subUnit,
                              layout: "singlerow",
                              onLoad: onLoad,
                              showPager: false,
                              /* allowScroll={true} */ fullWidth: true,
                              className: styles["mobile-course-unit"],
                              courseCardProps: courseCardProps,
                              showQuickViewBox: showQuickViewBox,
                              carouselProps: {
                                allowScroll: isMobileMax,
                              },
                            }),
                          (_this$props$renderUni = (_this$props2 = this.props)
                            .renderUnitCta) === null ||
                            _this$props$renderUni === void 0
                            ? void 0
                            : _this$props$renderUni.call(_this$props2, subUnit)
                        ),
                        subUnit,
                        i
                      );
                    })
                  )
                );
              } else {
                content = /*#__PURE__*/ React.createElement(
                  Tabs,
                  {
                    size: tabSize,
                    onSelect: (tabId) => {
                      var _this$props$tabTracki5, _this$props$tabTracki6;
                      return (_this$props$tabTracki5 =
                        this.props.tabTrackingContext) === null ||
                        _this$props$tabTracki5 === void 0
                        ? void 0
                        : (_this$props$tabTracki6 =
                            _this$props$tabTracki5.onTabSelect) === null ||
                          _this$props$tabTracki6 === void 0
                        ? void 0
                        : _this$props$tabTracki6.call(
                            _this$props$tabTracki5,
                            subUnits[tabId],
                            tabId
                          );
                    },
                  },
                  subUnits.map((subUnit, index) => {
                    var _this$props$renderCon2, _this$props3;
                    // Note that, id must be same as unit's index in the subUnits array
                    return /*#__PURE__*/ React.createElement(
                      Tabs.Tab,
                      {
                        title: subUnit.title,
                        key: subUnit.title,
                        id: index,
                        renderTabButton: (tabButton) =>
                          this.withTabImpression(tabButton, subUnit, index),
                      },
                      /*#__PURE__*/ React.createElement(
                        "div",
                        {
                          className: classNames({
                            [styles["with-banner-container"]]: hasBanner,
                          }),
                        },
                        this.renderBanner(subUnit.title),
                        ((_this$props$renderCon2 = (_this$props3 = this.props)
                          .renderContent) === null ||
                        _this$props$renderCon2 === void 0
                          ? void 0
                          : _this$props$renderCon2.call(
                              _this$props3,
                              subUnit,
                              isMobileMax
                            )) ||
                          /*#__PURE__*/ React.createElement(CourseUnit, {
                            unit: subUnit,
                            layout: "singlerow",
                            onLoad: onLoad,
                            showPager: true,
                            fullWidth: false,
                            courseCardProps: courseCardProps,
                            showQuickViewBox: showQuickViewBox,
                            carouselProps: {
                              onNextClick: () => {
                                var _this$props$tabTracki7,
                                  _this$props$tabTracki8;
                                return (_this$props$tabTracki7 =
                                  this.props.tabTrackingContext) === null ||
                                  _this$props$tabTracki7 === void 0
                                  ? void 0
                                  : (_this$props$tabTracki8 =
                                      _this$props$tabTracki7.onCarouselPagerButtonClick) ===
                                      null || _this$props$tabTracki8 === void 0
                                  ? void 0
                                  : _this$props$tabTracki8.call(
                                      _this$props$tabTracki7
                                    );
                              },
                              onPreviousClick: () => {
                                var _this$props$tabTracki9,
                                  _this$props$tabTracki10;
                                return (_this$props$tabTracki9 =
                                  this.props.tabTrackingContext) === null ||
                                  _this$props$tabTracki9 === void 0
                                  ? void 0
                                  : (_this$props$tabTracki10 =
                                      _this$props$tabTracki9.onCarouselPagerButtonClick) ===
                                      null || _this$props$tabTracki10 === void 0
                                  ? void 0
                                  : _this$props$tabTracki10.call(
                                      _this$props$tabTracki9
                                    );
                              },
                            },
                          })
                      )
                    );
                  })
                );
              }
              return /*#__PURE__*/ React.createElement(
                "div",
                {
                  className: classNames(className, {
                    [styles["with-banner-wrapper"]]: hasBanner,
                  }),
                  "data-purpose": "skills-hub-unit",
                },
                !showTitle &&
                  alternateHeadline &&
                  /*#__PURE__*/ React.createElement(
                    AlternateHeadline,
                    Object.assign(
                      {
                        titleTag: "h2",
                      },
                      alternateHeadline
                    )
                  ),
                showTitle &&
                  /*#__PURE__*/ React.createElement(UnitTitle, {
                    typography: compact ? "ud-heading-lg" : undefined,
                    unit: this.props.unit,
                  }),
                content
              );
            }
          }),
          (_class2.defaultProps = {
            alternateHeadline: undefined,
            bannerData: undefined,
            className: undefined,
            compact: false,
            isMobileMax: null,
            onLoad: noop,
            renderUnitCta: noop,
            showQuickViewBox: true,
            showTitle: false,
            tabSize: undefined,
          }),
          _class2))
      ) || _class)
  ) || _class);
//# sourceMappingURL=skills-hub-unit.react-component.js.map
