import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _class, _descriptor, _descriptor2;
import { action, observable } from "mobx";
import { generateTrackingId } from "@udemy/event-tracking";
/**
 *
 * This MobX store manages the subunits meant to be rendered by the  SkillsHubUnit.
 *
 * It allows for a loading state where 'dummy' units are passed in, but no content is available to render yet.
 */
export let SkillsHubUnitStore =
  ((_class = class SkillsHubUnitStore {
    constructor(unit) {
      var _unit$available_filte;
      _initializerDefineProperty(this, "subUnits", _descriptor, this);
      this.items = [];
      _initializerDefineProperty(this, "setUnits", _descriptor2, this);
      this.items = unit.items;
      if (
        unit !== null &&
        unit !== void 0 &&
        (_unit$available_filte = unit.available_filters) !== null &&
        _unit$available_filte !== void 0 &&
        _unit$available_filte.units
      ) {
        this.setUnits(unit.available_filters.units);
      }
    }
  }),
  ((_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "subUnits",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return [];
      },
    }
  )),
  (_descriptor2 = _applyDecoratedDescriptor(
    _class.prototype,
    "setUnits",
    [action],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return (skills) => {
          skills.forEach((skill, i) => {
            // Attach tracking id to all units
            const trackingId = generateTrackingId();
            if (i === 0) {
              const skillsHubAvailableFiltersUnit = {
                ...skill,
                items: this.items,
                frontendTrackingId: trackingId,
              };
              this.subUnits.push(skillsHubAvailableFiltersUnit);
            } else {
              this.subUnits.push({
                ...skill,
                items: [],
                frontendTrackingId: trackingId,
              });
            }
          });
        };
      },
    }
  ))),
  _class);
//# sourceMappingURL=skills-hub-unit.mobx-store.js.map
