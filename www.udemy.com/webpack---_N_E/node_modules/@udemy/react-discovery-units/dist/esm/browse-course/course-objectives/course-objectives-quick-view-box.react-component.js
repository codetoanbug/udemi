import classNames from "classnames";
import React, { useState } from "react";
import { BUYABLE_TYPES } from "@udemy/cart-temp-migration";
import { trackGenericCourseClick, Tracker } from "@udemy/event-tracking";
import { useFunnelLogContextStore } from "@udemy/funnel-tracking";
import { useI18n } from "@udemy/i18n";
import InfoIcon from "@udemy/icons/dist/info.ud-icon";
import TickIcon from "@udemy/icons/dist/tick.ud-icon";
import { BlockList, Button } from "@udemy/react-core-components";
import { Popover } from "@udemy/react-popup-components";
import { toLocaleDateString } from "@udemy/shared-utils";
import { Wishlist, WishlistStore } from "@udemy/shopping";
import { useUDData } from "@udemy/ud-data";
import { AddToCart } from "../../add-to-cart/add-to-cart.react-component";
import { QuickViewBoxOpenEvent, EnrollNowEvent } from "../../external/events";
import { UI_REGION } from "../../external/ui-regions";
import styles from "./course-objectives-quick-view-box.module.css";
export const CourseObjectivesList = (_ref) => {
  let { objectives } = _ref;
  return /*#__PURE__*/ React.createElement(
    BlockList,
    {
      size: "small",
      padding: "tight",
    },
    objectives.map((objective, i) =>
      /*#__PURE__*/ React.createElement(
        BlockList.Item,
        {
          key: i,
          icon: /*#__PURE__*/ React.createElement(TickIcon, {
            label: false,
            color: "neutral",
          }),
          "data-testid": "quick-view-box-objective",
        },
        objective
      )
    )
  );
};
const PreviousPurchaseInfo = (_ref2) => {
  let { previousPurchaseDate } = _ref2;
  const { gettext, interpolate } = useI18n();
  const purchaseDateString = toLocaleDateString(previousPurchaseDate, {
    month: "short",
    day: "numeric",
    year: "numeric",
  });
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      className: styles["purchase-info"],
    },
    /*#__PURE__*/ React.createElement(InfoIcon, {
      label: false,
      size: "medium",
      color: "info",
    }),
    /*#__PURE__*/ React.createElement(
      "b",
      null,
      interpolate(
        gettext("You enrolled in this course on %(purchaseDate)s"),
        {
          purchaseDate: purchaseDateString,
        },
        true
      )
    )
  );
};

/**
 * Props for the `CourseObjectivesQuickViewBox` component
 */

/**
 * Renders the course objectives in a popover that is triggered on hover and attached to the given
 * `courseCard` component
 */
export const CourseObjectivesQuickViewBox = (props) => {
  var _course$objectives_su;
  const udData = useUDData();
  const gettext = useI18n().gettext;
  const funnelLogContextStore = useFunnelLogContextStore();
  const [wishlistStore] = useState(new WishlistStore(props.course, udData.me));
  const placement = props.placement || "top";

  /**
   * Logs a `quick-view-previewed` funnel event and publishes a `QuickViewBoxOpenEvent` event
   */
  function logQuickViewPreview() {
    const { course } = props;
    funnelLogContextStore.logAction(
      "quick-view-previewed",
      [
        {
          id: course.id,
        },
      ],
      funnelLogContextStore
    );
    Tracker.publishEvent(
      new QuickViewBoxOpenEvent({
        id: course.id,
        trackingId: course.frontendTrackingId || course.tracking_id,
      })
    );
  }

  /**
   * Publishes a `EnrollNowEvent` event
   */
  function trackEnrollNowClick() {
    const buyable = {
      id: props.course.id,
      type: BUYABLE_TYPES.COURSE,
      trackingId: props.course.frontendTrackingId || props.course.tracking_id,
    };
    Tracker.publishEvent(
      new EnrollNowEvent({
        buyable,
      })
    );
  }

  /**
   * Publishes a generic course click event
   */
  function trackGoToCourseClick() {
    trackGenericCourseClick({
      courseId: props.course.id,
      courseTrackingId:
        props.course.frontendTrackingId || props.course.tracking_id,
      componentName: "srpCourseLearnCTAButton",
    });
  }

  /**
   * Renders popover content using a Popover function
   */
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  function renderContent(_ref3) {
    var _Popover$defaultProps, _Popover$defaultProps2;
    let { className, ...props } = _ref3;
    for (
      var _len = arguments.length,
        rest = new Array(_len > 1 ? _len - 1 : 0),
        _key = 1;
      _key < _len;
      _key++
    ) {
      rest[_key - 1] = arguments[_key];
    }
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const args = [
      {
        className: classNames(className, styles["popover-wrapper"]),
        ...props,
      },
      ...rest,
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
    ];

    return (_Popover$defaultProps = (_Popover$defaultProps2 =
      Popover.defaultProps).renderContent) === null ||
      _Popover$defaultProps === void 0
      ? void 0
      : _Popover$defaultProps.call(_Popover$defaultProps2, ...args);
  }
  function renderCallToAction() {
    const { course, showCta, isUserEnrolled } = props;
    if (
      showCta &&
      !course.is_in_user_subscription &&
      !udData.Config.brand.has_organization
    ) {
      let content;
      if (isUserEnrolled) {
        content = /*#__PURE__*/ React.createElement(
          Button,
          {
            componentClass: "a",
            className: styles["cta-button"],
            "data-testid": "go-to-course-button",
            href: course.learn_url,
            udStyle: udData.Config.brand.has_organization ? "brand" : "primary",
            onClick: trackGoToCourseClick,
          },
          gettext("Go to course")
        );
      } else if (course.free_course_subscribe_url) {
        content = /*#__PURE__*/ React.createElement(
          Button,
          {
            componentClass: "a",
            className: styles["cta-button"],
            "data-testid": "enroll-now-button",
            href: course.free_course_subscribe_url,
            udStyle: udData.Config.brand.has_organization ? "brand" : "primary",
            onClick: trackEnrollNowClick,
          },
          gettext("Enroll now")
        );
      } else {
        content = /*#__PURE__*/ React.createElement(
          React.Fragment,
          null,
          /*#__PURE__*/ React.createElement(
            "div",
            {
              className: styles["cta-button"],
              "data-testid": "add-to-cart",
            },
            /*#__PURE__*/ React.createElement(AddToCart, {
              buyables: [course],
            })
          ),
          /*#__PURE__*/ React.createElement(
            "div",
            {
              className: styles.wishlist,
            },
            /*#__PURE__*/ React.createElement(Wishlist, {
              wishlistStore: wishlistStore,
              round: true,
              size: "large",
              uiRegion: UI_REGION.COURSE_OBJECTIVES,
            })
          )
        );
      }
      return /*#__PURE__*/ React.createElement(
        "div",
        {
          "data-testid": "course-objectives-quickviewbox-popover-content",
          className: styles["cta-container"],
        },
        content
      );
    }
    return null;
  }
  const { className, course, courseCard } = props;
  if (
    !(
      (_course$objectives_su = course.objectives_summary) !== null &&
      _course$objectives_su !== void 0 &&
      _course$objectives_su.length
    )
  ) {
    return null;
  }
  return /*#__PURE__*/ React.createElement(
    Popover,
    {
      placement: placement,
      trigger: courseCard,
      canToggleOnHover: true,
      detachFromTarget: true,
      toggleStrategy: "add-remove",
      onFirstOpen: logQuickViewPreview,
      withPadding: false,
      renderContent: renderContent,
    },
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: className,
        "data-testid": "course-objectives-quick-view-box-content",
      },
      props.isUserEnrolled && props.enrollmentDate && props.showCta
        ? /*#__PURE__*/ React.createElement(PreviousPurchaseInfo, {
            previousPurchaseDate: props.enrollmentDate,
          })
        : /*#__PURE__*/ React.createElement(
            React.Fragment,
            null,
            /*#__PURE__*/ React.createElement(
              "h2",
              {
                className: classNames(
                  "ud-heading-md",
                  styles["content-header"]
                ),
              },
              gettext("What youâ€™ll learn")
            ),
            /*#__PURE__*/ React.createElement(CourseObjectivesList, {
              objectives: course.objectives_summary,
            })
          ),
      renderCallToAction()
    )
  );
};
//# sourceMappingURL=course-objectives-quick-view-box.react-component.js.map
