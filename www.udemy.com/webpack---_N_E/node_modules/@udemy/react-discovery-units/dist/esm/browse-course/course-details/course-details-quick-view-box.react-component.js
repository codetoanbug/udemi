import classNames from "classnames";
import { inject, observer } from "mobx-react";
import React, { useRef, useState } from "react";
import { AsyncCourseStaticPriceText } from "@udemy/browse-course";
import { getCourseBadgeFromType } from "@udemy/browse-course";
import { BUYABLE_TYPES } from "@udemy/cart-temp-migration";
import { getUniqueId, findFocusables } from "@udemy/design-system-utils";
import { trackGenericCourseClick, Tracker } from "@udemy/event-tracking";
import { useFunnelLogContextStore } from "@udemy/funnel-tracking";
import { useI18n } from "@udemy/i18n";
import PlayIcon from "@udemy/icons/dist/play.ud-icon";
import { Button } from "@udemy/react-core-components";
import { Popover } from "@udemy/react-popup-components";
import { Wishlist, WishlistStore } from "@udemy/shopping";
import { SaveToListButton, PURCHASE_PRICE_TYPES } from "@udemy/shopping";
import { useUDData } from "@udemy/ud-data";
import { AddToCart } from "../../add-to-cart/add-to-cart.react-component";
import { QuickViewBoxOpenEvent, EnrollNowEvent } from "../../external/events";
import { UI_REGION } from "../../external/ui-regions";
import { CourseObjectivesList } from "../course-objectives/course-objectives-quick-view-box.react-component";
import styles from "./course-details-quick-view-box.module.css";
const InternalCourseDetailsQuickViewBoxContent = (props) => {
  var _course$objectives_su;
  const {
    assessmentRecommendation,
    className,
    course,
    onCourseTitleClickCallbackFunc,
    onEnrollNowClickCallbackFunc,
    resourceContextMenu,
    learningPathId,
  } = props;
  const { Config, me, request } = useUDData();
  const { gettext } = useI18n();
  const [wishlistStore] = useState(new WishlistStore(course, me));
  const funnelLogContextStore = useFunnelLogContextStore();

  /**
   * Publishes a `EnrollNowEvent` and executes `onEnrollNowClickCallbackFunc()` if it exists.
   */
  function trackEnrollNowClick() {
    const buyable = {
      id: course.id,
      type: BUYABLE_TYPES.COURSE,
      trackingId: course.frontendTrackingId || course.tracking_id,
    };
    Tracker.publishEvent(
      new EnrollNowEvent({
        buyable,
      })
    );
    if (onEnrollNowClickCallbackFunc) {
      onEnrollNowClickCallbackFunc();
    }
  }

  /**
   * Publishes a `Generic Course Click` and executes `onCourseTitleClickCallbackFunc()` if it exists.
   */
  function trackCourseTitleClick() {
    trackGenericCourseClick({
      courseId: course.id,
      courseTrackingId: course.frontendTrackingId || course.tracking_id,
      componentName: "quickViewBox",
    });
    if (onCourseTitleClickCallbackFunc) {
      onCourseTitleClickCallbackFunc();
    }
  }
  const isUserEnrolled =
    course.is_user_subscribed || course.is_in_user_subscription;
  const CourseBadgeComponent =
    course.badges && course.badges.length && !course.is_in_user_subscription
      ? getCourseBadgeFromType(course.badges[0].badge_family)
      : null;
  const userLocale = request.locale.replace("_", "-") || "en-US";
  const courseDate = course.last_update_date
    ? {
        type: gettext("Updated"),
        date: new Date(course.last_update_date).toLocaleDateString(userLocale, {
          month: "long",
          year: "numeric",
        }),
      }
    : {
        type: gettext("Published"),
        date: new Date(course.published_time).toLocaleDateString(userLocale, {
          month: "long",
          year: "numeric",
        }),
      };
  const captionsList = [];
  if (course.has_closed_caption) {
    captionsList.push(gettext("Subtitles"));
  }
  if (course.has_508_closed_captions) {
    captionsList.push(gettext("CC"));
  }
  const statsLine = /*#__PURE__*/ React.createElement(
    "div",
    {
      className: classNames("ud-text-xs", styles.stats),
    },
    /*#__PURE__*/ React.createElement("span", null, course.content_info),
    /*#__PURE__*/ React.createElement("span", null, course.instructional_level),
    captionsList &&
      /*#__PURE__*/ React.createElement("span", null, captionsList.join(", "))
  );
  const isLimitedConsumptionTrial =
    Config.brand.has_organization &&
    Config.brand.organization.is_limited_consumption_trial;
  let courseUrl = isUserEnrolled ? course.learn_url : course.url;
  if (learningPathId) {
    courseUrl = `${courseUrl}?learning_path_id=${learningPathId}`;
  }
  let cta;
  if (isLimitedConsumptionTrial) {
    const [url, queryString] = course.url.split("?");
    const searchParams = new URLSearchParams(queryString);
    searchParams.set("from_quick_view", "1");
    cta = /*#__PURE__*/ React.createElement(
      Button,
      {
        componentClass: "a",
        "data-testid": "watch-videos",
        href: `${url}?${searchParams.toString()}`,
        udStyle: "brand",
      },
      /*#__PURE__*/ React.createElement(PlayIcon, {
        label: false,
      }),
      gettext("Watch videos")
    );
  } else if (assessmentRecommendation || isUserEnrolled) {
    // TODO: href should update after the backend ready
    // assessmentRecommendation: In the new assessment project, we recommend courses.
    // We don't know if the user is enrolled or not in the course
    // We use a generic copy, 'View course' instead of 'Enroll now.'
    cta = /*#__PURE__*/ React.createElement(
      Button,
      {
        componentClass: "a",
        "data-testid": "view-course",
        href: courseUrl,
        udStyle: "brand",
      },
      gettext("View course")
    );
  } else if (course.free_course_subscribe_url) {
    cta = /*#__PURE__*/ React.createElement(
      Button,
      {
        componentClass: "a",
        "data-testid": "enroll-now-button",
        href: course.free_course_subscribe_url,
        udStyle: Config.brand.has_organization ? "brand" : "primary",
        onClick: trackEnrollNowClick,
      },
      gettext("Enroll now")
    );
  } else {
    cta = /*#__PURE__*/ React.createElement(AddToCart, {
      buyables: [course],
    });
  }
  const courseContextMenu =
    resourceContextMenu !== null &&
    resourceContextMenu !== void 0 &&
    resourceContextMenu.getQuickViewBoxContextMenu
      ? resourceContextMenu.getQuickViewBoxContextMenu({
          ...course,
          isPublished: true,
        })
      : null;
  const uiRegion =
    funnelLogContextStore !== null &&
    funnelLogContextStore !== void 0 &&
    funnelLogContextStore.subcontext
      ? `${
          funnelLogContextStore === null || funnelLogContextStore === void 0
            ? void 0
            : funnelLogContextStore.subcontext.replace(/ +/g, "_")
        }.${UI_REGION.QUICK_PREVIEW}`
      : UI_REGION.QUICK_PREVIEW;
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      className: className,
    },
    /*#__PURE__*/ React.createElement(
      "a",
      {
        className: classNames("ud-heading-lg", styles.title),
        href: courseUrl,
        "data-testid": "quick-view-box-title",
        onClick: trackCourseTitleClick,
        onContextMenu: trackCourseTitleClick,
      },
      course.title
    ),
    /*#__PURE__*/ React.createElement(
      "div",
      {
        "data-testid": "badge-container",
        className: styles["badge-container"],
      },
      CourseBadgeComponent &&
        /*#__PURE__*/ React.createElement(CourseBadgeComponent, {
          className: styles.badge,
        }),
      /*#__PURE__*/ React.createElement(
        "span",
        {
          className: classNames("ud-text-xs", styles.updated),
        },
        courseDate.type,
        /*#__PURE__*/ React.createElement(
          "span",
          {
            className: "ud-heading-xs",
          },
          " ",
          courseDate.date
        )
      )
    ),
    statsLine,
    courseContextMenu &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["context-menu"],
        },
        courseContextMenu
      ),
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: classNames("ud-text-sm", styles.headline),
        "data-testid": "quick-view-box-headline",
      },
      course.headline
    ),
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: classNames("ud-text-sm", styles.objectives),
      },
      (_course$objectives_su = course.objectives_summary) !== null &&
        _course$objectives_su !== void 0 &&
        _course$objectives_su.length
        ? /*#__PURE__*/ React.createElement(CourseObjectivesList, {
            objectives: course.objectives_summary,
          })
        : gettext("No course details available")
    ),
    props.showPrice &&
      /*#__PURE__*/ React.createElement(AsyncCourseStaticPriceText, {
        courses: [course],
        trackingEventContext: {
          buyableId: course.id,
          priceType: PURCHASE_PRICE_TYPES.individual_buyable,
          buyableType: "course",
          buyableTrackingId: course.tracking_id,
        },
      }),
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: styles.cta,
      },
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["add-to-cart"],
        },
        cta
      ),
      course.is_paid &&
        !isUserEnrolled &&
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: styles["cta-button"],
          },
          /*#__PURE__*/ React.createElement(Wishlist, {
            wishlistStore: wishlistStore,
            round: true,
            size: "large",
            uiRegion: uiRegion,
          })
        ),
      course.is_in_user_subscription &&
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: styles["cta-button"],
          },
          /*#__PURE__*/ React.createElement(SaveToListButton, {
            course: course,
            round: true,
            size: "large",
            uiRegion: uiRegion,
          })
        )
    )
  );
};
export const CourseDetailsQuickViewBoxContent = Object.assign(
  inject((_ref) => {
    let { resourceContextMenu } = _ref;
    return {
      resourceContextMenu,
    };
  })((_ref2) => {
    let { resourceContextMenu, ...rest } = _ref2;
    return /*#__PURE__*/ React.createElement(
      InternalCourseDetailsQuickViewBoxContent,
      Object.assign({}, rest, {
        resourceContextMenu: resourceContextMenu,
      })
    );
  }),
  {
    displayName: "CourseDetailsQuickViewBoxContent",
  }
);

/**
 * Props for the `CourseDetailsQuickViewBox` component
 */

/**
 * Renders the course details in a popover that is triggered on hover and attached to the given
 * `courseCard` component
 */
export const CourseDetailsQuickViewBox = Object.assign(
  observer((props) => {
    var _props$placement;
    const {
      className,
      course,
      courseCard,
      onCourseTitleClickCallbackFunc,
      onEnrollNowClickCallbackFunc,
    } = props;
    const { gettext } = useI18n();
    const funnelLogContextStore = useFunnelLogContextStore();
    const popoverRef = useRef(null);
    const [triggerButtonId] = useState(getUniqueId("trigger-button"));
    const showPrice = !!props.showPrice;
    const placement =
      (_props$placement = props.placement) !== null &&
      _props$placement !== void 0
        ? _props$placement
        : "right";
    function onCloseButtonClick() {
      var _Popper$ref, _document$getElementB;
      const Popper = popoverRef.current;
      const BasicPopper =
        Popper === null || Popper === void 0
          ? void 0
          : (_Popper$ref = Popper.ref) === null || _Popper$ref === void 0
          ? void 0
          : _Popper$ref.current;
      BasicPopper === null || BasicPopper === void 0
        ? void 0
        : BasicPopper.onClose();
      (_document$getElementB = document.getElementById(triggerButtonId)) ===
        null || _document$getElementB === void 0
        ? void 0
        : _document$getElementB.focus();
    }
    function onTriggerButtonClick(event) {
      var _Popper$ref2;
      const Popper = popoverRef.current;
      const BasicPopper =
        Popper === null || Popper === void 0
          ? void 0
          : (_Popper$ref2 = Popper.ref) === null || _Popper$ref2 === void 0
          ? void 0
          : _Popper$ref2.current;
      BasicPopper === null || BasicPopper === void 0
        ? void 0
        : BasicPopper.onFocusOpen(event.currentTarget);
    }

    //(selectors: PopperGetTabOrderElementSelectors) => ForcedTabOrder[]
    function getTabOrder(selectors) {
      const {
        findTriggerNode,
        findFirstFocusableInContent,
        findLastFocusableInContent,
      } = selectors;
      const triggerButton = document.getElementById(triggerButtonId);
      const findTriggerButton = () => {
        // We only want to re-order the tab flow when entering the popover content from outside; if we shift-tab when
        // on the first element, we want to let the popover's tab order handle it, rather than
        // returning to the trigger button. So, only return the trigger button if we're
        // trying to tab off of the trigger button.
        return document.activeElement === triggerButton ? triggerButton : null;
      };
      const findNextFocusableOutsideTriggerNode = () => {
        var _popoverRef$current, _popoverRef$current$r;
        if (
          (_popoverRef$current = popoverRef.current) !== null &&
          _popoverRef$current !== void 0 &&
          (_popoverRef$current$r = _popoverRef$current.ref.current) !== null &&
          _popoverRef$current$r !== void 0 &&
          _popoverRef$current$r.isOpen
        ) {
          const focusablesInTriggerNode = findFocusables(findTriggerNode());
          const lastFocusableInTriggerNode =
            focusablesInTriggerNode[focusablesInTriggerNode.length - 1];
          const allFocusableElements = findFocusables(document.documentElement);
          const lastFocusableIndex = allFocusableElements.findIndex(
            (e) => e === lastFocusableInTriggerNode
          );
          if (lastFocusableIndex === -1) {
            return null;
          }
          if (lastFocusableIndex === allFocusableElements.length - 1) {
            return allFocusableElements[0];
          }
          return allFocusableElements[lastFocusableIndex + 1];
        }
      };
      return [
        [findTriggerNode, findFirstFocusableInContent],
        [findTriggerButton, findFirstFocusableInContent],
        [findLastFocusableInContent, findNextFocusableOutsideTriggerNode],
      ];
    }
    function logQuickViewPreview() {
      funnelLogContextStore.logAction("quick-view-previewed", [
        {
          id: course.id,
        },
      ]);
      Tracker.publishEvent(
        new QuickViewBoxOpenEvent({
          id: course.id,
          trackingId: course.frontendTrackingId,
        })
      );
    }
    const renderContent = function (_ref3) {
      var _Popover$defaultProps, _Popover$defaultProps2;
      let { className, ...props } = _ref3;
      for (
        var _len = arguments.length,
          rest = new Array(_len > 1 ? _len - 1 : 0),
          _key = 1;
        _key < _len;
        _key++
      ) {
        rest[_key - 1] = arguments[_key];
      }
      const args = [
        {
          className: classNames(className, styles["popover-wrapper"]),
          ...props,
        },
        ...rest,
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
      ];

      return (_Popover$defaultProps = (_Popover$defaultProps2 =
        Popover.defaultProps).renderContent) === null ||
        _Popover$defaultProps === void 0
        ? void 0
        : _Popover$defaultProps.call(_Popover$defaultProps2, ...args);
    };
    const popoverContent = /*#__PURE__*/ React.createElement(
      "div",
      {
        "data-testid": "course-details-content",
      },
      /*#__PURE__*/ React.createElement(CourseDetailsQuickViewBoxContent, {
        course: course,
        className: className,
        showPrice: showPrice,
        funnelLogContextStore: funnelLogContextStore,
        onEnrollNowClickCallbackFunc: onEnrollNowClickCallbackFunc,
        onCourseTitleClickCallbackFunc: onCourseTitleClickCallbackFunc,
      }),
      /*#__PURE__*/ React.createElement(
        Button,
        {
          className: classNames(
            "ud-link-underline",
            styles["popover-interaction-btn"]
          ),
          "data-testid": "close-course-details-popover",
          udStyle: "ghost",
          size: "xsmall",
          onClick: onCloseButtonClick,
        },
        /*#__PURE__*/ React.createElement("span", null, gettext("Close dialog"))
      )
    );
    const popoverTrigger = /*#__PURE__*/ React.createElement(
      "div",
      {
        "data-testid": "course-details-popover-trigger",
        className: styles["full-height"],
      },
      courseCard,
      /*#__PURE__*/ React.createElement(
        Button,
        {
          className: classNames(
            "ud-link-underline",
            styles["popover-interaction-btn"]
          ),
          "data-testid": "open-course-details-popover",
          udStyle: "ghost",
          size: "xsmall",
          id: triggerButtonId,
          onClick: onTriggerButtonClick,
        },
        /*#__PURE__*/ React.createElement(
          "span",
          null,
          gettext("Show course details")
        )
      )
    );
    return /*#__PURE__*/ React.createElement(
      Popover,
      {
        placement: placement,
        trigger: popoverTrigger,
        canToggleOnHover: true,
        canOnlyToggleOnHover: true,
        detachFromTarget: true,
        toggleStrategy: "add-remove",
        onFirstOpen: logQuickViewPreview,
        renderContent: renderContent,
        ref: popoverRef,
        getTabOrder: getTabOrder,
        className: styles["full-height"],
      },
      popoverContent
    );
  }),
  {
    displayName: "CourseDetailsQuickViewBox",
  }
);
//# sourceMappingURL=course-details-quick-view-box.react-component.js.map
