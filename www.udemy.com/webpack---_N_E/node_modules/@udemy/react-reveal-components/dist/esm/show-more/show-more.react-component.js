import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _class,
  _class2,
  _descriptor,
  _descriptor2,
  _descriptor3,
  _descriptor4,
  _class3;

/* eslint-disable @typescript-eslint/naming-convention */
import { getUniqueId } from "@udemy/design-system-utils";
import { useI18n } from "@udemy/i18n";
import CollapseIcon from "@udemy/icons/dist/collapse.ud-icon";
import ExpandIcon from "@udemy/icons/dist/expand.ud-icon";
import { CheckedStateCheckbox } from "@udemy/react-checked-state-components";
import { Button } from "@udemy/react-core-components";
import { noop } from "@udemy/shared-utils";
import { pxToRem } from "@udemy/styles";
import classNames from "classnames";
import { action, observable } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import styles from "./show-more.module.css";
/** React props interface for the ShowMore component. */

/**
 * The ShowMoreButton component.
 *
 * @remarks
 * The display of text within this component is toggled via CSS based on expanded state of `ShowMore`
 */
const ShowMoreButton = (_ref) => {
  let {
    inputId,
    buttonComponent: ButtonComponent,
    fullWidthButton,
    hideIcons,
    isExpanded,
    ...props
  } = _ref;
  const { gettext } = useI18n();
  const {
    lessButtonLabel = gettext("Show less"),
    moreButtonLabel = gettext("Show more"),
    ariaLabelExpanded = gettext("Show less"),
    ariaLabelCollapsed = gettext("Show more"),
  } = props;
  return /*#__PURE__*/ React.createElement(
    ButtonComponent,
    {
      udStyle: "ghost",
      cssToggleId: inputId,
      className: classNames(styles["focusable-label"], {
        [styles["full-width"]]: fullWidthButton,
      }),
      size: "medium",
      "aria-label": isExpanded ? ariaLabelExpanded : ariaLabelCollapsed,
    },
    /*#__PURE__*/ React.createElement(
      "span",
      null,
      /*#__PURE__*/ React.createElement(
        "span",
        {
          className: classNames(styles["show-more"]),
        },
        moreButtonLabel
      ),
      /*#__PURE__*/ React.createElement(
        "span",
        {
          className: classNames(styles["show-less"]),
        },
        lessButtonLabel
      )
    ),
    !hideIcons &&
      /*#__PURE__*/ React.createElement(ExpandIcon, {
        label: false,
        className: classNames(styles["show-more"]),
      }),
    !hideIcons &&
      /*#__PURE__*/ React.createElement(CollapseIcon, {
        label: false,
        className: classNames(styles["show-less"]),
      })
  );
};
/** React props interface for the ShowMore component */

export /**
 * The ShowMore component.
 *
 * @remarks
 * A collapsible region of text, with button to toggle to an expanded state.
 *
 * @privateRemarks
 * This component works even when JavaScript has not loaded, via the `cssToggleId` mechanism.
 */
let ShowMore =
  observer(
    (_class =
      ((_class2 =
        ((_class3 = class ShowMore extends React.Component {
          constructor(props) {
            var _this$props$defaultEx;

            super(props);
            this.contentContainerRef = void 0;
            this.contentRef = void 0;
            this.inputId = void 0;

            _initializerDefineProperty(
              this,
              "checkOverflow",
              _descriptor,
              this
            );

            _initializerDefineProperty(this, "toggle", _descriptor2, this);

            _initializerDefineProperty(
              this,
              "doesContentOverflow",
              _descriptor3,
              this
            );

            _initializerDefineProperty(this, "isExpanded", _descriptor4, this);

            this.contentContainerRef = /*#__PURE__*/ React.createRef();
            this.contentRef = /*#__PURE__*/ React.createRef();
            this.inputId = getUniqueId("show-more");
            this.isExpanded =
              (_this$props$defaultEx = this.props.defaultExpanded) !== null &&
              _this$props$defaultEx !== void 0
                ? _this$props$defaultEx
                : false;
          }

          componentDidMount() {
            this.checkOverflow();
          }

          componentDidUpdate() {
            this.checkOverflow();
          }

          render() {
            const {
              children,
              className,
              contentClassName,
              collapsedHeight,
              fullWidthButton,
              lessButtonLabel,
              moreButtonLabel,
              ariaLabelExpanded,
              ariaLabelCollapsed,
              buttonComponent,
              withGradient,
              hideIcons,
            } = this.props;
            return /*#__PURE__*/ React.createElement(
              "div",
              {
                className: classNames(className, styles.container),
              },
              /*#__PURE__*/ React.createElement(CheckedStateCheckbox, {
                id: this.inputId,
                onChange: this.toggle,
                defaultChecked: this.isExpanded,
              }),
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  className: classNames(contentClassName, styles.content, {
                    [styles["with-gradient"]]:
                      withGradient && this.doesContentOverflow,
                  }),
                  style: {
                    maxHeight: `${pxToRem(collapsedHeight)}rem`,
                  },
                  ref: this.contentContainerRef,
                },
                /*#__PURE__*/ React.createElement(
                  "div",
                  {
                    tabIndex: this.isExpanded ? 0 : -1,
                    ref: this.contentRef,
                  },
                  children
                )
              ),
              this.doesContentOverflow &&
                buttonComponent !== undefined &&
                fullWidthButton !== undefined &&
                /*#__PURE__*/ React.createElement(ShowMoreButton, {
                  inputId: this.inputId,
                  lessButtonLabel: lessButtonLabel,
                  moreButtonLabel: moreButtonLabel,
                  ariaLabelExpanded: ariaLabelExpanded,
                  ariaLabelCollapsed: ariaLabelCollapsed,
                  buttonComponent: buttonComponent,
                  fullWidthButton: fullWidthButton,
                  hideIcons: !!hideIcons,
                  isExpanded: this.isExpanded,
                })
            );
          }
        }),
        (_class3.defaultProps = {
          defaultExpanded: undefined,
          fullWidthButton: false,
          lessButtonLabel: undefined,
          moreButtonLabel: undefined,
          buttonComponent: Button,
          onToggle: noop,
          withGradient: false,
          hideIcons: false,
          ariaLabelExpanded: undefined,
          ariaLabelCollapsed: undefined,
        }),
        _class3)),
      ((_descriptor = _applyDecoratedDescriptor(
        _class2.prototype,
        "checkOverflow",
        [action],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return () => {
              var _this$contentRef$curr, _this$contentRef$curr2;

              const contentHeight =
                (_this$contentRef$curr =
                  (_this$contentRef$curr2 = this.contentRef.current) === null ||
                  _this$contentRef$curr2 === void 0
                    ? void 0
                    : _this$contentRef$curr2.offsetHeight) !== null &&
                _this$contentRef$curr !== void 0
                  ? _this$contentRef$curr
                  : 0;
              const contentContainerHeight = this.props.collapsedHeight;
              this.doesContentOverflow = contentHeight > contentContainerHeight;
            };
          },
        }
      )),
      (_descriptor2 = _applyDecoratedDescriptor(
        _class2.prototype,
        "toggle",
        [action],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return () => {
              var _this$contentRef$curr3, _this$props$onToggle, _this$props;

              this.isExpanded = !this.isExpanded;
              if (this.isExpanded)
                (_this$contentRef$curr3 = this.contentRef.current) === null ||
                _this$contentRef$curr3 === void 0
                  ? void 0
                  : _this$contentRef$curr3.focus();
              (_this$props$onToggle = (_this$props = this.props).onToggle) ===
                null || _this$props$onToggle === void 0
                ? void 0
                : _this$props$onToggle.call(_this$props, this.isExpanded);
            };
          },
        }
      )),
      (_descriptor3 = _applyDecoratedDescriptor(
        _class2.prototype,
        "doesContentOverflow",
        [observable],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return true;
          },
        }
      )),
      (_descriptor4 = _applyDecoratedDescriptor(
        _class2.prototype,
        "isExpanded",
        [observable],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: null,
        }
      ))),
      _class2))
  ) || _class;
//# sourceMappingURL=show-more.react-component.js.map
