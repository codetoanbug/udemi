import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _class, _class2, _descriptor, _descriptor2, _class3;

import { getUniqueId } from "@udemy/design-system-utils";
import { CheckedStateRadioGroup } from "@udemy/react-checked-state-components";
import { action, observable } from "mobx";
import { observer, Provider } from "mobx-react";
import React from "react";
import { AccordionPanel } from "./accordion-panels/accordion-panel.react-component";
/** The potential sizes of an Accordion component */

export /** The Accordion component */
let Accordion =
  observer(
    (_class =
      ((_class2 =
        ((_class3 = class Accordion extends React.Component {
          constructor(props) {
            var _props$name;

            super(props);
            this.name = void 0;
            this.ref = /*#__PURE__*/ React.createRef();

            _initializerDefineProperty(
              this,
              "selectedPanelId",
              _descriptor,
              this
            );

            _initializerDefineProperty(
              this,
              "setSelectedPanelId",
              _descriptor2,
              this
            );

            this.name =
              (_props$name = props.name) !== null && _props$name !== void 0
                ? _props$name
                : getUniqueId("accordion");
          } // eslint-disable-next-line @typescript-eslint/naming-convention

          render() {
            const {
              toggleBehavior,
              showExpandIcon,
              size,
              ...passthroughProps
            } = this.props;
            const accordion = /*#__PURE__*/ React.createElement(
              Provider,
              {
                $$udAccordion: this,
              },
              /*#__PURE__*/ React.createElement(
                "div",
                Object.assign(
                  {
                    ref: this.ref,
                  },
                  passthroughProps
                )
              )
            );

            if (toggleBehavior === "any") {
              return accordion;
            }

            return /*#__PURE__*/ React.createElement(
              CheckedStateRadioGroup,
              {
                allowToggle: toggleBehavior === "max-one",
                name: this.name,
              },
              accordion
            );
          }
        }),
        (_class3.defaultProps = {
          toggleBehavior: "any",
          showExpandIcon: true,
          size: "large",
        }),
        (_class3.Panel = void 0),
        _class3)),
      ((_descriptor = _applyDecoratedDescriptor(
        _class2.prototype,
        "selectedPanelId",
        [observable],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return null;
          },
        }
      )),
      (_descriptor2 = _applyDecoratedDescriptor(
        _class2.prototype,
        "setSelectedPanelId",
        [action],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return (id) => {
              // Called by Accordion.Panel.
              this.selectedPanelId = id;
            };
          },
        }
      ))),
      _class2))
  ) || _class;
Accordion.Panel = AccordionPanel;
//# sourceMappingURL=accordion.react-component.js.map
