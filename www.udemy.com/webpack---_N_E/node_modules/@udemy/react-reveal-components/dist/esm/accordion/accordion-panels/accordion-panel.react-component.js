import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _dec, _class, _class2, _descriptor, _descriptor2, _class3;

import { Keys, getUniqueId } from "@udemy/design-system-utils";
import ExpandIcon from "@udemy/icons/dist/expand.ud-icon";
import {
  CheckedStateCheckbox,
  CheckedStateRadioGroup,
} from "@udemy/react-checked-state-components";
import { Button } from "@udemy/react-core-components";
import { noop } from "@udemy/shared-utils";
import classNames from "classnames";
import { action, observable } from "mobx";
import { inject, observer } from "mobx-react";
import React from "react";
import styles from "./accordion-panel.module.css";
/**
 * The Udemy Design System typography classes to apply to the AccordionPanel, based off key of {@link AccordionSize}
 *
 * @privateRemarks
 * Used internally by panels, not exposed outside @udemy/react-reveal-components
 */

export const TYPOGRAPHY = {
  medium: "ud-heading-md",
  large: "ud-heading-lg",
  xlarge: "ud-heading-xl",
};
/** React component props for the AccordionPanel component */

export /** The AccordionPanel component. */
let AccordionPanel =
  ((_dec = inject("$$udAccordion")),
  _dec(
    (_class =
      observer(
        (_class =
          ((_class2 =
            ((_class3 = class AccordionPanel extends React.Component {
              constructor(props) {
                var _props$id, _props$titleId;

                super(props);
                this.id = void 0;
                this.titleId = void 0;

                _initializerDefineProperty(
                  this,
                  "_expanded",
                  _descriptor,
                  this
                );

                _initializerDefineProperty(
                  this,
                  "handleChange",
                  _descriptor2,
                  this
                );

                this.handleKeyDown = (event) => {
                  if (
                    event.keyCode === Keys.UP ||
                    event.keyCode === Keys.DOWN
                  ) {
                    var _this$props$$$udAccor;

                    const accordion =
                      (_this$props$$$udAccor = this.props.$$udAccordion) ===
                        null || _this$props$$$udAccor === void 0
                        ? void 0
                        : _this$props$$$udAccor.ref.current;

                    if (accordion) {
                      var _targetToggler$focus;

                      event.preventDefault();
                      const togglers = Array.from(
                        accordion.querySelectorAll(".js-panel-toggler")
                      );
                      const thisIndex = togglers.findIndex(
                        (toggler) => toggler === event.currentTarget
                      );
                      const targetIndex =
                        thisIndex + (event.keyCode === Keys.UP ? -1 : 1);
                      const targetToggler =
                        togglers[
                          (targetIndex + togglers.length) % togglers.length
                        ];
                      targetToggler === null || targetToggler === void 0
                        ? void 0
                        : (_targetToggler$focus = targetToggler.focus) ===
                            null || _targetToggler$focus === void 0
                        ? void 0
                        : _targetToggler$focus.call(targetToggler);
                    }
                  }
                };

                this.id =
                  (_props$id = props.id) !== null && _props$id !== void 0
                    ? _props$id
                    : getUniqueId("accordion-panel");
                this.titleId =
                  (_props$titleId = props.titleId) !== null &&
                  _props$titleId !== void 0
                    ? _props$titleId
                    : getUniqueId("accordion-panel-title");

                if (this.props.defaultExpanded) {
                  var _this$props$$$udAccor2;

                  this._expanded = true;
                  (_this$props$$$udAccor2 = this.props.$$udAccordion) ===
                    null || _this$props$$$udAccor2 === void 0
                    ? void 0
                    : _this$props$$$udAccor2.setSelectedPanelId(this.id);
                }
              }

              componentDidUpdate(prevProps) {
                if (
                  this.props.expanded !== prevProps.expanded &&
                  this.props.expanded !== this._expanded
                ) {
                  this.handleChange({
                    target: {
                      id: this.id,
                      dataset: {
                        checked: this.props.expanded ? "checked" : "",
                      },
                    },
                  });
                }
              }

              get expanded() {
                var _this$props$$$udAccor3, _this$props$$$udAccor4;

                if (this.props.expanded !== undefined) {
                  return this.props.expanded;
                }

                if (
                  ((_this$props$$$udAccor3 = this.props.$$udAccordion) ===
                    null || _this$props$$$udAccor3 === void 0
                    ? void 0
                    : _this$props$$$udAccor3.props.toggleBehavior) === "any"
                ) {
                  return this._expanded;
                }

                return (
                  this.id ===
                  ((_this$props$$$udAccor4 = this.props.$$udAccordion) ===
                    null || _this$props$$$udAccor4 === void 0
                    ? void 0
                    : _this$props$$$udAccor4.selectedPanelId)
                );
              }

              render() {
                const {
                  children,
                  className,
                  defaultExpanded,
                  expanded,
                  toggleStrategy,
                  onToggle,
                  title,
                  renderTitle,
                  $$udAccordion,
                  id,
                  titleId,
                  ...props
                } = this.props;
                const { toggleBehavior, showExpandIcon, size } =
                  $$udAccordion === null || $$udAccordion === void 0
                    ? void 0
                    : $$udAccordion.props;
                const typography = TYPOGRAPHY[size];
                const Input =
                  toggleBehavior === "any"
                    ? CheckedStateCheckbox
                    : CheckedStateRadioGroup.Radio;
                const toggler = /*#__PURE__*/ React.createElement(
                  Button,
                  {
                    "aria-disabled":
                      toggleBehavior === "always-one" ? this.expanded : false,
                    "aria-expanded": this.expanded,
                    className: classNames(
                      "js-panel-toggler",
                      styles["panel-toggler"]
                    ),
                    id: this.titleId,
                    onKeyDown: this.handleKeyDown,
                    typography: typography,
                    udStyle: "link",
                  },
                  /*#__PURE__*/ React.createElement(
                    "span",
                    {
                      className: "ud-accordion-panel-title",
                    },
                    title
                  )
                );
                return /*#__PURE__*/ React.createElement(
                  "div",
                  Object.assign({}, props, {
                    className: classNames(styles.panel, className),
                  }),
                  /*#__PURE__*/ React.createElement(Input, {
                    id: this.id,
                    checked: this.expanded,
                    onChange: this.handleChange,
                  }),
                  /*#__PURE__*/ React.createElement(
                    Button,
                    {
                      componentClass: "div",
                      className: classNames(
                        "ud-accordion-panel-toggler",
                        styles["panel-toggler"],
                        styles["outer-panel-toggler"]
                      ),
                      cssToggleId: this.id,
                      typography: typography,
                      udStyle: "link",
                    },
                    renderTitle === null || renderTitle === void 0
                      ? void 0
                      : renderTitle({
                          className: "ud-accordion-panel-heading",
                          children: toggler,
                        }),
                    showExpandIcon &&
                      /*#__PURE__*/ React.createElement(ExpandIcon, {
                        className: styles["expand-icon"],
                        label: false,
                        color: "neutral",
                        size: size === "xlarge" ? "medium" : "small",
                      })
                  ),
                  (toggleStrategy === "show-hide" || this.expanded) &&
                    /*#__PURE__*/ React.createElement(
                      "div",
                      {
                        className: styles["content-wrapper"],
                        "aria-labelledby": this.titleId,
                        "aria-hidden": !this.expanded,
                        role: "group",
                      },
                      /*#__PURE__*/ React.createElement(
                        "div",
                        {
                          className: classNames(
                            "ud-accordion-panel-content",
                            styles.content
                          ),
                        },
                        children
                      )
                    )
                );
              }
            }),
            (_class3.defaultProps = {
              renderTitle: (_ref) => {
                let { children, ...props } = _ref;
                return /*#__PURE__*/ React.createElement("h3", props, children);
              },
              className: "",
              defaultExpanded: undefined,
              expanded: undefined,
              toggleStrategy: "show-hide",
              onToggle: noop,
            }),
            (_class3.$$udType = "Accordion.Panel"),
            _class3)),
          ((_descriptor = _applyDecoratedDescriptor(
            _class2.prototype,
            "_expanded",
            [observable],
            {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              },
            }
          )),
          (_descriptor2 = _applyDecoratedDescriptor(
            _class2.prototype,
            "handleChange",
            [action],
            {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return (event) => {
                  var _this$props$$$udAccor5, _this$props$onToggle, _this$props;

                  this._expanded = !!event.target.dataset.checked;
                  const selectedPanelId = this._expanded ? this.id : null;
                  (_this$props$$$udAccor5 = this.props.$$udAccordion) ===
                    null || _this$props$$$udAccor5 === void 0
                    ? void 0
                    : _this$props$$$udAccor5.setSelectedPanelId(
                        selectedPanelId
                      );
                  (_this$props$onToggle = (_this$props = this.props)
                    .onToggle) === null || _this$props$onToggle === void 0
                    ? void 0
                    : _this$props$onToggle.call(
                        _this$props,
                        this._expanded,
                        event
                      );
                };
              },
            }
          ))),
          _class2))
      ) || _class)
  ) || _class);
//# sourceMappingURL=accordion-panel.react-component.js.map
