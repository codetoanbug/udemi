import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";

var _class, _class2, _descriptor, _descriptor2, _class3;

import {
  getUniqueId,
  RootCloseWrapperContext,
} from "@udemy/design-system-utils";
import { withI18n } from "@udemy/i18n";
import CloseIcon from "@udemy/icons/dist/close.ud-icon";
import {
  isChecked,
  CheckedStateCheckbox,
} from "@udemy/react-checked-state-components";
import { IconButton } from "@udemy/react-core-components";
import { PopperModalContext } from "@udemy/react-popup-components";
import { MainContentLoader } from "@udemy/react-reveal-components";
import { noop } from "@udemy/shared-utils";
import classNames from "classnames";
import { action, observable } from "mobx";
import { observer } from "mobx-react";
import React, { useContext, useEffect } from "react";
import ReactDOM from "react-dom";
import { FocusTrappingDialog } from "../focus-trapping-dialog/focus-trapping-dialog.react-component";
import {
  FullPageOverlay,
  EXIT_ANIMATION_DURATION_MS,
} from "../full-page-overlay/full-page-overlay.react-component";
import styles from "./modal.module.css";
/**
 * Component props for `Modal`.
 */

const defaultGetContainer = () => document.body;
/**
 * Modal dialog component
 */

let ModalBase =
  observer(
    (_class =
      ((_class2 =
        ((_class3 = class ModalBase extends React.Component {
          constructor() {
            super(...arguments);
            this.containerRef = /*#__PURE__*/ React.createRef();
            this.dialogRef = /*#__PURE__*/ React.createRef();
            this.id = getUniqueId("modal");
            this.labelledById = getUniqueId("modal-title");

            _initializerDefineProperty(
              this,
              "onChangeIsOpen",
              _descriptor,
              this
            );

            _initializerDefineProperty(
              this,
              "shouldRenderClosedModal",
              _descriptor2,
              this
            );

            this.onChange = (event) => {
              if (this.props.onOpen && this.props.onClose) {
                this.toggle(
                  isChecked(event),
                  this.props.onOpen,
                  this.props.onClose
                );
              }
            };

            this.renderTitle = (_ref) => {
              let { title } = _ref;
              const titleNode = /*#__PURE__*/ React.createElement(
                "div",
                {
                  className: classNames({
                    [styles["title-spacer"]]: !this.props.requireExplicitAction,
                  }),
                },
                /*#__PURE__*/ React.createElement(
                  FocusTrappingDialog.Title,
                  {
                    id: this.labelledById,
                    className: "ud-modal-title",
                    show: true,
                  },
                  title
                )
              );
              return [this.labelledById, titleNode];
            };
          }

          componentDidMount() {
            if (this.props.isOpen) {
              this.toggle(true, noop, noop);
            }
          }

          componentDidUpdate(prevProps) {
            if (
              this.props.isOpen !== prevProps.isOpen &&
              this.props.isOpen !== this.onChangeIsOpen
            ) {
              // Do not call onClose; see https://github.com/udemy/website-django/pull/61831.
              if (this.props.onOpen) {
                this.toggle(this.props.isOpen, this.props.onOpen, noop);
              }
            }
          }

          toggle(isOpen, onOpen, onClose) {
            var _this$dialogRef;

            this.onChangeIsOpen = isOpen;
            this.shouldRenderClosedModal = !this.props.fullPage;

            if (
              (_this$dialogRef = this.dialogRef) !== null &&
              _this$dialogRef !== void 0 &&
              _this$dialogRef.current
            ) {
              // Pass the modal container as the scrollable container
              this.dialogRef.current.onToggle(
                isOpen,
                this.containerRef.current
              );
            }

            this.onChangeIsOpen ? onOpen() : onClose();

            if (!this.onChangeIsOpen) {
              setTimeout(
                action(() => {
                  this.shouldRenderClosedModal = false;
                }),
                EXIT_ANIMATION_DURATION_MS
              );
            }
          }

          render() {
            var _this$props$renderTit, _this$props$getContai;

            const {
              className,
              children,
              fullPage,
              isOpen,
              loading,
              requireExplicitAction,
            } = this.props;

            if (
              typeof document === "undefined" ||
              (!isOpen && !this.shouldRenderClosedModal)
            ) {
              return null;
            }

            const [labelledById, title] = (
              (_this$props$renderTit = this.props.renderTitle) !== null &&
                _this$props$renderTit !== void 0
                ? _this$props$renderTit
                : this.renderTitle
            )(this.props);
            const modal = /*#__PURE__*/ React.createElement(
              ModalContainer,
              {
                containerRef: this.containerRef,
              },
              /*#__PURE__*/ React.createElement(CheckedStateCheckbox, {
                id: this.id,
                className: "ud-full-page-overlay-checkbox",
                closeOnEscape: true,
                checked: this.onChangeIsOpen,
                onChange: this.onChange,
              }),
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  className: classNames(
                    "ud-full-page-overlay-container",
                    styles["scroll-wrapper"],
                    {
                      [styles["desktop-centered"]]: !fullPage,
                    }
                  ),
                },
                !fullPage &&
                  /*#__PURE__*/ React.createElement(FullPageOverlay, {
                    cssToggleId: requireExplicitAction ? undefined : this.id,
                    className: styles.overlay,
                  }),
                /*#__PURE__*/ React.createElement(
                  FocusTrappingDialog,
                  {
                    ref: this.dialogRef,
                    labelledById: labelledById,
                    className: classNames(
                      className,
                      "ud-modal",
                      styles.dialog,
                      fullPage ? styles["full-size"] : styles["default-size"],
                      {
                        [styles["dialog-loading"]]: loading,
                      }
                    ),
                  },
                  loading &&
                    /*#__PURE__*/ React.createElement(MainContentLoader, {
                      color: "inherit",
                      className: styles.loader,
                    }),
                  !loading && title,
                  !loading && children,
                  !requireExplicitAction &&
                    /*#__PURE__*/ React.createElement(
                      IconButton,
                      {
                        cssToggleId: this.id,
                        udStyle: "ghost",
                        size: "medium",
                        className: classNames(
                          "ud-modal-close",
                          styles["close-button"]
                        ),
                        "data-purpose": "close-popup",
                      },
                      /*#__PURE__*/ React.createElement(CloseIcon, {
                        color: "neutral",
                        label: this.props.gettext("close modal"),
                      })
                    )
                )
              )
            ); // Explicitly fall back to default; otherwise TS would either force a cast or
            // prevent a call to ReactDOM.createPortal with an undefined second argument.

            const getContainer =
              (_this$props$getContai = this.props.getContainer) !== null &&
              _this$props$getContai !== void 0
                ? _this$props$getContai
                : defaultGetContainer;
            return /*#__PURE__*/ ReactDOM.createPortal(modal, getContainer());
          }
        }),
        (_class3.displayName = "Modal"),
        (_class3.defaultProps = {
          requireExplicitAction: false,
          onClose: noop,
          onOpen: noop,
          fullPage: false,
          loading: false,
          className: undefined,
          getContainer: defaultGetContainer,
          renderTitle: undefined,
        }),
        _class3)),
      ((_descriptor = _applyDecoratedDescriptor(
        _class2.prototype,
        "onChangeIsOpen",
        [observable],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return false;
          },
        }
      )),
      (_descriptor2 = _applyDecoratedDescriptor(
        _class2.prototype,
        "shouldRenderClosedModal",
        [observable],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return false;
          },
        }
      )),
      _applyDecoratedDescriptor(
        _class2.prototype,
        "toggle",
        [action],
        Object.getOwnPropertyDescriptor(_class2.prototype, "toggle"),
        _class2.prototype
      )),
      _class2))
  ) || _class;

export const Modal = withI18n(ModalBase);

/**
 * Internal component to handle Modal in Popover edge cases
 *
 * @remarks
 * inside quick view box popover. In particular:
 * - If you click on the modal, it should not count as "root closing" the parent popover.
 * - If you hover on the modal, it should not count as hovering on the parent popover.
 *
 * @internal
 */
const ModalContainer = (_ref2) => {
  let { containerRef, children } = _ref2;
  const { onMount, onUnmount } = useContext(PopperModalContext);
  const { ignoreRootClose } = useContext(RootCloseWrapperContext);
  useEffect(() => {
    onMount();
    return () => {
      onUnmount();
    };
  }, [onMount, onUnmount]);
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    /*#__PURE__*/ React.createElement(
      "div",
      {
        ref: containerRef,
        onClick: ignoreRootClose,
        className: styles["dialog-container"],
      },
      children
    )
  );
};
//# sourceMappingURL=modal.react-component.js.map
