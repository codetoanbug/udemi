import { getUniqueId } from "@udemy/design-system-utils";
import { withI18n } from "@udemy/i18n";
import {
  CheckedStateCheckbox,
  isChecked,
} from "@udemy/react-checked-state-components";
import { noop } from "@udemy/shared-utils";
import classNames from "classnames";
import React from "react";
import ReactDOM from "react-dom";
import { DialogCloseButton } from "../dialog-close-button/dialog-close-button.react-component";
import { FocusTrappingDialog } from "../focus-trapping-dialog/focus-trapping-dialog.react-component";
import { FullPageOverlay } from "../full-page-overlay/full-page-overlay.react-component";
import styles from "./bottom-drawer.module.css";
/** React props interface for Bottom Drawer */

/** The BottomDrawer component */
class BottomDrawerBase extends React.Component {
  constructor(props) {
    super(props);
    this.gettext = void 0;
    this.dialogRef = void 0;
    this.labelledById = void 0;
    this.onChangeChecked = void 0;
    this.scrollableContentDiv = /*#__PURE__*/ React.createRef();

    this.onChange = (event) => {
      if (this.scrollableContentDiv.current) {
        var _this$dialogRef$curre;

        (_this$dialogRef$curre = this.dialogRef.current) === null ||
        _this$dialogRef$curre === void 0
          ? void 0
          : _this$dialogRef$curre.onToggle(
              isChecked(event),
              this.scrollableContentDiv.current
            );
      }

      const { onClose, onOpen } = this.props;
      this.onChangeChecked = !!event.target.dataset.checked;
      this.onChangeChecked
        ? onOpen === null || onOpen === void 0
          ? void 0
          : onOpen()
        : onClose === null || onClose === void 0
        ? void 0
        : onClose();
    };

    this.gettext = props.gettext;
    this.dialogRef = /*#__PURE__*/ React.createRef();
    this.labelledById = getUniqueId("bottom-drawer-title");
    this.onChangeChecked = false;
  }

  componentDidUpdate(prevProps) {
    const scrollableElement = this.scrollableContentDiv.current;

    if (
      this.props.isOpen !== prevProps.isOpen &&
      this.props.isOpen !== this.onChangeChecked
    ) {
      if (scrollableElement) {
        var _this$dialogRef$curre2;

        (_this$dialogRef$curre2 = this.dialogRef.current) === null ||
        _this$dialogRef$curre2 === void 0
          ? void 0
          : _this$dialogRef$curre2.onToggle(
              !!this.props.isOpen,
              scrollableElement
            );
      }
    }
  }

  render() {
    const { id, children, className, isOpen, showTitle, title } = this.props;

    if (typeof document === "undefined") {
      return null;
    }

    const drawer = /*#__PURE__*/ React.createElement(
      "div",
      {
        className: className,
      },
      /*#__PURE__*/ React.createElement(CheckedStateCheckbox, {
        id: id,
        checked: isOpen,
        className: classNames(
          "ud-full-page-overlay-checkbox",
          styles["bottom-drawer-checkbox"]
        ),
        closeOnEscape: true,
        onChange: this.onChange,
      }),
      /*#__PURE__*/ React.createElement(FullPageOverlay, {
        cssToggleId: id,
      }),
      /*#__PURE__*/ React.createElement(
        FocusTrappingDialog,
        {
          ref: this.dialogRef,
          labelledById: this.labelledById,
          className: styles["bottom-drawer-container"],
        },
        /*#__PURE__*/ React.createElement(
          "div",
          {
            ref: this.scrollableContentDiv,
            "data-purpose": "content",
            className: classNames("ud-bottom-drawer-content", styles.content),
          },
          /*#__PURE__*/ React.createElement(
            FocusTrappingDialog.Title,
            {
              id: this.labelledById,
              className: styles["bottom-drawer-title"],
              show: !!showTitle,
            },
            title
          ),
          children
        ),
        /*#__PURE__*/ React.createElement(DialogCloseButton, {
          id: id,
          label: this.gettext("Close bottom drawer"),
          className: styles["close-btn"],
        })
      )
    );
    return /*#__PURE__*/ ReactDOM.createPortal(drawer, document.body);
  }
}

BottomDrawerBase.displayName = "BottomDrawer";
BottomDrawerBase.propTypes = {};
BottomDrawerBase.defaultProps = {
  showTitle: true,
  isOpen: false,
  onClose: noop,
  onOpen: noop,
};
export const BottomDrawer = withI18n(BottomDrawerBase);
//# sourceMappingURL=bottom-drawer.react-component.js.map
