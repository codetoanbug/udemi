import {
  getUniqueId,
  exceptionElements,
  unlockPageScroll,
} from "@udemy/design-system-utils";
import { useI18n } from "@udemy/i18n";
import {
  CheckedStateCheckbox,
  CheckedStateRadioGroup,
  isChecked,
} from "@udemy/react-checked-state-components";
import classNames from "classnames";
import React, { useRef, useState } from "react";
import { DialogCloseButton } from "../dialog-close-button/dialog-close-button.react-component";
import { FocusTrappingDialog } from "../focus-trapping-dialog/focus-trapping-dialog.react-component";
import { FullPageOverlay } from "../full-page-overlay/full-page-overlay.react-component";
import { SideDrawerRadio } from "../side-drawer-radio/side-drawer-radio.react-component";
import { findFirstFocusable } from "./helpers";
import styles from "./side-drawer.module.css";
/** React props interface for the SideDrawer component */

export const SideDrawerContext = /*#__PURE__*/ React.createContext(
  /*#__PURE__*/ React.createRef()
);
/**
 * The SideDrawer component.
 *
 * @remarks
 * Renders a side drawer that slides in from either the left or right side.
 *
 * The drawer may have sub-drawers
 * @see {@link SubDrawer}
 *
 * @privateRemarks
 * Under the hood, it uses HTML labels, checkboxes, and radio groups to toggle the whole drawer
 * and the sub-drawers. As such, each drawer needs an id.
 */

export const SideDrawer = /*#__PURE__*/ React.forwardRef(
  (_ref, sideDrawerRef) => {
    let {
      className,
      children,
      id,
      mainDrawerId,
      onToggle,
      side,
      subDrawers,
      title,
      ...drawerProps
    } = _ref;
    const { gettext } = useI18n();
    const name = `${id}-radio-group`;
    const dialogRef = useRef(null);
    const drawerRef = useRef(null);
    const [labelledById] = useState(getUniqueId("side-drawer-title"));

    const onChange = (event) => {
      var _dialogRef$current;

      const isOpen = isChecked(event);
      (_dialogRef$current = dialogRef.current) === null ||
      _dialogRef$current === void 0
        ? void 0
        : _dialogRef$current.onToggle(isChecked(event), drawerRef.current);

      if (!isOpen) {
        var _drawerRef$current, _drawerContainer$quer;

        const drawerContainer =
          (_drawerRef$current = drawerRef.current) === null ||
          _drawerRef$current === void 0
            ? void 0
            : _drawerRef$current.parentNode;
        Array.from(
          (_drawerContainer$quer =
            drawerContainer === null || drawerContainer === void 0
              ? void 0
              : drawerContainer.querySelectorAll(".js-drawer > div")) !==
            null && _drawerContainer$quer !== void 0
            ? _drawerContainer$quer
            : []
        ).forEach((drawer) => {
          exceptionElements.has(drawer) && unlockPageScroll(drawer);
        });
      }

      onToggle === null || onToggle === void 0 ? void 0 : onToggle(isOpen);
    };

    return /*#__PURE__*/ React.createElement(
      SideDrawerContext.Provider,
      {
        value: dialogRef,
      },
      /*#__PURE__*/ React.createElement(
        CheckedStateRadioGroup,
        {
          name: name,
        },
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: styles["dialog-container"],
          },
          /*#__PURE__*/ React.createElement(CheckedStateCheckbox, {
            id: id,
            className: classNames(
              "ud-full-page-overlay-checkbox",
              styles["main-drawer-checkbox"]
            ),
            closeOnEscape: true,
            onChange: onChange,
          }),
          /*#__PURE__*/ React.createElement(FullPageOverlay, {
            cssToggleId: id,
          }),
          /*#__PURE__*/ React.createElement(SideDrawerRadio, {
            id: mainDrawerId,
            defaultChecked: true,
          }),
          /*#__PURE__*/ React.createElement(
            FocusTrappingDialog,
            Object.assign({}, drawerProps, {
              ref: dialogRef,
              labelledById: labelledById,
              findFirstFocusable: findFirstFocusable,
              className: classNames("js-drawer", styles["side-drawer"], {
                [styles["side-left"]]: side === "left",
                [styles["side-right"]]: side === "right",
              }),
            }),
            /*#__PURE__*/ React.createElement(
              "nav",
              {
                className: styles["drawer-container"],
                ref: sideDrawerRef,
              },
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  ref: drawerRef,
                  className: classNames(className, styles["drawer-content"]),
                },
                /*#__PURE__*/ React.createElement(
                  FocusTrappingDialog.Title,
                  {
                    id: labelledById,
                    show: false,
                  },
                  title
                ),
                children
              ),
              subDrawers
            ),
            /*#__PURE__*/ React.createElement(DialogCloseButton, {
              className: styles["close-btn"],
              id: id,
              label: gettext("Close side drawer"),
            })
          )
        )
      )
    );
  }
);
SideDrawer.displayName = "SideDrawer";
//# sourceMappingURL=side-drawer.react-component.js.map
