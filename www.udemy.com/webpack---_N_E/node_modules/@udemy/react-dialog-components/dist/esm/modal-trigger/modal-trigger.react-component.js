import { observer } from "mobx-react";
import React, { useState } from "react";
/**
 * Props passed through in {@link ModalTriggerProps.renderModal}
 */

/**
 * ModalTrigger convenience component for managing the open/close
 * state of a modal.
 *
 * @remarks
 *
 * This component will intercept the click handler of the React element
 * passed with the `trigger` prop.
 */
export const ModalTrigger = Object.assign(
  observer((_ref) => {
    let { trigger, renderModal, ...props } = _ref;
    const [isOpen, setIsOpen] = useState(false);

    const onOpen = (event) => {
      var _trigger$props$onClic, _trigger$props;

      setIsOpen(true);
      (_trigger$props$onClic = (_trigger$props = trigger.props).onClick) ===
        null || _trigger$props$onClic === void 0
        ? void 0
        : _trigger$props$onClic.call(_trigger$props, event);
    };

    const onClose = () => {
      var _props$onClose;

      setIsOpen(false);
      (_props$onClose = props.onClose) === null || _props$onClose === void 0
        ? void 0
        : _props$onClose.call(props);
    };

    return /*#__PURE__*/ React.createElement(
      React.Fragment,
      null,
      /*#__PURE__*/ React.cloneElement(trigger, {
        onClick: onOpen,
      }),
      renderModal({
        isOpen,
        onClose,
      })
    );
  }),
  {
    displayName: "ModalTrigger",
  }
);
//# sourceMappingURL=modal-trigger.react-component.js.map
