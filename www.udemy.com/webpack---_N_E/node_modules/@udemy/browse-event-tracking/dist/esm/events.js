import { ClientEvent } from "@udemy/event-tracking";
import { getRequestData } from "@udemy/shared-utils";

/**
 * Provides additional properties
 * for any object that can be tracked
 */

/**
 * A minimal representation of a buyable, or purchasable, item
 * used for event tracking
 */

// TODO: Move to browse/components/badge/course-badges.react-component.js once converted to Typescript

/**
 * Auto Complete Item for eventing
 */

export let BackendSourceOptions = /*#__PURE__*/ (function (
  BackendSourceOptions
) {
  BackendSourceOptions["DISCOVERY"] = "discovery";
  BackendSourceOptions["TAUGHT_COURSES"] = "taught_courses";
  BackendSourceOptions["USER_PROFILE_COURSES"] = "user_profile_courses";
  BackendSourceOptions["USER_WISHLISTED_COURSES"] = "user_wishlisted_courses";
  BackendSourceOptions["USER_COLLECTIONS"] = "user_collections";
  BackendSourceOptions["RELATED_LECTURES"] = "related_lectures";
  BackendSourceOptions["SHOPPING_CARTS"] = "shopping_carts";
  BackendSourceOptions["DISCOVERY_ALL_COURSES"] = "discovery_all_courses";
  BackendSourceOptions["SEARCH_RECOMMENDATIONS"] = "search_recommendations";
  return BackendSourceOptions;
})({});

/**
 * Fired when a discovery item is seen by a user
 */
export class DiscoveryItemImpressionEvent extends ClientEvent {
  constructor(_ref) {
    var _badgeFamilies$map;
    let {
      id,
      type,
      trackingId,
      serveTrackingId,
      backendSource,
      position,
      badgeFamilies,
      relatedSourceId,
      relatedSourceType,
      uiRegion = null,
    } = _ref;
    super("DiscoveryItemImpressionEvent");
    this.id = void 0;
    this.type = void 0;
    this.trackingId = void 0;
    this.serveTrackingId = void 0;
    this.backendSource = void 0;
    this.position = void 0;
    this.badges = void 0;
    this.relatedSourceId = void 0;
    this.relatedSourceType = void 0;
    this.uiRegion = void 0;
    this.id = id;
    this.type = type;
    this.trackingId = trackingId;
    this.serveTrackingId = serveTrackingId;
    this.backendSource = backendSource;
    this.position = position;
    this.badges =
      (_badgeFamilies$map =
        badgeFamilies === null || badgeFamilies === void 0
          ? void 0
          : badgeFamilies.map((family) => ({
              family,
            }))) !== null && _badgeFamilies$map !== void 0
        ? _badgeFamilies$map
        : null;
    this.relatedSourceId = relatedSourceId;
    this.relatedSourceType = relatedSourceType;
    this.uiRegion = uiRegion;
  }
}

/**
 * Fired when a discovery item is clicked by a user
 */
DiscoveryItemImpressionEvent.backendSourceOptions = {
  DISCOVERY: BackendSourceOptions.DISCOVERY,
  TAUGHT_COURSES: BackendSourceOptions.TAUGHT_COURSES,
  USER_PROFILE_COURSES: BackendSourceOptions.USER_PROFILE_COURSES,
  USER_WISHLISTED_COURSES: BackendSourceOptions.USER_WISHLISTED_COURSES,
  USER_COLLECTIONS: BackendSourceOptions.USER_COLLECTIONS,
  RELATED_LECTURES: BackendSourceOptions.RELATED_LECTURES,
  SHOPPING_CARTS: BackendSourceOptions.SHOPPING_CARTS,
  DISCOVERY_ALL_COURSES: BackendSourceOptions.DISCOVERY_ALL_COURSES,
  SEARCH_RECOMMENDATIONS: BackendSourceOptions.SEARCH_RECOMMENDATIONS,
};
export class DiscoveryItemClickEvent extends ClientEvent {
  constructor(_ref2) {
    var _badgeFamilies$map2;
    let {
      id,
      type,
      trackingId,
      serveTrackingId,
      backendSource,
      position = 0,
      badgeFamilies,
      uiRegion = null,
    } = _ref2;
    super("DiscoveryItemClickEvent");
    this.id = void 0;
    this.type = void 0;
    this.trackingId = void 0;
    this.serveTrackingId = void 0;
    this.backendSource = void 0;
    this.position = void 0;
    this.badges = void 0;
    this.uiRegion = void 0;
    this.id = id;
    this.type = type;
    this.trackingId = trackingId;
    this.serveTrackingId = serveTrackingId;
    this.backendSource = backendSource;
    this.position = position;
    this.badges =
      (_badgeFamilies$map2 =
        badgeFamilies === null || badgeFamilies === void 0
          ? void 0
          : badgeFamilies.map((family) => ({
              family,
            }))) !== null && _badgeFamilies$map2 !== void 0
        ? _badgeFamilies$map2
        : null;
    this.uiRegion = uiRegion;
  }
}

/**
 * Fired when a discovery unit is seen by a user
 */
export class DiscoveryUnitViewEvent extends ClientEvent {
  constructor(_ref3) {
    let { trackingId, unitTitle, renderType } = _ref3;
    super("DiscoveryUnitViewEvent");
    this.trackingId = void 0;
    this.title = void 0;
    this.renderType = void 0;
    this.trackingId = trackingId;
    this.title = unitTitle;
    this.renderType = renderType;
  }
}

/**
 This event is fired when a user sees any UFB notice link on a marketplace page
 **/
export class UFBNoticeImpressionEvent extends ClientEvent {
  constructor(_ref4) {
    let { locale = getRequestData().locale, placement, url = null } = _ref4;
    super("UFBNoticeImpressionEvent");
    this.locale = void 0;
    this.placement = void 0;
    this.url = void 0;
    this.locale = locale;
    this.placement = placement;
    this.url = url;
  }
  get eventLocale() {
    return this.locale;
  }
  get eventPlacement() {
    return this.placement;
  }
}
export let UFBNoticeVariant = /*#__PURE__*/ (function (UFBNoticeVariant) {
  UFBNoticeVariant["TEAM_ACCESS"] = "team_access";
  UFBNoticeVariant["COURSES_AND_CERTS"] = "courses_and_certs";
  UFBNoticeVariant["COMPANIES_TRUST"] = "companies_trust";
  UFBNoticeVariant["COURSES_AND_PATHS"] = "courses_and_paths";
  return UFBNoticeVariant;
})({});

/**
 This event is fired when a user clicks on any UFB notice link on a marketplace page
 */
export class UFBNoticeClickEvent extends ClientEvent {
  constructor(_ref5) {
    let {
      locale = getRequestData().locale,
      placement,
      variant = null,
      url = null,
    } = _ref5;
    super("UFBNoticeClickEvent");
    this.locale = void 0;
    this.placement = void 0;
    this.variant = void 0;
    this.url = void 0;
    this.locale = locale;
    this.placement = placement;
    this.variant = variant;
    this.url = url;
  }
  get eventLocale() {
    return this.locale;
  }
  get eventPlacement() {
    return this.placement;
  }
  get eventVariant() {
    return this.variant;
  }
}

/**
 * Fired when user clicks the 'Buy Now' button
 */
export class BuyNowEvent extends ClientEvent {
  constructor(_ref6) {
    let { buyable } = _ref6;
    super("BuyNowEvent");
    this.buyable = void 0;
    this.buyable = buyable;
  }
}

/**
 * Fired when user clicks the 'Enroll now' button
 */
export class EnrollNowEvent extends ClientEvent {
  constructor(_ref7) {
    let { buyable } = _ref7;
    super("EnrollNowEvent");
    this.buyable = void 0;
    this.buyable = buyable;
  }
}

/**
 * Fired when quick view is viewed by a user
 */
export class QuickViewBoxOpenEvent extends ClientEvent {
  constructor(_ref8) {
    let { id, type, trackingId } = _ref8;
    super("QuickViewBoxOpenEvent");
    this.id = void 0;
    this.type = void 0;
    this.trackingId = void 0;
    this.id = id;
    this.trackingId = trackingId;
    this.type = type;
  }
}

/**
 * Fired when user clicks the 'Wishlist' button
 */
export class WishlistEvent extends ClientEvent {
  constructor(_ref9) {
    let { id, trackingId } = _ref9;
    super("WishlistEvent");
    this.id = void 0;
    this.trackingId = void 0;
    this.id = id;
    this.trackingId = trackingId;
  }
}

/**
 * Fire when an auto-complete item is clicked
 */
export class AutoCompleteItemClickEvent extends ClientEvent {
  constructor(_ref10) {
    let { resultTrackingId, autoCompleteItem } = _ref10;
    super("AutoCompleteItemClickEvent");
    this.resultTrackingId = void 0;
    this.autoCompleteItem = void 0;
    this.resultTrackingId = resultTrackingId;
    this.autoCompleteItem = autoCompleteItem;
  }
}

/**
 * Fired when auto-complete results are displayed to user
 */
export class AutoCompleteResultImpressionEvent extends ClientEvent {
  constructor(_ref11) {
    let { resultTrackingId, query } = _ref11;
    super("AutoCompleteResultImpressionEvent");
    this.resultTrackingId = void 0;
    this.query = void 0;
    this.resultTrackingId = resultTrackingId;
    this.query = query;
  }
}

/**
 * Fired when user bounces from auto-complete results
 */
export class AutoCompleteResultBounceEvent extends ClientEvent {
  constructor(_ref12) {
    let { resultTrackingId } = _ref12;
    super("AutoCompleteResultBounceEvent");
    this.resultTrackingId = void 0;
    this.resultTrackingId = resultTrackingId;
  }
}

/**
 * Fired when user switches to MX or consumer subscription only courses in search and browse pages.
 */

export class CollectionTypeSwitchEvent extends ClientEvent {
  constructor(_ref13) {
    let { query, resultCount, toCollectionType, fromCollectionType } = _ref13;
    super("CollectionTypeSwitchEvent");
    this.query = void 0;
    this.resultCount = void 0;
    this.fromCollectionType = void 0;
    this.toCollectionType = void 0;
    this.query = query;
    this.resultCount = resultCount;
    this.fromCollectionType = fromCollectionType;
    this.toCollectionType = toCollectionType;
  }
}

/**
 * Fires when a user manually changes the language sort option provided by search QLI
 */
export class SearchInferenceLanguageChangeEvent extends ClientEvent {
  constructor(language, trackingId) {
    super("SearchInferenceLanguageChangeEvent");
    this.language = language;
    this.trackingId = trackingId;
  }
}

/**
 *  Fired when filters are applied on course directory in search and browse pages.
 */

export class DirectoryFilterChangeEvent extends ClientEvent {
  constructor(_ref14) {
    let { query, aggregation, option, isCheckedOnClick } = _ref14;
    super("DirectoryFilterChangeEvent");
    this.query = void 0;
    this.aggregation = void 0;
    this.option = void 0;
    this.isCheckedOnClick = void 0;
    this.query = query;
    this.aggregation = aggregation;
    this.option = option;
    this.isCheckedOnClick = isCheckedOnClick;
  }
}
export class OccupationCardImpressionEvent extends ClientEvent {
  constructor(_ref15) {
    let { occupationId, occupationName, index, uiRegion } = _ref15;
    super("OccupationCardImpressionEvent");
    this.occupationId = void 0;
    this.occupationName = void 0;
    this.index = void 0;
    this.uiRegion = void 0;
    this.occupationId = occupationId;
    this.occupationName = occupationName;
    this.index = index;
    this.uiRegion = uiRegion;
  }
}
export class OccupationCardClickEvent extends ClientEvent {
  constructor(_ref16) {
    let { occupationId, occupationName, index, uiRegion } = _ref16;
    super("OccupationCardClickEvent");
    this.occupationId = void 0;
    this.occupationName = void 0;
    this.index = void 0;
    this.uiRegion = void 0;
    this.occupationId = occupationId;
    this.occupationName = occupationName;
    this.index = index;
    this.uiRegion = uiRegion;
  }
}
//# sourceMappingURL=events.js.map
