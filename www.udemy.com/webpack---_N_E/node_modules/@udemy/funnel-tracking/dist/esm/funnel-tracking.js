import { getConfigData } from "@udemy/shared-utils";
import { udApi } from "@udemy/ud-api";
const funnelTrackingAPIUrl = "visits/me/funnel-logs/";
export class FunnelTracking {}
FunnelTracking.createContextKey = (contexts) => {
  return [
    contexts.context,
    contexts.subcontext,
    contexts.context2,
    contexts.subcontext2,
  ].join("-");
};
/**
 * Provide static method for calling a logAction
 * @deprecated - use `logAction` from `FunnelLogContextProvider` instead
 **/
FunnelTracking.logAction = (action, courses, funnelLogContext, priceStore) => {
  const loggingInfo = {
    courses,
    ...funnelLogContext,
  };
  return FunnelTracking.requestToFunnelAPI(action, loggingInfo, priceStore);
};
/**
 * Provide static method for calling a markAsSeen
 * @deprecated - use `markAsSeen` from `FunnelLogContextProvider` instead
 **/
FunnelTracking.markAsSeen = (course, funnelLogContext, priceStore) => {
  const loggingInfo = {
    courses: [course],
    ...funnelLogContext,
  };
  FunnelTracking.requestToFunnelAPI("mark-as-seen", loggingInfo, priceStore);
};
FunnelTracking.requestToFunnelAPI = (requestType, loggingInfo, priceStore) => {
  var _loggingInfo$context,
    _loggingInfo$subconte,
    _loggingInfo$context2,
    _loggingInfo$subconte2;
  const listPrice = [];
  const discountPrices = [];
  const discountedPrices = [];
  loggingInfo.courses.forEach((course) => {
    var _coursePrice,
      _coursePrice3,
      _coursePrice3$discoun,
      _coursePrice5,
      _coursePrice5$discoun;
    let coursePrice;
    if (course.price) {
      coursePrice = {
        price: course.price,
        discount: course.discount,
        price_detail: course.price_detail,
      };
    } else {
      var _priceStore$priceMap$;
      coursePrice =
        (_priceStore$priceMap$ = priceStore.priceMap.get(course.id)) !== null &&
        _priceStore$priceMap$ !== void 0
          ? _priceStore$priceMap$
          : {};
    }
    if (
      ((_coursePrice = coursePrice) === null || _coursePrice === void 0
        ? void 0
        : _coursePrice.price) !== undefined
    ) {
      var _coursePrice2;
      listPrice.push(
        (_coursePrice2 = coursePrice) === null || _coursePrice2 === void 0
          ? void 0
          : _coursePrice2.price
      );
    } else {
      listPrice.push("");
    }
    if (
      ((_coursePrice3 = coursePrice) === null || _coursePrice3 === void 0
        ? void 0
        : (_coursePrice3$discoun = _coursePrice3.discount_price) === null ||
          _coursePrice3$discoun === void 0
        ? void 0
        : _coursePrice3$discoun.amount) !== undefined
    ) {
      var _coursePrice4, _coursePrice4$discoun;
      discountPrices.push(
        (_coursePrice4 = coursePrice) === null || _coursePrice4 === void 0
          ? void 0
          : (_coursePrice4$discoun = _coursePrice4.discount_price) === null ||
            _coursePrice4$discoun === void 0
          ? void 0
          : _coursePrice4$discoun.amount.toString()
      );
    } else {
      discountPrices.push("");
    }
    if (
      ((_coursePrice5 = coursePrice) === null || _coursePrice5 === void 0
        ? void 0
        : (_coursePrice5$discoun = _coursePrice5.discount) === null ||
          _coursePrice5$discoun === void 0
        ? void 0
        : _coursePrice5$discoun.price) !== undefined
    ) {
      var _coursePrice6, _coursePrice6$discoun;
      const discountedPrice =
        (_coursePrice6 = coursePrice) === null || _coursePrice6 === void 0
          ? void 0
          : (_coursePrice6$discoun = _coursePrice6.discount) === null ||
            _coursePrice6$discoun === void 0
          ? void 0
          : _coursePrice6$discoun.price;
      discountedPrices.push(discountedPrice.price_string);
    } else {
      discountedPrices.push("");
    }
  });
  return udApi.post(funnelTrackingAPIUrl, {
    type: requestType,
    context:
      (_loggingInfo$context = loggingInfo.context) !== null &&
      _loggingInfo$context !== void 0
        ? _loggingInfo$context
        : "",
    subcontext:
      (_loggingInfo$subconte = loggingInfo.subcontext) !== null &&
      _loggingInfo$subconte !== void 0
        ? _loggingInfo$subconte
        : "",
    context2:
      (_loggingInfo$context2 = loggingInfo.context2) !== null &&
      _loggingInfo$context2 !== void 0
        ? _loggingInfo$context2
        : "",
    subcontext2:
      (_loggingInfo$subconte2 = loggingInfo.subcontext2) !== null &&
      _loggingInfo$subconte2 !== void 0
        ? _loggingInfo$subconte2
        : "",
    currency: getConfigData().price_country.currency_symbol,
    course_ids: loggingInfo.courses.map((course) => course.id).join(","),
    list_price: listPrice.join("|").replace(/[^0-9|,.]/g, ""),
    discount_price: discountedPrices
      .map((price, idx) => {
        return price || discountPrices[idx];
      })
      .join("|")
      .replace(/[^0-9|,.]/g, ""),
  });
};
//# sourceMappingURL=funnel-tracking.js.map
