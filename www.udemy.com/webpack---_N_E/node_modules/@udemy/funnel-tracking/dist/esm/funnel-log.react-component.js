import Observer from "@researchgate/react-intersection-observer";
import hoistStatics from "hoist-non-react-statics";
import React from "react";
import { getDisplayName } from "@udemy/shared-utils";
import { useFunnelLogContextStore } from "./funnel-log-context-provider.react-component";
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const FunnelLog = (props) => {
  const funnelLogContextStore = useFunnelLogContextStore();
  function handleChange(event, unobserve) {
    if (event.isIntersecting && props.item) {
      unobserve();
      funnelLogContextStore === null || funnelLogContextStore === void 0
        ? void 0
        : funnelLogContextStore.markAsSeen(props.item);
    }
  }
  if (!funnelLogContextStore) {
    return props.children;
  }

  // setting the threshold to 1 causes some children to never intersect;
  // not sure why, but .99 seems to fix it well enough
  return /*#__PURE__*/ React.createElement(
    Observer,
    {
      threshold: 0.99,
      onChange: handleChange,
    },
    props.children
  );
};

/**
 * A HOC that returns a HOC.
 *
 * Ex. EnhancedComponent = withFunnelLog('course')(WrappedComponent)
 *
 * @param {string} itemPropName - name of the parent's prop to pass into the item prop of FunnelLog
 */
export const withFunnelLog = (itemPropName) => (WrappedComponent) => {
  const EnhancedComponent = (props) =>
    /*#__PURE__*/ React.createElement(
      FunnelLog,
      {
        item: props[itemPropName],
      },
      /*#__PURE__*/ React.createElement(WrappedComponent, props)
    );
  EnhancedComponent.displayName = `WithFunnelLog(${getDisplayName(
    WrappedComponent
  )})`;
  return hoistStatics(EnhancedComponent, WrappedComponent);
};
//# sourceMappingURL=funnel-log.react-component.js.map
