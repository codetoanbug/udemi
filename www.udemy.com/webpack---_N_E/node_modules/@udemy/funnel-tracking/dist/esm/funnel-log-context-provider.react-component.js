import hoistStatics from "hoist-non-react-statics";
import { Provider, MobXProviderContext } from "mobx-react";
import React from "react";
import { getDisplayName, makeHoc } from "@udemy/shared-utils";
import { withStores } from "@udemy/store-provider";
import { funnelTrackingConstants } from "./constants";
import { FunnelLogContextStore } from "./funnel-log-context.mobx-store";
import { CoursePriceStore } from "./types/fake-browse-course-types";
class InternalFunnelLogContextProvider extends React.Component {
  constructor() {
    var _this$props$context;
    super(...arguments);
    this.funnelLogContextStore = new FunnelLogContextStore(
      {
        context:
          (_this$props$context = this.props.context) !== null &&
          _this$props$context !== void 0
            ? _this$props$context
            : this.props.pageType
            ? funnelTrackingConstants.channelContextMap[this.props.pageType]
            : undefined,
        context2: this.props.context2,
        subcontext: this.props.subcontext,
        subcontext2: this.props.subcontext2,
      },
      this.props.stores[0]
    );
  }
  render() {
    return /*#__PURE__*/ React.createElement(
      Provider,
      {
        funnelLogContextStore:
          this.props.funnelLogContextStore || this.funnelLogContextStore,
      },
      React.Children.only(this.props.children)
    );
  }
}
export const FunnelLogContextProvider = withStores(
  [CoursePriceStore],
  InternalFunnelLogContextProvider
);

// eslint-disable-next-line @typescript-eslint/no-explicit-any
export const withFunnelLogContextProvider = () => (WrappedComponent) => {
  const EnhancedComponent = (props) =>
    /*#__PURE__*/ React.createElement(
      FunnelLogContextProvider,
      null,
      /*#__PURE__*/ React.createElement(WrappedComponent, props)
    );
  EnhancedComponent.displayName = `WithFunnelLogContextProvider(${getDisplayName(
    WrappedComponent
  )})`;
  return hoistStatics(EnhancedComponent, WrappedComponent);
};
export function useFunnelLogContextStore() {
  const context = React.useContext(MobXProviderContext);
  return context.funnelLogContextStore;
}
export const withFunnelLogContextStore = makeHoc({
  useGetData: () => {
    const funnelLogContextStore = useFunnelLogContextStore();
    return {
      funnelLogContextStore,
    };
  },
  getDisplayName: (name) => `WithFunnelLogContextStore(${name})`,
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  getPropTypes: (propTypes) => {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { funnelLogContextStore, ...propTypesWithoutStore } = propTypes;
    return propTypesWithoutStore;
  },
});
//# sourceMappingURL=funnel-log-context-provider.react-component.js.map
