import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _class, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5;
import { action, observable } from "mobx";
import { debounce } from "@udemy/shared-utils";
import { FunnelTracking } from "./funnel-tracking";
export let FunnelLogContextStore =
  ((_class = class FunnelLogContextStore {
    constructor(_ref, priceStore) {
      let { context, context2, subcontext, subcontext2 } = _ref;
      this.pendingItems = void 0;
      this.loggedItemIds = void 0;
      _initializerDefineProperty(this, "context", _descriptor, this);
      _initializerDefineProperty(this, "context2", _descriptor2, this);
      _initializerDefineProperty(this, "subcontext", _descriptor3, this);
      _initializerDefineProperty(this, "subcontext2", _descriptor4, this);
      this.priceStore = void 0;
      _initializerDefineProperty(this, "updateContext", _descriptor5, this);
      this.markAsSeen = (item, funnelLogContext) => {
        const funnelLogCourse = {
          ...item,
          ...this.contextObj,
          ...funnelLogContext,
        };
        if (
          !this.loggedItemIds.has(item.id) &&
          !this.pendingItems.has(item.id)
        ) {
          this.pendingItems.set(item.id, funnelLogCourse);
          this.debouncedTrackEvents();
        }
      };
      this.logAction = (action, courses, funnelLogContext) => {
        const loggingInfo = {
          courses,
          ...this.contextObj,
          ...funnelLogContext,
        };
        return FunnelTracking.requestToFunnelAPI(
          action,
          loggingInfo,
          this.priceStore
        );
      };
      this.trackEvents = () => {
        if (this.pendingItems.size > 0) {
          if (!this.priceStore.isLoading) {
            const loggingInfo = {
              courses: [...this.pendingItems.values()],
              ...this.contextObj,
            };
            FunnelTracking.requestToFunnelAPI(
              "mark-as-seen",
              loggingInfo,
              this.priceStore
            );
            this.pendingItems.forEach((item) => {
              this.loggedItemIds.add(item.id);
            });
            this.pendingItems.clear();
          } else {
            this.debouncedTrackEvents();
          }
        }
      };
      this.debouncedTrackEvents = debounce(this.trackEvents, 1000);
      this.context = context;
      this.context2 = context2;
      this.subcontext = subcontext;
      this.subcontext2 = subcontext2;
      this.pendingItems = new Map();
      this.loggedItemIds = new Set();
      this.priceStore = priceStore;
    }
    get contextObj() {
      const { context, context2, subcontext, subcontext2 } = this;
      return {
        context,
        context2,
        subcontext,
        subcontext2,
      };
    }
  }),
  ((_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "context",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  (_descriptor2 = _applyDecoratedDescriptor(
    _class.prototype,
    "context2",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  (_descriptor3 = _applyDecoratedDescriptor(
    _class.prototype,
    "subcontext",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  (_descriptor4 = _applyDecoratedDescriptor(
    _class.prototype,
    "subcontext2",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  (_descriptor5 = _applyDecoratedDescriptor(
    _class.prototype,
    "updateContext",
    [action],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return (contextObj) => {
          Object.assign(this, contextObj);
        };
      },
    }
  ))),
  _class);
//# sourceMappingURL=funnel-log-context.mobx-store.js.map
