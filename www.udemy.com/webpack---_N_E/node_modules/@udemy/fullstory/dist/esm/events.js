import { ClientEvent, EventStatus } from "@udemy/event-tracking";
import { DISALLOWED_EVENTS } from "./constants";
export class FullstoryInitializedEvent extends ClientEvent {
  constructor(_ref) {
    let { fullstoryUrl } = _ref;
    super("FullstoryInitializedEvent");
    this.fullstoryUrl = void 0;
    this.fullstoryUrl = fullstoryUrl;
  }
}

/**
 * isEventAllowed()
 * Determines whether or not an event should be sent to Fullstory
 * @param event {TrackingEvent} - the event to check
 * @param status {EventStatus} - the status of the event
 * @returns {boolean} - whether event + status is allowed or not
 */
export function isEventAllowed(event, status) {
  // Do not track events in the waiting state
  if (status === EventStatus.WAITING) {
    return false;
  }
  return (
    status === EventStatus.FAILURE ||
    !DISALLOWED_EVENTS.includes(event.getType())
  );
}
//# sourceMappingURL=events.js.map
