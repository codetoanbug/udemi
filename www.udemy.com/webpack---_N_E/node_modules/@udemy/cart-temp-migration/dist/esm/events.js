import { ClientEvent } from "@udemy/event-tracking";
export const BUYABLE_TYPES = {
  COURSE: "course",
  SUBSCRIPTION: "subscription",
};
export let ComponentVersion = /*#__PURE__*/ (function (ComponentVersion) {
  ComponentVersion["UDLITE"] = "udlite";
  return ComponentVersion;
})({});

/**
 * Fired when user clicks the Add To Cart button
 * In some cases (Frequently Bought Together), one click can add multiple items to the cart,
 * so buyables is an array.
 */
export class AddToCartEvent extends ClientEvent {
  constructor(_ref) {
    let { buyables } = _ref;
    super("AddToCartEvent");
    this.buyables = void 0;
    this.buyables = buyables;
  }
}

/**
 * Fired when user clicks the Add To Cart button and sees an error message.
 * In some cases (Frequently Bought Together), one click can attempt to add multiple items to the
 * cart,so buyables is an array.
 */
export class CartErrorDisplayEvent extends ClientEvent {
  constructor(_ref2) {
    let { buyables, action, uiRegion } = _ref2;
    super("CartErrorDisplayEvent");
    this.buyables = void 0;
    this.action = void 0;
    this.uiRegion = void 0;
    this.buyables = buyables;
    this.action = action;
    this.uiRegion = uiRegion;
  }
}

/**
 * Fired when user clicks on the "Restrictions Apply" link on the
 * RefundNotice banner in the cart
 */
export class RefundNoticeTermsClickEvent extends ClientEvent {
  constructor() {
    super("RefundNoticeTermsClickEvent");
  }
}
export class CartMessageImpressionEvent extends ClientEvent {
  constructor(componentVersion, title, subTitle) {
    super("CartMessageImpressionEvent");
    this.componentVersion = componentVersion;
    this.title = title;
    this.subTitle = subTitle;
  }
}

/**
 * Fired when SliderMenu section is viewed by user
 */
export class CartSliderMenuImpressionEvent extends ClientEvent {
  constructor(componentVersion) {
    super("CartSliderMenuImpressionEvent");
    this.componentVersion = componentVersion;
  }
}

/**
 * Fired when Checkout Button in cart will be clicked
 */
export class CartCheckoutClickEvent extends ClientEvent {
  constructor(componentVersion) {
    super("CartCheckoutClickEvent");
    this.componentVersion = componentVersion;
  }
}

/**
 * Fired when a user sees a cart notification
 */
export class CartNotificationImpressionEvent extends ClientEvent {
  constructor(message, reason, componentVersion) {
    super("CartNotificationImpressionEvent");
    this.message = message;
    this.reason = reason;
    this.componentVersion = componentVersion;
  }
}

/**
 * Fired when a user sees a shopping list
 */
export class ShoppingListImpressionEvent extends ClientEvent {
  constructor(componentVersion, shoppingListType) {
    super("ShoppingListImpressionEvent");
    this.componentVersion = componentVersion;
    this.shoppingListType = shoppingListType;
  }
}
//# sourceMappingURL=events.js.map
