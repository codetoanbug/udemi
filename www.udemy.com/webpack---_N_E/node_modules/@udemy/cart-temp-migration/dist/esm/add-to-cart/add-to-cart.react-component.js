import { observer } from "mobx-react";
import React from "react";
import { useI18n } from "@udemy/i18n";
import { Button } from "@udemy/react-core-components";
import { Loader } from "@udemy/react-reveal-components";
import { ShoppingClient } from "@udemy/shopping";
import { BuyButton } from "../buy-button/buy-button.react-component";
import { CartSuccessModal } from "../cart-success-modal/cart-success-modal.react-component";
import { getPriceTextData } from "../utils/get-price-text-data";
import styles from "./add-to-cart.module.css";
import { GenericAddToCart } from "./generic-add-to-cart.react-component";

/**
 * Props for the `AddToCart` component
 */

/**
 * Wraps the `GenericAddToCart` and `BuyButton` components into a single interface. By default,
 * this will the `GenericAddToCart` button with sane default props. If the user is a valid student,
 * it delegates rendering to the `BuyButton`
 */
export const AddToCart = observer((props) => {
  var _componentContext$dat, _props$udStyle, _props$size;
  const { gettext } = useI18n();
  const [isMounted, setIsMounted] = React.useState(false);
  const [isModalOpen, setIsModalOpen] = React.useState(false);
  React.useEffect(() => {
    setIsMounted(true);
  }, []);
  const {
    allowAddToCartSuccessModal = true,
    buyables = [],
    cartButtonTextAdd = gettext("Add to cart"),
    componentContext,
    onAddRedirectUrl,
    eventTrackingContext,
  } = props;

  // set the tracking ID from course tracking context for when we are top-level rendered
  // by app.js
  if (
    eventTrackingContext !== null &&
    eventTrackingContext !== void 0 &&
    eventTrackingContext.courseTrackingId
  ) {
    var _props$buyables;
    (_props$buyables = props.buyables) === null || _props$buyables === void 0
      ? void 0
      : _props$buyables.forEach((buyable) => {
          if (!buyable.frontendTrackingId) {
            buyable.frontendTrackingId =
              eventTrackingContext === null || eventTrackingContext === void 0
                ? void 0
                : eventTrackingContext.courseTrackingId;
          }
        });
  }
  const modal = /*#__PURE__*/ React.createElement(CartSuccessModal, {
    buyable: buyables[0],
    isOpen: isModalOpen,
    onClose: () => setIsModalOpen(false),
    renderBundleUnit: props.renderBundleUnit,
  });
  const context =
    (_componentContext$dat =
      componentContext === null || componentContext === void 0
        ? void 0
        : componentContext.data) !== null && _componentContext$dat !== void 0
      ? _componentContext$dat
      : props;
  if (componentContext && componentContext.data) {
    // If the user is actually a student of this course, we want to show the `Go To Course` CTA
    const { isValidStudent } = getPriceTextData(context);
    if (isValidStudent) {
      return /*#__PURE__*/ React.createElement(BuyButton, props);
    }
  }
  return /*#__PURE__*/ React.createElement(GenericAddToCart, {
    buttonClass: Button,
    buyables: buyables.slice(),
    cartButtonTextAdd: cartButtonTextAdd,
    cartButtonClassesAdd: props.className,
    cartButtonClassesGoToCart: props.className,
    disabled: !isMounted,
    loader: /*#__PURE__*/ React.createElement(Loader, {
      color: "inherit",
      size: "medium",
    }),
    notificationStyle: styles.notification,
    onAddRedirectUrl: onAddRedirectUrl,
    shoppingClient: ShoppingClient,
    addToCartSuccessModal: modal,
    addToCartContext: props.addToCartContext,
    showCartSuccessModal: () => setIsModalOpen(true),
    buttonStyleProps: {
      udStyle:
        (_props$udStyle = props.udStyle) !== null && _props$udStyle !== void 0
          ? _props$udStyle
          : "brand",
      size:
        (_props$size = props.size) !== null && _props$size !== void 0
          ? _props$size
          : "large",
    },
    allowAddToCartSuccessModal: allowAddToCartSuccessModal,
    forceGoToCart: props.forceGoToCart,
    cartButtonTextGoToCart: props.cartButtonTextGoToCart,
  });
});

// TODO: CLP integration
// export const AddToCartCacheableComponent = injectCourseLandingPageData('purchase')(AddToCart);
//# sourceMappingURL=add-to-cart.react-component.js.map
