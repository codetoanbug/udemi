import classNames from "classnames";
import { observer, Provider } from "mobx-react";
import React, { useEffect } from "react";
import { FunnelLogContextProvider } from "@udemy/funnel-tracking";
import { useI18n } from "@udemy/i18n";
import SuccessIcon from "@udemy/icons/dist/success.ud-icon";
import { Button, Image } from "@udemy/react-core-components";
import { Modal } from "@udemy/react-dialog-components";
import { AlertBanner } from "@udemy/react-messaging-components";
import { PillGroup } from "@udemy/react-navigation-components";
import { serverOrClient } from "@udemy/shared-utils";
import { urls } from "../add-to-cart/config";
import styles from "./cart-success-modal.module.css";
import { RelatedLabelsStore } from "./related-labels.mobx-store";
export const CourseAddedMessage = (_ref) => {
  let { onClick, title, instructors, image } = _ref;
  const { gettext } = useI18n();
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      className: styles["course-added"],
    },
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: styles["added-context"],
      },
      /*#__PURE__*/ React.createElement(SuccessIcon, {
        className: styles["success-icon"],
        color: "positive",
        label: false,
      }),
      image &&
        /*#__PURE__*/ React.createElement(Image, {
          width: 64,
          height: 64,
          src: image,
          alt: title,
        }),
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["text-block"],
        },
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: classNames(styles["course-title"], "ud-heading-sm"),
          },
          title
        ),
        instructors &&
          /*#__PURE__*/ React.createElement(
            "div",
            {
              className: classNames(styles["instructor-list"], "ud-text-xs"),
            },
            instructors.join(", ")
          )
      ),
      /*#__PURE__*/ React.createElement(
        Button,
        {
          onClick: onClick,
          "data-purpose": "go-to-cart-button",
          className: styles["go-to-cart"],
        },
        gettext("Go to cart")
      )
    )
  );
};
export const RelatedLabelsList = observer((_ref2) => {
  var _relatedLabelsStore$l;
  let { courseId, sourcePage } = _ref2;
  const { gettext } = useI18n();
  const [relatedLabelsStore] = React.useState(
    () => new RelatedLabelsStore(courseId, sourcePage)
  );
  useEffect(() => {
    relatedLabelsStore.fetchLabels();
  }, [relatedLabelsStore]);
  if (
    relatedLabelsStore.loading ||
    !(
      (_relatedLabelsStore$l = relatedLabelsStore.labels) !== null &&
      _relatedLabelsStore$l !== void 0 &&
      _relatedLabelsStore$l.length
    )
  ) {
    return null;
  }
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: "ud-heading-lg",
      },
      gettext("Related topics")
    ),
    /*#__PURE__*/ React.createElement(
      PillGroup,
      {
        className: styles["related-labels"],
      },
      relatedLabelsStore.labels.map((label, index) =>
        /*#__PURE__*/ React.createElement(
          PillGroup.Pill,
          {
            key: index,
            componentClass: "a",
            href: label.url,
            "data-purpose": "related-link-tag",
            size: "medium",
          },
          label.display_name
        )
      )
    )
  );
});
export const CartSuccessModal = observer((_ref3) => {
  var _buyable$visible_inst, _buyable$title;
  let {
    buyable,
    message,
    showCodingExercisesBadge,
    isOpen,
    onClose,
    renderBundleUnit,
  } = _ref3;
  const { gettext } = useI18n();
  const goToCart = () => {
    serverOrClient.global.location.href = urls.cartPage;
  };
  const instructorNames = (
    (_buyable$visible_inst = buyable.visible_instructors) !== null &&
    _buyable$visible_inst !== void 0
      ? _buyable$visible_inst
      : []
  ).map((instructor) => instructor.title);
  return /*#__PURE__*/ React.createElement(
    Modal,
    {
      isOpen: isOpen,
      onClose: onClose,
      title: gettext("Added to cart"),
    },
    /*#__PURE__*/ React.createElement(
      "div",
      {
        className: "cart-success-modal",
        "data-purpose": "cart-success-modal",
      },
      message &&
        /*#__PURE__*/ React.createElement(AlertBanner, {
          showIcon: false,
          showCta: false,
          className: styles["notice"],
          title: message.title,
          body: message.subtitle,
        }),
      /*#__PURE__*/ React.createElement(CourseAddedMessage, {
        onClick: goToCart,
        title:
          (_buyable$title = buyable.title) !== null && _buyable$title !== void 0
            ? _buyable$title
            : "",
        instructors: instructorNames,
        image: buyable.image_100x100,
      }),
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: styles["bundle-container"],
        },
        /*#__PURE__*/ React.createElement(
          FunnelLogContextProvider,
          {
            context: "cartSuccessModal",
          },
          /*#__PURE__*/ React.createElement(
            Provider,
            {
              showCodingExercisesBadge: showCodingExercisesBadge,
            },
            renderBundleUnit === null || renderBundleUnit === void 0
              ? void 0
              : renderBundleUnit([buyable])
          )
        )
      ),
      buyable.id &&
        /*#__PURE__*/ React.createElement(RelatedLabelsList, {
          courseId: buyable.id,
          sourcePage: "success_page",
        })
    )
  );
});
//# sourceMappingURL=cart-success-modal.react-component.js.map
