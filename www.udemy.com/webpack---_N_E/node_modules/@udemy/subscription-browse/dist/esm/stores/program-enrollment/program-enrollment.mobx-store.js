import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _dec,
  _dec2,
  _dec3,
  _dec4,
  _class,
  _descriptor,
  _descriptor2,
  _descriptor3,
  _descriptor4,
  _descriptor5;
import { action, computed, observable } from "mobx";
import { udQuery } from "@udemy/graphql";
import { captureException } from "@udemy/sentry";
import { DATA_STATES } from "./constants";
export let ProgramEnrollmentStore =
  ((_dec = observable.ref),
  (_dec2 = observable.ref),
  (_dec3 = observable.shallow),
  (_dec4 = observable.shallow),
  ((_class = class ProgramEnrollmentStore {
    constructor() {
      _initializerDefineProperty(this, "state", _descriptor, this);
      // Idle state for isomorphic rendering
      _initializerDefineProperty(
        this,
        "programEnrollmentPageInfo",
        _descriptor2,
        this
      );
      _initializerDefineProperty(this, "programChannels", _descriptor3, this);
      _initializerDefineProperty(this, "programData", _descriptor4, this);
      _initializerDefineProperty(this, "pathData", _descriptor5, this);
    }
    setDataState(state) {
      this.state = state;
    }
    get programCardData() {
      return this.programData.map((data) => {
        return {
          completionRatio: parseInt(data.completionRatio, 10),
          icon: data.program.icon,
          id: data.program.id,
          isEnrolled: true,
          level: data.program.level,
          path: data.path,
          title: data.program.title,
          url: `/program-taking/${data.program.id}/learn`,
        };
      });
    }
    setProgramEnrollmentDataByResponse(response) {
      var _response$data$me,
        _response$data$me$pro,
        _response$data$me2,
        _response$data$me2$pr,
        _response$data$me3,
        _response$data$me3$la,
        _response$data$me3$la2,
        _response$data$me4,
        _response$data$me4$la,
        _response$data$me4$la2,
        _response$data$me4$la3,
        _response$data$me4$la4;
      this.programEnrollmentPageInfo =
        (_response$data$me = response.data.me) === null ||
        _response$data$me === void 0
          ? void 0
          : (_response$data$me$pro = _response$data$me.programEnrollments) ===
              null || _response$data$me$pro === void 0
          ? void 0
          : _response$data$me$pro.pageInfo;
      this.programData =
        (_response$data$me2 = response.data.me) === null ||
        _response$data$me2 === void 0
          ? void 0
          : (_response$data$me2$pr = _response$data$me2.programEnrollments) ===
              null || _response$data$me2$pr === void 0
          ? void 0
          : _response$data$me2$pr.edges.map((edge) => {
              const programNode = edge.node;
              // TODO: use .color instead of title?
              const path = programNode.program.paths.edges[0].node.title;
              return {
                ...programNode,
                path,
              };
            });

      // Paths from lastAccessedEnrollment
      this.pathData =
        (_response$data$me3 = response.data.me) === null ||
        _response$data$me3 === void 0
          ? void 0
          : (_response$data$me3$la =
              _response$data$me3.lastAccessedEnrollment) === null ||
            _response$data$me3$la === void 0
          ? void 0
          : (_response$data$me3$la2 = _response$data$me3$la.edges) === null ||
            _response$data$me3$la2 === void 0
          ? void 0
          : _response$data$me3$la2.map((edge) => {
              const enrollment = edge.node;
              const edges = enrollment.program.paths.edges;
              return {
                title: edges[0].node.title,
                programs: edges[0].node.programs.edges.map((edge) => {
                  return {
                    ...edge.node,
                    url: `/program-taking/${edge.node.id}/learn`,
                  };
                }),
              };
            });

      // Channels from lastAccessedEnrollment ðŸ¤¡
      const channel =
        (_response$data$me4 = response.data.me) === null ||
        _response$data$me4 === void 0
          ? void 0
          : (_response$data$me4$la =
              _response$data$me4.lastAccessedEnrollment) === null ||
            _response$data$me4$la === void 0
          ? void 0
          : (_response$data$me4$la2 = _response$data$me4$la.edges[0]) ===
              null || _response$data$me4$la2 === void 0
          ? void 0
          : (_response$data$me4$la3 =
              _response$data$me4$la2.node.program.paths.edges[0]) === null ||
            _response$data$me4$la3 === void 0
          ? void 0
          : (_response$data$me4$la4 =
              _response$data$me4$la3.node.channels.edges[0]) === null ||
            _response$data$me4$la4 === void 0
          ? void 0
          : _response$data$me4$la4.node;
      this.programChannels = channel
        ? {
            title: channel.title,
            paths: channel.paths.edges.map((edge) => edge.node),
          }
        : null;
      this.setDataState(
        this.programData.length ? DATA_STATES.SUCCESS : DATA_STATES.EMPTY
      );
    }
    async queryProgramEnrollments(query) {
      try {
        const response = await udQuery({
          query,
        });
        this.setProgramEnrollmentDataByResponse(response);
        return response;
      } catch (e) {
        captureException(e);
        this.setDataState(DATA_STATES.ERROR);
      }
    }
    async fetchProgramEnrollments(query) {
      this.setDataState(DATA_STATES.LOADING);
      return await this.queryProgramEnrollments(query);
    }
  }),
  ((_descriptor = _applyDecoratedDescriptor(
    _class.prototype,
    "state",
    [observable],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return DATA_STATES.IDLE;
      },
    }
  )),
  (_descriptor2 = _applyDecoratedDescriptor(
    _class.prototype,
    "programEnrollmentPageInfo",
    [_dec],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  (_descriptor3 = _applyDecoratedDescriptor(
    _class.prototype,
    "programChannels",
    [_dec2],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: null,
    }
  )),
  (_descriptor4 = _applyDecoratedDescriptor(
    _class.prototype,
    "programData",
    [_dec3],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return [];
      },
    }
  )),
  (_descriptor5 = _applyDecoratedDescriptor(
    _class.prototype,
    "pathData",
    [_dec4],
    {
      configurable: true,
      enumerable: true,
      writable: true,
      initializer: function () {
        return [];
      },
    }
  )),
  _applyDecoratedDescriptor(
    _class.prototype,
    "setDataState",
    [action],
    Object.getOwnPropertyDescriptor(_class.prototype, "setDataState"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "programCardData",
    [computed],
    Object.getOwnPropertyDescriptor(_class.prototype, "programCardData"),
    _class.prototype
  ),
  _applyDecoratedDescriptor(
    _class.prototype,
    "setProgramEnrollmentDataByResponse",
    [action],
    Object.getOwnPropertyDescriptor(
      _class.prototype,
      "setProgramEnrollmentDataByResponse"
    ),
    _class.prototype
  )),
  _class));
//# sourceMappingURL=program-enrollment.mobx-store.js.map
