import { useUDData } from "@udemy/ud-data";
import React, { forwardRef } from "react";
/**
 * Higher-order component that plucks out `CourseCard` props for slots that
 * we do not render when in a UB context.
 *
 * @param CourseCardComponent - card component to wrap
 * @returns a component that renders `CardComponent`
 *
 * @example
 * ```tsx
 * const MyCardComponent = withCourseCardUBGuard(CourseCard);
 *
 * <MyCourseCard title="..." image={...} badges={...} />
 * ```
 */

export const withCourseCardUBGuard = (CourseCardComponent) => {
  var _ref, _CourseCardComponent$;

  const displayName =
    (_ref =
      (_CourseCardComponent$ = CourseCardComponent.displayName) !== null &&
      _CourseCardComponent$ !== void 0
        ? _CourseCardComponent$
        : CourseCardComponent.name) !== null && _ref !== void 0
      ? _ref
      : "Component";
  return Object.assign(
    /*#__PURE__*/ forwardRef((_ref2, ref) => {
      let { children, badges, badgesProps, price, priceProps, ...props } =
        _ref2;
      // Pluck out badges and price from the card if in UB context
      const { Config: udConfig } = useUDData();
      const isUB = !!udConfig.brand.has_organization;
      const guardedProps = {
        ...props,
        ...(isUB
          ? {}
          : {
              badges,
              badgesProps,
              priceProps,
              price,
            }),
      };
      return /*#__PURE__*/ React.createElement(
        CourseCardComponent,
        Object.assign(
          {
            ref: ref,
          },
          guardedProps
        ),
        children
      );
    }),
    {
      displayName: `withCourseCardUBGuard(${displayName})`,
    }
  );
};
//# sourceMappingURL=with-course-card-ub-guard.js.map
