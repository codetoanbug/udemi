import { useI18n } from "@udemy/i18n";
import { safelySetInnerHTML } from "@udemy/shared-utils";
import React, { createContext, useContext } from "react";
import styles from "./course-card-instructors.module.css";
/**
 * Context props for `CourseCardInstructors`.
 */

/**
 * Context for `CourseCardInstructors`. Optionally provide this context in a card to
 * signal layout to `CourseCardInstructors` instances rendered by consumers.
 */
export const CourseCardInstructorsContext = /*#__PURE__*/ createContext({
  size: undefined,
});
/**
 * Props for `CourseCardInstructors` component.
 */

/**
 * Instructors component for `CourseCard`. Renders names in a comma-separated list.
 *
 * @remarks
 *
 * If there are no names, this component will render `null`.
 */
export const CourseCardInstructors = (_ref) => {
  var _ref2, _props$size;

  let { displayNames, ...props } = _ref;
  const { ngettext } = useI18n();
  const context = useContext(CourseCardInstructorsContext);
  const size =
    (_ref2 =
      (_props$size = props.size) !== null && _props$size !== void 0
        ? _props$size
        : context.size) !== null && _ref2 !== void 0
      ? _ref2
      : "xsmall";
  return !displayNames.length
    ? null
    : /*#__PURE__*/ React.createElement(
        "div",
        {
          className: size === "small" ? "ud-text-sm" : "ud-text-xs",
        },
        /*#__PURE__*/ React.createElement(
          "span",
          {
            className: "ud-sr-only",
          },
          ngettext("Instructor:", "Instructors:", displayNames.length)
        ),
        /*#__PURE__*/ React.createElement(
          "div",
          Object.assign(
            {
              className: styles["instructor-list"],
            },
            safelySetInnerHTML({
              descriptionOfCaller: "course-card:visible-instructors",
              html: displayNames.join(", "),
            })
          )
        )
      );
};
//# sourceMappingURL=course-card-instructors.react-component.js.map
