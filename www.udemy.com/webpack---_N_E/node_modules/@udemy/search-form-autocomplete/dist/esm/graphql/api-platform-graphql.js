import { useQuery } from "react-query";
import { fetchData } from "./fetcher";

/** All built-in and custom scalars, mapped to their actual values */

/** Price option for computed price plan. Will be returned for annual plans */

/** Article lecture */

/** Types of captions */
export let CaptionType = /*#__PURE__*/ (function (CaptionType) {
  CaptionType["ClosedCaption"] = "CLOSED_CAPTION";
  CaptionType["Subtitle"] = "SUBTITLE";
  return CaptionType;
})({});

/** Category the Course belongs to */

/** Coding exercise for students to practice their programming */

/** Language possibilities for a coding exercise */
export let CodingExerciseLanguageOption = /*#__PURE__*/ (function (
  CodingExerciseLanguageOption
) {
  CodingExerciseLanguageOption["Cplusplus"] = "CPLUSPLUS";
  CodingExerciseLanguageOption["CsvProcessingWithPython"] =
    "CSV_PROCESSING_WITH_PYTHON";
  CodingExerciseLanguageOption["CSharp"] = "C_SHARP";
  CodingExerciseLanguageOption["Html"] = "HTML";
  CodingExerciseLanguageOption["JavascriptEs6"] = "JAVASCRIPT_ES6";
  CodingExerciseLanguageOption["Java_9"] = "JAVA_9";
  CodingExerciseLanguageOption["Java_11"] = "JAVA_11";
  CodingExerciseLanguageOption["Php_5"] = "PHP_5";
  CodingExerciseLanguageOption["Php_7"] = "PHP_7";
  CodingExerciseLanguageOption["Python_3_5"] = "PYTHON_3_5";
  CodingExerciseLanguageOption["Python_3_8"] = "PYTHON_3_8";
  CodingExerciseLanguageOption["Python_3_10"] = "PYTHON_3_10";
  CodingExerciseLanguageOption["React_16"] = "REACT_16";
  CodingExerciseLanguageOption["Ruby"] = "RUBY";
  CodingExerciseLanguageOption["R_3_6"] = "R_3_6";
  CodingExerciseLanguageOption["Scipy_1_4NumpyPandasSympyAndScikitLearn_0_23"] =
    "SCIPY_1_4_NUMPY_PANDAS_SYMPY_AND_SCIKIT_LEARN_0_23";
  CodingExerciseLanguageOption["Sql"] = "SQL";
  CodingExerciseLanguageOption["Swift_3"] = "SWIFT_3";
  CodingExerciseLanguageOption["Swift_5"] = "SWIFT_5";
  return CodingExerciseLanguageOption;
})({});

/** Type representing a group of content for a subscription plan */

/** The Course object. */

/** Accreditations */

/** Accreditation types */
export let CourseAccreditationType = /*#__PURE__*/ (function (
  CourseAccreditationType
) {
  CourseAccreditationType["Cpe"] = "CPE";
  return CourseAccreditationType;
})({});

/** Course caption details such as locale, type, and source */

/** Category the Course belongs to */

/** Enrollments belonging to the course */

/** Course images by varying dimensions */

/** Instructor for a course */

/** Ratings of a course */

/** Search filters to apply on search request */

/** List of Courses and additional data about search response */

/** Sort order for courses in search response */
export let CourseSearchSortType = /*#__PURE__*/ (function (
  CourseSearchSortType
) {
  CourseSearchSortType["Rating"] = "RATING";
  CourseSearchSortType["Relevance"] = "RELEVANCE";
  CourseSearchSortType["Reviews"] = "REVIEWS";
  CourseSearchSortType["Time"] = "TIME";
  return CourseSearchSortType;
})({});

/** Section of the course containing all types of curriculum items */

/** SubCategory that is part of CourseCategory */

/** Currencies available */
export let CurrencyCode = /*#__PURE__*/ (function (CurrencyCode) {
  CurrencyCode["Aud"] = "AUD";
  CurrencyCode["Brl"] = "BRL";
  CurrencyCode["Cad"] = "CAD";
  CurrencyCode["Dkk"] = "DKK";
  CurrencyCode["Eur"] = "EUR";
  CurrencyCode["Gbp"] = "GBP";
  CurrencyCode["Idr"] = "IDR";
  CurrencyCode["Ils"] = "ILS";
  CurrencyCode["Inr"] = "INR";
  CurrencyCode["Jpy"] = "JPY";
  CurrencyCode["Krw"] = "KRW";
  CurrencyCode["Mxn"] = "MXN";
  CurrencyCode["Nok"] = "NOK";
  CurrencyCode["Pln"] = "PLN";
  CurrencyCode["Rub"] = "RUB";
  CurrencyCode["Sgd"] = "SGD";
  CurrencyCode["Thb"] = "THB";
  CurrencyCode["Try"] = "TRY";
  CurrencyCode["Twd"] = "TWD";
  CurrencyCode["Usd"] = "USD";
  CurrencyCode["Vnd"] = "VND";
  CurrencyCode["Zar"] = "ZAR";
  return CurrencyCode;
})({});

/** Curriculum part of a course */

/** All curriculum items */

/** Type representing details about an interval of dates */

/** Supported units of time over which a subscription trial or billing cycle can occur */
export let DateIntervalType = /*#__PURE__*/ (function (DateIntervalType) {
  DateIntervalType["Day"] = "DAY";
  DateIntervalType["Month"] = "MONTH";
  DateIntervalType["Week"] = "WEEK";
  DateIntervalType["Year"] = "YEAR";
  return DateIntervalType;
})({});

/** Instruction level of the course */
export let DifficultyLevel = /*#__PURE__*/ (function (DifficultyLevel) {
  DifficultyLevel["AllLevels"] = "ALL_LEVELS";
  DifficultyLevel["Beginner"] = "BEGINNER";
  DifficultyLevel["Expert"] = "EXPERT";
  DifficultyLevel["Intermediate"] = "INTERMEDIATE";
  return DifficultyLevel;
})({});

/** Stores realtime attribute like build_number->20220322_v1 */

/** Holds assigned feature variant  */

/** Instructor for a learning product */

/** Instructor images by varying dimensions */

/** The Lab object. */

/** Instructor for a lab */

/** MetaData for a lab */

/** List of Labs and additional data about search response */

/** The LanguageCode scalar type as defined by ISO 639-1. */
export let LanguageCode = /*#__PURE__*/ (function (LanguageCode) {
  LanguageCode["Af"] = "AF";
  LanguageCode["Ak"] = "AK";
  LanguageCode["Am"] = "AM";
  LanguageCode["Ar"] = "AR";
  LanguageCode["As"] = "AS";
  LanguageCode["Az"] = "AZ";
  LanguageCode["Be"] = "BE";
  LanguageCode["Bg"] = "BG";
  LanguageCode["Bm"] = "BM";
  LanguageCode["Bn"] = "BN";
  LanguageCode["Bo"] = "BO";
  LanguageCode["Br"] = "BR";
  LanguageCode["Bs"] = "BS";
  LanguageCode["Ca"] = "CA";
  LanguageCode["Ce"] = "CE";
  LanguageCode["Cs"] = "CS";
  LanguageCode["Cu"] = "CU";
  LanguageCode["Cy"] = "CY";
  LanguageCode["Da"] = "DA";
  LanguageCode["De"] = "DE";
  LanguageCode["Dz"] = "DZ";
  LanguageCode["Ee"] = "EE";
  LanguageCode["El"] = "EL";
  LanguageCode["En"] = "EN";
  LanguageCode["Eo"] = "EO";
  LanguageCode["Es"] = "ES";
  LanguageCode["Et"] = "ET";
  LanguageCode["Eu"] = "EU";
  LanguageCode["Fa"] = "FA";
  LanguageCode["Ff"] = "FF";
  LanguageCode["Fi"] = "FI";
  LanguageCode["Fo"] = "FO";
  LanguageCode["Fr"] = "FR";
  LanguageCode["Fy"] = "FY";
  LanguageCode["Ga"] = "GA";
  LanguageCode["Gd"] = "GD";
  LanguageCode["Gl"] = "GL";
  LanguageCode["Gu"] = "GU";
  LanguageCode["Gv"] = "GV";
  LanguageCode["Ha"] = "HA";
  LanguageCode["He"] = "HE";
  LanguageCode["Hi"] = "HI";
  LanguageCode["Hr"] = "HR";
  LanguageCode["Hu"] = "HU";
  LanguageCode["Hy"] = "HY";
  LanguageCode["Ia"] = "IA";
  LanguageCode["Id"] = "ID";
  LanguageCode["Ig"] = "IG";
  LanguageCode["Ii"] = "II";
  LanguageCode["Is"] = "IS";
  LanguageCode["It"] = "IT";
  LanguageCode["Ja"] = "JA";
  LanguageCode["Jv"] = "JV";
  LanguageCode["Ka"] = "KA";
  LanguageCode["Ki"] = "KI";
  LanguageCode["Kk"] = "KK";
  LanguageCode["Kl"] = "KL";
  LanguageCode["Km"] = "KM";
  LanguageCode["Kn"] = "KN";
  LanguageCode["Ko"] = "KO";
  LanguageCode["Ks"] = "KS";
  LanguageCode["Ku"] = "KU";
  LanguageCode["Kw"] = "KW";
  LanguageCode["Ky"] = "KY";
  LanguageCode["Lb"] = "LB";
  LanguageCode["Lg"] = "LG";
  LanguageCode["Ln"] = "LN";
  LanguageCode["Lo"] = "LO";
  LanguageCode["Lt"] = "LT";
  LanguageCode["Lu"] = "LU";
  LanguageCode["Lv"] = "LV";
  LanguageCode["Mg"] = "MG";
  LanguageCode["Mi"] = "MI";
  LanguageCode["Mk"] = "MK";
  LanguageCode["Ml"] = "ML";
  LanguageCode["Mn"] = "MN";
  LanguageCode["Mr"] = "MR";
  LanguageCode["Ms"] = "MS";
  LanguageCode["Mt"] = "MT";
  LanguageCode["My"] = "MY";
  LanguageCode["Nb"] = "NB";
  LanguageCode["Nd"] = "ND";
  LanguageCode["Ne"] = "NE";
  LanguageCode["Nl"] = "NL";
  LanguageCode["Nn"] = "NN";
  LanguageCode["No"] = "NO";
  LanguageCode["Om"] = "OM";
  LanguageCode["Or"] = "OR";
  LanguageCode["Os"] = "OS";
  LanguageCode["Pa"] = "PA";
  LanguageCode["Pl"] = "PL";
  LanguageCode["Ps"] = "PS";
  LanguageCode["Pt"] = "PT";
  LanguageCode["PtBr"] = "PT_BR";
  LanguageCode["PtPt"] = "PT_PT";
  LanguageCode["Qu"] = "QU";
  LanguageCode["Rm"] = "RM";
  LanguageCode["Rn"] = "RN";
  LanguageCode["Ro"] = "RO";
  LanguageCode["Ru"] = "RU";
  LanguageCode["Rw"] = "RW";
  LanguageCode["Sd"] = "SD";
  LanguageCode["Se"] = "SE";
  LanguageCode["Sg"] = "SG";
  LanguageCode["Si"] = "SI";
  LanguageCode["Sk"] = "SK";
  LanguageCode["Sl"] = "SL";
  LanguageCode["Sn"] = "SN";
  LanguageCode["So"] = "SO";
  LanguageCode["Sq"] = "SQ";
  LanguageCode["Sr"] = "SR";
  LanguageCode["Su"] = "SU";
  LanguageCode["Sv"] = "SV";
  LanguageCode["Sw"] = "SW";
  LanguageCode["Ta"] = "TA";
  LanguageCode["Te"] = "TE";
  LanguageCode["Tg"] = "TG";
  LanguageCode["Th"] = "TH";
  LanguageCode["Ti"] = "TI";
  LanguageCode["Tk"] = "TK";
  LanguageCode["To"] = "TO";
  LanguageCode["Tr"] = "TR";
  LanguageCode["Tt"] = "TT";
  LanguageCode["Ug"] = "UG";
  LanguageCode["Uk"] = "UK";
  LanguageCode["Ur"] = "UR";
  LanguageCode["Uz"] = "UZ";
  LanguageCode["Vi"] = "VI";
  LanguageCode["Vo"] = "VO";
  LanguageCode["Wo"] = "WO";
  LanguageCode["Xh"] = "XH";
  LanguageCode["Yi"] = "YI";
  LanguageCode["Yo"] = "YO";
  LanguageCode["Zh"] = "ZH";
  LanguageCode["ZhCn"] = "ZH_CN";
  LanguageCode["ZhTw"] = "ZH_TW";
  LanguageCode["Zu"] = "ZU";
  return LanguageCode;
})({});

/** All partner's content collection items that are available, currently just course */

/** A collection of learning products for a partner */

/** Represents a lecture type  */

/** Money */

/** Price option for computed price plan. Will be returned for daily, weekly or monthly plans */

/** A UB organization */

/** Interface for implementing paginated results */

/** Popular topic */

/** Topic SubCategory */

/** Assigment test with multiple-choice and free-from questions reviewed by instructors */

/** Practice test that is more detailed than a Quiz */

/** Root query from which every schema extends */

/** Root query from which every schema extends */

/** Root query from which every schema extends */

/** Root query from which every schema extends */

/** Root query from which every schema extends */

/** Root query from which every schema extends */

/** Root query from which every schema extends */

/** Root query from which every schema extends */

/** Root query from which every schema extends */

/** Root query from which every schema extends */

/** Root query from which every schema extends */

/** Root query from which every schema extends */

/** Root query from which every schema extends */

/** Quiz with simple questions and multiple choice answers */

/** Identifies available search filter facets. */

/** Options for search aggregates */

/** One of the available options within a search facet type */

/** A simple auto-complete item can be search log, course or instructor */

/** Search Log suggestion for autocomplete */

/** Search param for autocomplete */

/** A simple autocomplete item with the tracking metadata */

/** SubCategory that is part of CourseCategory */

/** An offer for a consumer subscription plan to access a catalog of Udemy content */

/** Union of possible plan pricing options */

/** The type of subscription plan being offered */
export let SubscriptionPlanProductType = /*#__PURE__*/ (function (
  SubscriptionPlanProductType
) {
  SubscriptionPlanProductType["Consumersubscription"] = "CONSUMERSUBSCRIPTION";
  SubscriptionPlanProductType["Enterprise"] = "ENTERPRISE";
  SubscriptionPlanProductType["Team"] = "TEAM";
  SubscriptionPlanProductType["Udemypro"] = "UDEMYPRO";
  return SubscriptionPlanProductType;
})({});

/** Type representing details about the trial subscription offer available for a given user and plan */

/** Topic */

/** Types of popularity for Topics */
export let TopicPopularityTypes = /*#__PURE__*/ (function (
  TopicPopularityTypes
) {
  TopicPopularityTypes["Popular"] = "POPULAR";
  TopicPopularityTypes["Trending"] = "TRENDING";
  return TopicPopularityTypes;
})({});

/** Video lecture */

/** Length of the video in course */
export let VideoLength = /*#__PURE__*/ (function (VideoLength) {
  VideoLength["ExtraLong"] = "EXTRA_LONG";
  VideoLength["ExtraShort"] = "EXTRA_SHORT";
  VideoLength["Long"] = "LONG";
  VideoLength["Medium"] = "MEDIUM";
  VideoLength["Short"] = "SHORT";
  return VideoLength;
})({});

/** Mashup lecture has both video and a presentation */

export const AutocompleteSuggestionsDocument = `
    query AutocompleteSuggestions($searchedPhrase: String!) {
  searchAutocomplete(request: {searchedPhrase: $searchedPhrase}) {
    item {
      ... on SearchAutocompleteLogItem {
        phrase: title
        __typename
      }
      ... on CourseInstructor {
        id
        name
        url
        images {
          px50x50
        }
        __typename
      }
      ... on Course {
        id
        title
        url
        instructors {
          name
        }
        images {
          px50x50
        }
        __typename
      }
    }
    resultTrackingId
    trackingId
  }
}
    `;
export const useAutocompleteSuggestionsQuery = (variables, options) =>
  useQuery(
    ["AutocompleteSuggestions", variables],
    fetchData(AutocompleteSuggestionsDocument, variables),
    options
  );
useAutocompleteSuggestionsQuery.getKey = (variables) => [
  "AutocompleteSuggestions",
  variables,
];
useAutocompleteSuggestionsQuery.fetcher = (variables, options) =>
  fetchData(AutocompleteSuggestionsDocument, variables, options);
//# sourceMappingURL=api-platform-graphql.js.map
