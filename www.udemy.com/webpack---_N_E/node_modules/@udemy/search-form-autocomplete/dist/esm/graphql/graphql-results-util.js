import { getConfigData } from "@udemy/shared-utils";
const constructSearchLogItemUrl = (phrase) => {
  const SEARCH_URL = "/courses/search/";
  const UFB_SEARCH_URL = "/organization/search/";
  const url = getConfigData().brand.has_organization
    ? UFB_SEARCH_URL
    : SEARCH_URL;
  return `${url}?q=${phrase}`;
};
export const mapGraphqlResultsToAutocompleteResults = (results) => {
  const mappedResults = [];
  results.forEach((result) => {
    var _result$item;
    if (!result) {
      return;
    }
    let name = "";
    const mappedResult = {
      id: 0,
    };
    if (
      ((_result$item = result.item) === null || _result$item === void 0
        ? void 0
        : _result$item.__typename) === "SearchAutocompleteLogItem"
    ) {
      var _phrase;
      // Since we're using aliasing on the query, we couldn't use real type itself.
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-expect-error
      name =
        (_phrase = result.item.phrase) !== null && _phrase !== void 0
          ? _phrase
          : "";
      mappedResult.id = 0;
      // Construct the ulr since graphql is not returning the url unlike the rest endpoint
      mappedResult.link = constructSearchLogItemUrl(name);
      mappedResult.type = "search_log";
    } else {
      var _result$item2, _result$item3, _Number, _result$item4, _result$item5;
      if (
        ((_result$item2 = result.item) === null || _result$item2 === void 0
          ? void 0
          : _result$item2.__typename) === "Course"
      ) {
        var _item$title, _item$images$px50x, _item$instructors;
        const item = result.item;
        name =
          (_item$title = item.title) !== null && _item$title !== void 0
            ? _item$title
            : "";
        mappedResult.img_link =
          (_item$images$px50x = item.images.px50x50) !== null &&
          _item$images$px50x !== void 0
            ? _item$images$px50x
            : "";
        mappedResult.instructor_name =
          (_item$instructors = item.instructors) === null ||
          _item$instructors === void 0
            ? void 0
            : _item$instructors.map((inst) => inst.name);
        mappedResult.type = "course";
      } else if (
        ((_result$item3 = result.item) === null || _result$item3 === void 0
          ? void 0
          : _result$item3.__typename) === "CourseInstructor"
      ) {
        var _name, _item$images$px50x2;
        const item = result.item;
        name =
          (_name = result.item.name) !== null && _name !== void 0 ? _name : "";
        mappedResult.display_name = name;
        mappedResult.img_link =
          (_item$images$px50x2 = item.images.px50x50) !== null &&
          _item$images$px50x2 !== void 0
            ? _item$images$px50x2
            : "";
        mappedResult.type = "user";
      }

      // Below are common between Course and Instructor
      mappedResult.id =
        (_Number = Number(
          (_result$item4 = result.item) === null || _result$item4 === void 0
            ? void 0
            : _result$item4.id
        )) !== null && _Number !== void 0
          ? _Number
          : 0;
      mappedResult.link =
        (_result$item5 = result.item) === null || _result$item5 === void 0
          ? void 0
          : _result$item5.url;
    }
    mappedResult.label = name;
    mappedResult.result_tracking_id = result.resultTrackingId;
    mappedResult.tracking_id = result.trackingId;
    mappedResults.push(mappedResult);
  });
  return mappedResults;
};
//# sourceMappingURL=graphql-results-util.js.map
