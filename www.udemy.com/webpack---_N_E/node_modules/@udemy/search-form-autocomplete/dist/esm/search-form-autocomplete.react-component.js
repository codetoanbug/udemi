import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _class, _class2, _dec, _class3, _class4, _descriptor, _class5;
import autobind from "autobind-decorator";
import classNames from "classnames";
import Cookies from "js-cookie";
import { observable } from "mobx";
import { observer } from "mobx-react";
import React from "react";
import ReactDOM from "react-dom";
import {
  Keys,
  getUniqueId,
  RootCloseWrapper,
} from "@udemy/design-system-utils";
import { generateTrackingId } from "@udemy/event-tracking";
import { withMatchMedia } from "@udemy/hooks";
import { withI18n } from "@udemy/i18n/";
import SearchIcon from "@udemy/icons/dist/search.ud-icon";
import { CookieConsent } from "@udemy/onetrust";
import { BlockList, IconButton } from "@udemy/react-core-components";
import { FormGroup, TextInput } from "@udemy/react-form-components";
import { noop } from "@udemy/shared-utils";
import { discoveryTracker } from "./external/browse/tracking";
import {
  MenuContentItemsOnEmptyState,
  MenuContentItems,
  MenuContentItemsWithImage,
} from "./menu-content-items.react-component";
import "./search-form-autocomplete.global.css";
let MenuContent =
  observer(
    (_class =
      ((_class2 = class MenuContent extends React.Component {
        render() {
          const {
            id,
            store,
            textSize,
            onMenuContentItemClick,
            trackMenuItemsImpression,
            showResultsWithImage,
          } = this.props;
          const MenuContentItemsComponent = showResultsWithImage
            ? MenuContentItemsWithImage
            : MenuContentItems;
          return /*#__PURE__*/ React.createElement(
            BlockList,
            /**
             * WARN: This id is used by TextInput.
             * Changing this may break ARIA
             */ {
              id: `${id}-menu-content-items`,
              "data-testid": "menu-content-items",
              size: textSize,
              className: classNames(
                "js-suggestions",
                {
                  "ud-search-form-autocomplete-suggestions":
                    !showResultsWithImage,
                },
                {
                  "ud-search-form-autocomplete-suggestions-with-image":
                    showResultsWithImage,
                }
              ),
              role: "listbox",
            },
            store.shouldLoadPopularQueries
              ? /*#__PURE__*/ React.createElement(
                  MenuContentItemsOnEmptyState,
                  {
                    id: id,
                    store: store,
                    onMenuContentItemClick: onMenuContentItemClick,
                    trackMenuItemsImpression: trackMenuItemsImpression,
                  }
                )
              : /*#__PURE__*/ React.createElement(MenuContentItemsComponent, {
                  id: id,
                  store: store,
                  onMenuContentItemClick: onMenuContentItemClick,
                  trackMenuItemsImpression: trackMenuItemsImpression,
                })
          );
        }
      }),
      (_class2.defaultProps = {
        trackMenuItemsImpression: noop,
        onMenuContentItemClick: noop,
        textSize: "large",
        showResultsWithImage: false,
      }),
      _class2))
  ) || _class;
let InternalSearchFormAutocomplete =
  ((_dec = withMatchMedia({
    isHeaderMobile: "header-mobile-max",
  })),
  _dec(
    (_class3 =
      observer(
        (_class3 =
          ((_class4 =
            ((_class5 = class InternalSearchFormAutocomplete extends (
              React.Component
            ) {
              constructor() {
                super(...arguments);
                this.defaultId = getUniqueId("search-form-autocomplete");
                _initializerDefineProperty(this, "isOnTask", _descriptor, this);
              }
              get id() {
                return this.props.id || this.defaultId;
              }
              startTimeOnTask() {
                const isMenuOpen =
                  this.props.searchFormAutocompleteStore.isMenuOpen;
                if (isMenuOpen && !this.isOnTask) {
                  this.isOnTask = true;
                  UD.performance.start("timeontask:autocomplete");
                } else if (!isMenuOpen) {
                  this.isOnTask = false;
                }
              }
              endTimeOnTask() {
                UD.performance.end("timeontask:autocomplete");
                this.isOnTask = false;
              }
              onFocus(event) {
                var _this$props$inputProp, _this$props$inputProp2;
                this.props.searchFormAutocompleteStore.openMenu();
                this.startTimeOnTask();
                this.props.searchFormAutocompleteStore.suggest(
                  event.target.value
                );
                (_this$props$inputProp = (_this$props$inputProp2 =
                  this.props.inputProps).onFocus) === null ||
                _this$props$inputProp === void 0
                  ? void 0
                  : _this$props$inputProp.call(_this$props$inputProp2, event);
              }
              changeMenuVisibility() {
                const { searchFormAutocompleteStore: store } = this.props;
                if (!this.props.isHeaderMobile && store.isMenuOpen) {
                  this.closeMenu();
                } else if (
                  this.props.isHeaderMobile &&
                  !store.isMenuOpen &&
                  this.isOnTask
                ) {
                  // menu closed by header checkbox state (header-toggle-search-bar)
                  this.closeMenu();
                }
              }
              closeMenu() {
                this.endTimeOnTask();
                const { searchFormAutocompleteStore: store } = this.props;
                store.closeMenu();
                if (store.suggestions.length > 0) {
                  discoveryTracker.trackAutoCompleteResultsBounce(
                    store.trackingId
                  );
                }
              }
              onChange(event) {
                var _this$props$inputProp3, _this$props$inputProp4;
                this.props.searchFormAutocompleteStore.suggest(
                  event.target.value
                );
                if (!this.props.searchFormAutocompleteStore.inputValue) {
                  this.props.searchFormAutocompleteStore.setSuggestions([]);
                }
                (_this$props$inputProp3 = (_this$props$inputProp4 =
                  this.props.inputProps).onChange) === null ||
                _this$props$inputProp3 === void 0
                  ? void 0
                  : _this$props$inputProp3.call(_this$props$inputProp4, event);
              }
              onSubmit() {
                if (!CookieConsent.allowsPerformanceCookies()) {
                  return;
                }
                Cookies.set(
                  "query_session_identifier_id",
                  generateTrackingId()
                );
              }
              onKeyDown(event) {
                const key = event.keyCode;
                const { searchFormAutocompleteStore: store } = this.props;
                if (key === Keys.RETURN && store.selectedSuggestion) {
                  event.preventDefault();
                  this.clickSelectedSuggestion(store.selectedSuggestionIndex);
                } else if (key === Keys.ESCAPE && !store.inputValue) {
                  var _document$getElementB;
                  event.preventDefault();
                  !this.props.isHeaderMobile && this.closeMenu();
                  (_document$getElementB = document.getElementById(this.id)) ===
                    null || _document$getElementB === void 0
                    ? void 0
                    : _document$getElementB.blur();
                } else if (key === Keys.ESCAPE) {
                  var _document$getElementB2;
                  event.preventDefault();
                  !this.props.isHeaderMobile && this.closeMenu();
                  (_document$getElementB2 = document.getElementById(
                    this.id
                  )) === null || _document$getElementB2 === void 0
                    ? void 0
                    : _document$getElementB2.focus();
                } else if (key === Keys.UP || key === Keys.DOWN) {
                  // Arrow should always cycle through suggestions.
                  event.preventDefault();
                  key === Keys.UP
                    ? store.selectPreviousSuggestion()
                    : store.selectNextSuggestion();
                } else if (
                  key === Keys.TAB &&
                  store.suggestions.length > 0 &&
                  store.isMenuOpen
                ) {
                  // Tab should only cycle through suggestions when they are shown.
                  // Otherwise the tab order would be trapped forever in the autosuggest.
                  event.preventDefault();
                  event.shiftKey
                    ? store.selectPreviousSuggestion()
                    : store.selectNextSuggestion();
                }
              }
              clickSelectedSuggestion(index) {
                var _containerNode$queryS;
                // eslint-disable-next-line react/no-find-dom-node
                const containerNode = ReactDOM.findDOMNode(this);
                containerNode === null || containerNode === void 0
                  ? void 0
                  : (_containerNode$queryS =
                      containerNode.querySelectorAll(".js-suggestions a")[
                        index
                      ]) === null || _containerNode$queryS === void 0
                  ? void 0
                  : _containerNode$queryS.click();
              }
              onMenuContentItemClick(index, autoCompleteResult) {
                return () => {
                  this.endTimeOnTask();
                  discoveryTracker.trackAutoCompleteResultClick(
                    index,
                    autoCompleteResult
                  );
                };
              }
              trackMenuItemsImpression() {
                const { searchFormAutocompleteStore: store } = this.props;
                if (store.suggestions.length > 0) {
                  discoveryTracker.trackAutoCompleteResultsImpression(
                    this.props.searchFormAutocompleteStore.trackingId,
                    this.props.searchFormAutocompleteStore.query
                  );
                }
              }
              get isExpanded() {
                const { searchFormAutocompleteStore: store } = this.props;
                return store.isMenuOpen && store.suggestions.length > 0;
              }
              get menuContent() {
                const {
                  textSize,
                  showResultsWithImage,
                  searchFormAutocompleteStore: store,
                } = this.props;
                if (!this.isExpanded) {
                  return null;
                }
                return /*#__PURE__*/ React.createElement(MenuContent, {
                  id: this.id,
                  store: store,
                  textSize: textSize,
                  onMenuContentItemClick: this.onMenuContentItemClick,
                  trackMenuItemsImpression: this.trackMenuItemsImpression,
                  showResultsWithImage: showResultsWithImage,
                });
              }
              render() {
                const {
                  formAction,
                  formActionParams,
                  // id,
                  inputProps,
                  label = this.props.gettext("Search"),
                  searchFormAutocompleteStore: store,
                  reversed,
                  submitButtonProps,
                  textSize,
                  /* eslint-disable @typescript-eslint/no-unused-vars */
                  showResultsWithImage,
                  isHeaderMobile,
                  gettext,
                  dgettext,
                  dngettext,
                  dpgettext,
                  ngettext,
                  npgettext,
                  pgettext,
                  interpolate,
                  ninterpolate,
                  /* eslint-enable @typescript-eslint/no-unused-vars */
                  ...htmlProps
                } = this.props;
                return /*#__PURE__*/ React.createElement(
                  RootCloseWrapper,
                  {
                    onRootClose: this.changeMenuVisibility,
                  },
                  /*#__PURE__*/ React.createElement(
                    FormGroup,
                    Object.assign({}, htmlProps, {
                      label: label,
                      labelProps: {
                        className: "ud-sr-only",
                      },
                      formControlId: this.id,
                      className: classNames(
                        "ud-search-form-autocomplete",
                        htmlProps.className
                      ),
                      onKeyDown: this.onKeyDown,
                    }),
                    /*#__PURE__*/ React.createElement(
                      "form",
                      {
                        action: formAction,
                        className: classNames(
                          "ud-search-form-autocomplete-input-group",
                          {
                            "ud-search-form-autocomplete-input-group-reversed":
                              reversed,
                          }
                        ),
                        onSubmit: this.onSubmit,
                      },
                      Object.entries(formActionParams).map((_ref) => {
                        let [name, value] = _ref;
                        return /*#__PURE__*/ React.createElement("input", {
                          key: name,
                          type: "hidden",
                          name: name,
                          value: value,
                        });
                      }),
                      /*#__PURE__*/ React.createElement(
                        TextInput,
                        Object.assign(
                          {
                            name: "q",
                            "data-testid": "search-input",
                            placeholder: label,
                          },
                          inputProps,
                          {
                            autoComplete: "off",
                            size: textSize,
                            className: classNames(
                              "ud-search-form-autocomplete-input",
                              inputProps.className
                            ),
                            onChange: this.onChange,
                            onFocus: this.onFocus,
                            value: store.searchPhrase,
                            role: "combobox",
                            "aria-autocomplete": "both",
                            "aria-haspopup": "true",
                            "aria-activedescendant":
                              store.selectedSuggestionIndex >= 0
                                ? `${this.id}-${store.selectedSuggestionIndex}`
                                : undefined,
                            "aria-expanded": this.isExpanded,
                            "aria-controls": `${this.id}-menu-content-items`,
                          }
                        )
                      ),
                      this.menuContent,
                      /*#__PURE__*/ React.createElement(
                        IconButton,
                        Object.assign({}, submitButtonProps, {
                          type: "submit",
                          disabled: !store.searchPhrase,
                        }),
                        /*#__PURE__*/ React.createElement(SearchIcon, {
                          color:
                            submitButtonProps.udStyle === "primary"
                              ? "inherit"
                              : "neutral",
                          label: gettext("Submit search"),
                        })
                      )
                    )
                  )
                );
              }
            }),
            (_class5.defaultProps = {
              id: undefined,
              label: undefined,
              inputProps: {},
              submitButtonProps: {
                udStyle: "ghost",
              },
              formAction: null,
              formActionParams: {},
              reversed: false,
              textSize: "large",
              showResultsWithImage: false,
              isHeaderMobile: null,
            }),
            _class5)),
          ((_descriptor = _applyDecoratedDescriptor(
            _class4.prototype,
            "isOnTask",
            [observable],
            {
              configurable: true,
              enumerable: true,
              writable: true,
              initializer: function () {
                return false;
              },
            }
          )),
          _applyDecoratedDescriptor(
            _class4.prototype,
            "startTimeOnTask",
            [autobind],
            Object.getOwnPropertyDescriptor(
              _class4.prototype,
              "startTimeOnTask"
            ),
            _class4.prototype
          ),
          _applyDecoratedDescriptor(
            _class4.prototype,
            "endTimeOnTask",
            [autobind],
            Object.getOwnPropertyDescriptor(_class4.prototype, "endTimeOnTask"),
            _class4.prototype
          ),
          _applyDecoratedDescriptor(
            _class4.prototype,
            "onFocus",
            [autobind],
            Object.getOwnPropertyDescriptor(_class4.prototype, "onFocus"),
            _class4.prototype
          ),
          _applyDecoratedDescriptor(
            _class4.prototype,
            "changeMenuVisibility",
            [autobind],
            Object.getOwnPropertyDescriptor(
              _class4.prototype,
              "changeMenuVisibility"
            ),
            _class4.prototype
          ),
          _applyDecoratedDescriptor(
            _class4.prototype,
            "closeMenu",
            [autobind],
            Object.getOwnPropertyDescriptor(_class4.prototype, "closeMenu"),
            _class4.prototype
          ),
          _applyDecoratedDescriptor(
            _class4.prototype,
            "onChange",
            [autobind],
            Object.getOwnPropertyDescriptor(_class4.prototype, "onChange"),
            _class4.prototype
          ),
          _applyDecoratedDescriptor(
            _class4.prototype,
            "onSubmit",
            [autobind],
            Object.getOwnPropertyDescriptor(_class4.prototype, "onSubmit"),
            _class4.prototype
          ),
          _applyDecoratedDescriptor(
            _class4.prototype,
            "onKeyDown",
            [autobind],
            Object.getOwnPropertyDescriptor(_class4.prototype, "onKeyDown"),
            _class4.prototype
          ),
          _applyDecoratedDescriptor(
            _class4.prototype,
            "onMenuContentItemClick",
            [autobind],
            Object.getOwnPropertyDescriptor(
              _class4.prototype,
              "onMenuContentItemClick"
            ),
            _class4.prototype
          ),
          _applyDecoratedDescriptor(
            _class4.prototype,
            "trackMenuItemsImpression",
            [autobind],
            Object.getOwnPropertyDescriptor(
              _class4.prototype,
              "trackMenuItemsImpression"
            ),
            _class4.prototype
          )),
          _class4))
      ) || _class3)
  ) || _class3);
export const SearchFormAutocomplete = withI18n(InternalSearchFormAutocomplete);
//# sourceMappingURL=search-form-autocomplete.react-component.js.map
