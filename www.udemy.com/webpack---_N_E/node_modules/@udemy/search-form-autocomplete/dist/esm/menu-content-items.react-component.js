import classNames from "classnames";
import { observer } from "mobx-react";
import React, { useEffect, useState } from "react";
import { useI18n } from "@udemy/i18n";
import ArticleIcon from "@udemy/icons/dist/article.ud-icon";
import EmptyCourseImageIcon from "@udemy/icons/dist/empty-course-image.ud-icon";
import PersonIcon from "@udemy/icons/dist/person.ud-icon";
import SearchIcon from "@udemy/icons/dist/search.ud-icon";
import TrendingGraphIcon from "@udemy/icons/dist/trending-graph.ud-icon";
import { Avatar, BlockList, Image } from "@udemy/react-core-components";
import { safelySetInnerHTML } from "@udemy/shared-utils";
import { boldSearchTerms } from "./bold-search-terms";
import "./search-form-autocomplete.global.css";
/**
 * Returns label for given menu content type
 */
const getMenuContentTypeLabel = (type, gettext) => {
  if (type === "course") {
    return gettext("Course");
  } else if (type === "user") {
    return gettext("Instructor");
  }
  return null;
};

/**
 * Returns the Menu Content Icon for the given result
 */
const MenuContentIcon = (_ref) => {
  let {
    id,
    title,
    display_name: displayName,
    type,
    img_link: imageLink,
    initials,
  } = _ref;
  let icon = null;
  let className = null;
  const [hasImage, setHasImage] = useState(!!imageLink);
  const onErrorImage = () => setHasImage(false);
  if (type === "course" && hasImage) {
    icon = /*#__PURE__*/ React.createElement(Image, {
      alt: "",
      src: imageLink,
      width: 32,
      height: 32,
      onError: onErrorImage,
    });
    className = "ud-search-form-autocomplete-group-course-img";
  } else if (type === "course") {
    icon = /*#__PURE__*/ React.createElement(EmptyCourseImageIcon, {
      size: "medium",
      label: false,
    });
    className = "ud-search-form-autocomplete-group-icon";
  } else if (type === "user") {
    const user = {
      id,
      image_75x75: imageLink,
      display_name: displayName,
      initials,
      title,
    };
    icon = /*#__PURE__*/ React.createElement(
      Avatar,
      Object.assign(
        {
          size: "small",
          user: user,
          alt: "NONE",
          onError: onErrorImage,
          "data-testid": "avatar",
        },
        !hasImage && {
          icon: /*#__PURE__*/ React.createElement(PersonIcon, {
            size: "small",
            color: "inherit",
            label: false,
          }),
        }
      )
    );
    className = "ud-search-form-autocomplete-group-img";
  } else {
    icon = /*#__PURE__*/ React.createElement(SearchIcon, {
      "data-testid": "search",
      size: "medium",
      label: false,
    });
    className = "ud-search-form-autocomplete-group-icon";
  }
  return /*#__PURE__*/ React.createElement(
    "div",
    {
      "data-testid": "menu-content-icon",
      "data-type": type,
      className: className,
    },
    icon
  );
};

/**
 * Menu content items using images and labels per result
 */
export const MenuContentItemsWithImage = observer((_ref2) => {
  let { id, store, onMenuContentItemClick, trackMenuItemsImpression } = _ref2;
  useEffect(trackMenuItemsImpression, [
    store.suggestions.map((s) => s.id).join(","),
    trackMenuItemsImpression,
  ]);
  const { gettext } = useI18n();
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    store.suggestions.map((result, index) => {
      const isSelected = index === store.selectedSuggestionIndex;
      return /*#__PURE__*/ React.createElement(
        "div",
        {
          key: `${index}-${result.link}`,
          "data-testid": "result-with-image",
          className: "ud-search-form-autocomplete-suggestion-block-list-item",
        },
        /*#__PURE__*/ React.createElement(
          BlockList.Item,
          {
            /**
             * WARN: Changing this id will affect ARIA.
             * Refer to SearchFormAutoComplete's TextInput attribute "aria-activedescendant"
             * **/
            id: `${id}-${index}`,
            "aria-label": result.ariaLabel,
            "aria-selected": isSelected,
            role: "option",
            key: index,
            href: result.link,
            color: "neutral",
            className: classNames("ud-search-form-autocomplete-suggestion", {
              "ud-search-form-autocomplete-suggestion-focus": isSelected,
            }),
            onClick: onMenuContentItemClick(index, result),
          },
          /*#__PURE__*/ React.createElement(
            "div",
            {
              "aria-hidden": "true",
              className: classNames("ud-search-form-autocomplete-group", {
                "ud-search-form-autocomplete-group-search":
                  result.type === "search_log",
              }),
              "data-testid": "group-search",
            },
            /*#__PURE__*/ React.createElement(MenuContentIcon, result),
            /*#__PURE__*/ React.createElement(
              "div",
              {
                className: "ud-search-form-autocomplete-suggestion-content",
              },
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  "data-purpose": "label",
                  "data-testid": "label",
                  className: classNames(
                    "ud-search-form-autocomplete-suggestion-content",
                    "ud-heading-md"
                  ),
                },
                result.label
              ),
              result.type !== "search_log" &&
                /*#__PURE__*/ React.createElement(
                  "div",
                  {
                    className: "ud-search-form-autocomplete-suggestion-details",
                  },
                  /*#__PURE__*/ React.createElement(
                    "div",
                    {
                      className: "ud-heading-xs",
                    },
                    getMenuContentTypeLabel(result.type, gettext)
                  ),
                  result.instructor_name &&
                    result.instructor_name.length > 0 &&
                    /*#__PURE__*/ React.createElement(
                      "div",
                      {
                        "aria-hidden": "true",
                        className: classNames(
                          "ud-text-xs",
                          "ud-search-form-autocomplete-suggestion-instructor-name"
                        ),
                        "data-testid": "instructor-name",
                      },
                      result.instructor_name[0]
                    )
                )
            )
          )
        )
      );
    })
  );
});

/**
 * For Empty State Search Autocomplete Suggestions Experiment - MX only
 */
export const MenuContentItemsOnEmptyState = observer((_ref3) => {
  let { id, store, onMenuContentItemClick, trackMenuItemsImpression } = _ref3;
  const { gettext } = useI18n();
  useEffect(trackMenuItemsImpression, [
    store.suggestions.map((s) => s.id).join(","),
    trackMenuItemsImpression,
  ]);
  const searchLogs = store.suggestions.filter(
    (result) => result.type === "search_log"
  );
  const courseLogs = store.suggestions.filter(
    (result) => result.type === "course"
  );
  const baseCourseLogsIndex = store.suggestions.indexOf(courseLogs[0]);
  const isSelected = (index) => index === store.selectedSuggestionIndex;
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    searchLogs &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: "ud-search-form-autocomplete-title",
        },
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: classNames(
              "ud-heading-md",
              "ud-search-form-autocomplete-title-text"
            ),
            "data-purpose": "title",
          },
          gettext("Popular on Udemy")
        )
      ),
    searchLogs.map((result, index) => {
      return /*#__PURE__*/ React.createElement(
        "div",
        {
          key: `${index}-${result.link}`,
          className: "ud-search-form-autocomplete-suggestion-block-list-item",
        },
        /*#__PURE__*/ React.createElement(
          BlockList.Item,
          {
            /**
             * WARN: Changing this id will affect ARIA.
             * Refer to SearchFormAutoComplete's TextInput attribute "aria-activedescendant"
             * **/
            id: `${id}-${index}`,
            "aria-label": result.ariaLabel,
            "aria-selected": isSelected(index),
            role: "option",
            key: index,
            href: result.link,
            color: "neutral",
            className: classNames("ud-search-form-autocomplete-suggestion", {
              "ud-search-form-autocomplete-suggestion-focus": isSelected(index),
            }),
            onClick: onMenuContentItemClick(index, result),
          },
          /*#__PURE__*/ React.createElement(
            "div",
            {
              "aria-hidden": "true",
              className: "ud-search-form-autocomplete-group",
            },
            /*#__PURE__*/ React.createElement(
              "div",
              {
                className: "ud-search-form-autocomplete-group-icon",
              },
              /*#__PURE__*/ React.createElement(TrendingGraphIcon, {
                label: false,
              })
            ),
            /*#__PURE__*/ React.createElement(
              "div",
              {
                className: "ud-search-form-autocomplete-suggestion-content",
              },
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  "data-purpose": "label",
                  className: "ud-search-form-autocomplete-suggestion-content",
                },
                result.label
              )
            )
          )
        )
      );
    }),
    courseLogs &&
      /*#__PURE__*/ React.createElement(
        "div",
        {
          className: "ud-search-form-autocomplete-title",
        },
        /*#__PURE__*/ React.createElement(
          "div",
          {
            className: classNames(
              "ud-heading-md",
              "ud-search-form-autocomplete-title-text"
            ),
            "data-purpose": "title",
          },
          gettext("Popular Courses on Udemy")
        )
      ),
    courseLogs.map((result, idx) => {
      const index = idx + baseCourseLogsIndex;
      return /*#__PURE__*/ React.createElement(
        "div",
        {
          key: `${index}-${result.link}`,
          className: "ud-search-form-autocomplete-suggestion-block-list-item",
        },
        /*#__PURE__*/ React.createElement(
          BlockList.Item,
          {
            /**
             * WARN: Changing this id will affect ARIA.
             * Refer to SearchFormAutoComplete's TextInput attribute "aria-activedescendant"
             * **/
            id: `${id}-${index}`,
            "aria-label": result.ariaLabel,
            "aria-selected": isSelected(index),
            role: "option",
            key: index,
            href: result.link,
            color: "neutral",
            className: classNames("ud-search-form-autocomplete-suggestion", {
              "ud-search-form-autocomplete-suggestion-focus": isSelected(index),
            }),
            onClick: onMenuContentItemClick(index, result),
          },
          /*#__PURE__*/ React.createElement(
            "div",
            {
              "aria-hidden": "true",
              className: "ud-search-form-autocomplete-group",
            },
            /*#__PURE__*/ React.createElement(MenuContentIcon, result),
            /*#__PURE__*/ React.createElement(
              "div",
              {
                className: "ud-search-form-autocomplete-suggestion-content",
              },
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  "data-purpose": "label",
                  className: "ud-search-form-autocomplete-suggestion-content",
                },
                result.label
              ),
              /*#__PURE__*/ React.createElement(
                "div",
                {
                  className: "ud-search-form-autocomplete-suggestion-details",
                },
                /*#__PURE__*/ React.createElement(
                  "div",
                  {
                    className: "ud-heading-xs",
                  },
                  getMenuContentTypeLabel(result.type, gettext)
                ),
                result.instructor_name &&
                  result.instructor_name.length > 0 &&
                  /*#__PURE__*/ React.createElement(
                    "div",
                    {
                      "aria-hidden": "true",
                      className: classNames(
                        "ud-text-xs",
                        "ud-search-form-autocomplete-suggestion-instructor-name"
                      ),
                    },
                    result.instructor_name[0]
                  )
              )
            )
          )
        )
      );
    })
  );
});

/**
 * Menu content items using icons without labels
 */
export const MenuContentItems = observer((_ref4) => {
  let { id, store, onMenuContentItemClick, trackMenuItemsImpression } = _ref4;
  useEffect(trackMenuItemsImpression, [
    store.suggestions.map((s) => s.id).join(","),
    trackMenuItemsImpression,
  ]);
  return /*#__PURE__*/ React.createElement(
    React.Fragment,
    null,
    store.suggestions.map((result, index) => {
      const isSelected = index === store.selectedSuggestionIndex;
      const label = boldSearchTerms(result.label, store.inputValue);
      let icon = null;
      if (result.type === "course") {
        icon = /*#__PURE__*/ React.createElement(ArticleIcon, {
          label: false,
        });
      } else if (result.type === "user") {
        icon = /*#__PURE__*/ React.createElement(PersonIcon, {
          label: false,
        });
      } else {
        icon = /*#__PURE__*/ React.createElement(SearchIcon, {
          label: false,
        });
      }
      return /*#__PURE__*/ React.createElement(
        BlockList.Item,
        {
          key: index,
          /**
           * WARN: Changing this id will affect ARIA.
           * Refer to SearchFormAutoComplete's TextInput attribute "aria-activedescendant"
           * **/ id: `${id}-${index}`,
          href: result.link,
          "aria-selected": isSelected,
          role: "option",
          icon: icon,
          color: "neutral",
          "aria-label": result.ariaLabel,
          className: classNames("ud-search-form-autocomplete-suggestion", {
            "ud-search-form-autocomplete-suggestion-focus": isSelected,
          }),
          onClick: onMenuContentItemClick(index, result),
        },
        /*#__PURE__*/ React.createElement(
          "div",
          Object.assign(
            {
              "aria-hidden": "true",
              "data-type": result.type,
              className: "ud-search-form-autocomplete-suggestion-content",
            },
            safelySetInnerHTML({
              descriptionOfCaller: "search-form-autocomplete:label",
              html: label,
              dataPurpose: "label",
            })
          )
        )
      );
    })
  );
});
//# sourceMappingURL=menu-content-items.react-component.js.map
