import { ClientEvent } from "@udemy/event-tracking";
import { getRequestData } from "@udemy/shared-utils";

/**
 * Provides additional properties
 * for any object that can be tracked
 */

/**
 * A minimal representation of a buyable, or purchasable, item
 * used for event tracking
 */

// TODO: Move to browse/components/badge/course-badges.react-component.js once converted to Typescript

/**
 * Auto Complete Item for eventing
 */

export let BackendSourceOptions = /*#__PURE__*/ (function (
  BackendSourceOptions
) {
  BackendSourceOptions["DISCOVERY"] = "discovery";
  BackendSourceOptions["TAUGHT_COURSES"] = "taught_courses";
  BackendSourceOptions["USER_PROFILE_COURSES"] = "user_profile_courses";
  BackendSourceOptions["USER_WISHLISTED_COURSES"] = "user_wishlisted_courses";
  BackendSourceOptions["USER_COLLECTIONS"] = "user_collections";
  BackendSourceOptions["RELATED_LECTURES"] = "related_lectures";
  BackendSourceOptions["SHOPPING_CARTS"] = "shopping_carts";
  BackendSourceOptions["DISCOVERY_ALL_COURSES"] = "discovery_all_courses";
  BackendSourceOptions["SEARCH_RECOMMENDATIONS"] = "search_recommendations";
  return BackendSourceOptions;
})({});
export let LearningProductType = /*#__PURE__*/ (function (LearningProductType) {
  LearningProductType["COURSE"] = "course";
  return LearningProductType;
})({});
/**
 * Fired when a discovery item is seen by a user
 */
class DiscoveryItemImpressionEvent extends ClientEvent {
  constructor(_ref) {
    var _badgeFamilies$map;
    let {
      id,
      type,
      trackingId,
      serveTrackingId,
      backendSource,
      position,
      badgeFamilies,
      relatedSourceId,
      relatedSourceType,
    } = _ref;
    super("DiscoveryItemImpressionEvent");
    this.id = void 0;
    this.type = void 0;
    this.trackingId = void 0;
    this.serveTrackingId = void 0;
    this.backendSource = void 0;
    this.position = void 0;
    this.badges = void 0;
    this.relatedSourceId = void 0;
    this.relatedSourceType = void 0;
    this.id = id;
    this.type = type;
    this.trackingId = trackingId;
    this.serveTrackingId = serveTrackingId;
    this.backendSource = backendSource;
    this.position = position;
    this.badges =
      (_badgeFamilies$map =
        badgeFamilies === null || badgeFamilies === void 0
          ? void 0
          : badgeFamilies.map((family) => ({
              family,
            }))) !== null && _badgeFamilies$map !== void 0
        ? _badgeFamilies$map
        : null;
    this.relatedSourceId = relatedSourceId;
    this.relatedSourceType = relatedSourceType;
  }
}

/**
 * Fired when a discovery item is clicked by a user
 */
DiscoveryItemImpressionEvent.backendSourceOptions = {
  DISCOVERY: BackendSourceOptions.DISCOVERY,
  TAUGHT_COURSES: BackendSourceOptions.TAUGHT_COURSES,
  USER_PROFILE_COURSES: BackendSourceOptions.USER_PROFILE_COURSES,
  USER_WISHLISTED_COURSES: BackendSourceOptions.USER_WISHLISTED_COURSES,
  USER_COLLECTIONS: BackendSourceOptions.USER_COLLECTIONS,
  RELATED_LECTURES: BackendSourceOptions.RELATED_LECTURES,
  SHOPPING_CARTS: BackendSourceOptions.SHOPPING_CARTS,
  DISCOVERY_ALL_COURSES: BackendSourceOptions.DISCOVERY_ALL_COURSES,
  SEARCH_RECOMMENDATIONS: BackendSourceOptions.SEARCH_RECOMMENDATIONS,
};
class DiscoveryItemClickEvent extends ClientEvent {
  constructor(_ref2) {
    var _badgeFamilies$map2;
    let {
      id,
      type,
      trackingId,
      serveTrackingId,
      backendSource,
      position = 0,
      badgeFamilies,
    } = _ref2;
    super("DiscoveryItemClickEvent");
    this.id = void 0;
    this.type = void 0;
    this.trackingId = void 0;
    this.serveTrackingId = void 0;
    this.backendSource = void 0;
    this.position = void 0;
    this.badges = void 0;
    this.id = id;
    this.type = type;
    this.trackingId = trackingId;
    this.serveTrackingId = serveTrackingId;
    this.backendSource = backendSource;
    this.position = position;
    this.badges =
      (_badgeFamilies$map2 =
        badgeFamilies === null || badgeFamilies === void 0
          ? void 0
          : badgeFamilies.map((family) => ({
              family,
            }))) !== null && _badgeFamilies$map2 !== void 0
        ? _badgeFamilies$map2
        : null;
  }
}

/**
 * Fired when a discovery unit is seen by a user
 */
class DiscoveryUnitViewEvent extends ClientEvent {
  constructor(_ref3) {
    let { trackingId, unitTitle, renderType } = _ref3;
    super("DiscoveryUnitViewEvent");
    this.trackingId = void 0;
    this.title = void 0;
    this.renderType = void 0;
    this.trackingId = trackingId;
    this.title = unitTitle;
    this.renderType = renderType;
  }
}

/**
 This event is fired when a user sees any UFB notice link on a marketplace page
 **/
class UFBNoticeImpressionEvent extends ClientEvent {
  constructor(_ref4) {
    let { locale = getRequestData().locale, placement, url = null } = _ref4;
    super("UFBNoticeImpressionEvent");
    this.locale = void 0;
    this.placement = void 0;
    this.url = void 0;
    this.locale = locale;
    this.placement = placement;
    this.url = url;
  }
  get eventLocale() {
    return this.locale;
  }
  get eventPlacement() {
    return this.placement;
  }
}
var UFBNoticeVariant = /*#__PURE__*/ (function (UFBNoticeVariant) {
  UFBNoticeVariant["TEAM_ACCESS"] = "team_access";
  UFBNoticeVariant["COURSES_AND_CERTS"] = "courses_and_certs";
  UFBNoticeVariant["COMPANIES_TRUST"] = "companies_trust";
  UFBNoticeVariant["COURSES_AND_PATHS"] = "courses_and_paths";
  return UFBNoticeVariant;
})(UFBNoticeVariant || {});
/**
 This event is fired when a user clicks on any UFB notice link on a marketplace page
 */
class UFBNoticeClickEvent extends ClientEvent {
  constructor(_ref5) {
    let {
      locale = getRequestData().locale,
      placement,
      variant = null,
      url = null,
    } = _ref5;
    super("UFBNoticeClickEvent");
    this.locale = void 0;
    this.placement = void 0;
    this.variant = void 0;
    this.url = void 0;
    this.locale = locale;
    this.placement = placement;
    this.variant = variant;
    this.url = url;
  }
  get eventLocale() {
    return this.locale;
  }
  get eventPlacement() {
    return this.placement;
  }
  get eventVariant() {
    return this.variant;
  }
}

/**
 * Fired when user clicks the 'Buy Now' button
 */
class BuyNowEvent extends ClientEvent {
  constructor(_ref6) {
    let { buyable } = _ref6;
    super("BuyNowEvent");
    this.buyable = void 0;
    this.buyable = buyable;
  }
}

/**
 * Fired when user clicks the 'Enroll now' button
 */
class EnrollNowEvent extends ClientEvent {
  constructor(_ref7) {
    let { buyable } = _ref7;
    super("EnrollNowEvent");
    this.buyable = void 0;
    this.buyable = buyable;
  }
}

/**
 * Fired when quick view is viewed by a user
 */
class QuickViewBoxOpenEvent extends ClientEvent {
  constructor(_ref8) {
    let { id, type, trackingId } = _ref8;
    super("QuickViewBoxOpenEvent");
    this.id = void 0;
    this.type = void 0;
    this.trackingId = void 0;
    this.id = id;
    this.trackingId = trackingId;
    this.type = type;
  }
}

/**
 * Fired when user clicks the 'Wishlist' button
 */
class WishlistEvent extends ClientEvent {
  constructor(_ref9) {
    let { id, trackingId } = _ref9;
    super("WishlistEvent");
    this.id = void 0;
    this.trackingId = void 0;
    this.id = id;
    this.trackingId = trackingId;
  }
}

/**
 * Fire when an auto-complete item is clicked
 */
class AutoCompleteItemClickEvent extends ClientEvent {
  constructor(_ref10) {
    let { resultTrackingId, autoCompleteItem } = _ref10;
    super("AutoCompleteItemClickEvent");
    this.resultTrackingId = void 0;
    this.autoCompleteItem = void 0;
    this.resultTrackingId = resultTrackingId;
    this.autoCompleteItem = autoCompleteItem;
  }
}

/**
 * Fired when auto-complete results are displayed to user
 */
class AutoCompleteResultImpressionEvent extends ClientEvent {
  constructor(_ref11) {
    let { resultTrackingId, query } = _ref11;
    super("AutoCompleteResultImpressionEvent");
    this.resultTrackingId = void 0;
    this.query = void 0;
    this.resultTrackingId = resultTrackingId;
    this.query = query;
  }
}

/**
 * Fired when user bounces from auto-complete results
 */
class AutoCompleteResultBounceEvent extends ClientEvent {
  constructor(_ref12) {
    let { resultTrackingId } = _ref12;
    super("AutoCompleteResultBounceEvent");
    this.resultTrackingId = void 0;
    this.resultTrackingId = resultTrackingId;
  }
}

/**
 * Fired when user clicks clear history in auto complete results
 */
class AutoCompleteClearHistoryClickEvent extends ClientEvent {
  constructor(resultTrackingId) {
    super("AutoCompleteClearHistoryClickEvent");
  }
}

/**
 * Fires when gift flow starts
 */
class GiftBuyablesStartEvent extends ClientEvent {
  constructor(buyables, uiRegion) {
    super("GiftBuyablesStartEvent");
    this.buyables = void 0;
  }
  get allBuyables() {
    return this.buyables;
  }
}

/**
 * Fires when the user clicks/taps on the share button
 * on a Course Landing Page.
 */
class CourseShareEvent extends ClientEvent {
  constructor(courseId) {
    super("CourseShareEvent");
  }
}
/**
 * Fires when the user clicks/taps on a specific share channel from the share modal
 * on a Course Landing Page.
 */
class CourseShareToChannelEvent extends ClientEvent {
  constructor(courseId, channel) {
    super("CourseShareToChannelEvent");
  }
}
/**
 * Fired whenever a coupon is applied on the CLP or cart page, either by manual
 * entry from the user or being included as a URL param
 */
class CouponApplyEvent extends ClientEvent {
  constructor(buyables, couponCode, applicationMethod) {
    super("CouponApplyEvent");
  }
}

/**
 * Fired whenever a coupon is removed from the CLP or cart page
 */
class CouponRemoveEvent extends ClientEvent {
  constructor(buyables, couponCode) {
    super("CouponRemoveEvent");
  }
}

/**
 * Fired when user switches to MX or consumer subscription only courses in search and browse pages.
 */

class CollectionTypeSwitchEvent extends ClientEvent {
  constructor(_ref13) {
    let { query, resultCount, toCollectionType, fromCollectionType } = _ref13;
    super("CollectionTypeSwitchEvent");
    this.query = void 0;
    this.resultCount = void 0;
    this.fromCollectionType = void 0;
    this.toCollectionType = void 0;
    this.query = query;
    this.resultCount = resultCount;
    this.fromCollectionType = fromCollectionType;
    this.toCollectionType = toCollectionType;
  }
}

/**
 * Fires when a user manually changes the language sort option provided by search QLI
 */
class SearchInferenceLanguageChangeEvent extends ClientEvent {
  constructor(language, trackingId) {
    super("SearchInferenceLanguageChangeEvent");
  }
}

/**
 * Fires when a user sees the "related searches" container in the search experience
 */
class RelatedSearchesImpressionEvent extends ClientEvent {
  constructor(resultTrackingId) {
    super("RelatedSearchesImpressionEvent");
  }
}

/**
 * Fires when a user clicks on a "related search" in the search experience
 */
class RelatedSearchesItemClickEvent extends ClientEvent {
  constructor(trackingId, resultTrackingId) {
    super("RelatedSearchesItemClickEvent");
  }
}

/**
 *  Fired when filters are applied on course directory in search and browse pages.
 */

class DirectoryFilterChangeEvent extends ClientEvent {
  constructor(_ref14) {
    let { query, aggregation, option, isCheckedOnClick } = _ref14;
    super("DirectoryFilterChangeEvent");
    this.query = void 0;
    this.aggregation = void 0;
    this.option = void 0;
    this.isCheckedOnClick = void 0;
    this.query = query;
    this.aggregation = aggregation;
    this.option = option;
    this.isCheckedOnClick = isCheckedOnClick;
  }
}
var NoticeType = /*#__PURE__*/ (function (NoticeType) {
  NoticeType["WEB_BANNER"] = "web_banner";
  NoticeType["FEATURED_BANNER"] = "featured_banner";
  NoticeType["HOME_BANNER"] = "home_banner";
  NoticeType["MOBILE_BANNER"] = "mobile_banner";
  NoticeType["SMART_BAR"] = "smart_bar";
  NoticeType["UFB_SMART_BAR"] = "ufb_smart_bar";
  NoticeType["INSTRUCTOR_BAR"] = "instructor_bar";
  NoticeType["CART_SUCCESS_MESSAGE"] = "cart_success_message";
  NoticeType["PURCHASE_SUCCESS_MESSAGE"] = "purchase_success_message";
  NoticeType["FALLBACK_BANNER"] = "fallback_banner";
  NoticeType["WEB_CAROUSEL_SLIDE"] = "web_carousel_slide";
  return NoticeType;
})(NoticeType || {});
class BannerImpressionEvent extends ClientEvent {
  constructor(_ref15) {
    let {
      noticeId = 0,
      noticeType,
      personalizedNoticeSetId = null,
      personalizedNoticeSetName = null,
      topMembershipTargetGroupId = null,
      slideNumber = null,
    } = _ref15;
    super("BannerImpressionEvent");
    this.noticeId = void 0;
    this.noticeType = void 0;
    this.personalizedNoticeSetId = void 0;
    this.personalizedNoticeSetName = void 0;
    this.topMembershipTargetGroupId = void 0;
    this.slideNumber = void 0;
    this.noticeId = noticeId;
    this.noticeType = noticeType;
    this.personalizedNoticeSetId = personalizedNoticeSetId;
    this.personalizedNoticeSetName = personalizedNoticeSetName;
    this.topMembershipTargetGroupId = topMembershipTargetGroupId;
    this.slideNumber = slideNumber;
  }
}
class BannerClickEvent extends ClientEvent {
  constructor(_ref16) {
    let {
      noticeId = 0,
      noticeType,
      personalizedNoticeSetId = null,
      personalizedNoticeSetName = null,
      topMembershipTargetGroupId = null,
      slideNumber = null,
      url = null,
      uiRegion = null,
    } = _ref16;
    super("BannerClickEvent");
    this.noticeId = void 0;
    this.noticeType = void 0;
    this.personalizedNoticeSetId = void 0;
    this.personalizedNoticeSetName = void 0;
    this.topMembershipTargetGroupId = void 0;
    this.slideNumber = void 0;
    this.url = void 0;
    this.uiRegion = void 0;
    this.noticeId = noticeId;
    this.noticeType = noticeType;
    this.personalizedNoticeSetId = personalizedNoticeSetId;
    this.personalizedNoticeSetName = personalizedNoticeSetName;
    this.topMembershipTargetGroupId = topMembershipTargetGroupId;
    this.slideNumber = slideNumber;
    this.url = url;
    this.uiRegion = uiRegion;
  }
}
class SmartbarImpressionEvent extends ClientEvent {
  constructor(_ref17) {
    let {
      noticeId = 0,
      noticeType,
      personalizedNoticeSetId = null,
      personalizedNoticeSetName = null,
      topMembershipTargetGroupId = null,
    } = _ref17;
    super("SmartbarImpressionEvent");
    this.noticeId = void 0;
    this.noticeType = void 0;
    this.personalizedNoticeSetId = void 0;
    this.personalizedNoticeSetName = void 0;
    this.topMembershipTargetGroupId = void 0;
    this.noticeId = noticeId;
    this.noticeType = noticeType;
    this.personalizedNoticeSetId = personalizedNoticeSetId;
    this.personalizedNoticeSetName = personalizedNoticeSetName;
    this.topMembershipTargetGroupId = topMembershipTargetGroupId;
  }
}
class SmartbarClickEvent extends ClientEvent {
  constructor(_ref18) {
    let {
      noticeId = 0,
      noticeType,
      url,
      location = "action_url",
      personalizedNoticeSetId = null,
      personalizedNoticeSetName = null,
      topMembershipTargetGroupId = null,
    } = _ref18;
    super("SmartbarClickEvent");
    this.noticeId = void 0;
    this.noticeType = void 0;
    this.personalizedNoticeSetId = void 0;
    this.personalizedNoticeSetName = void 0;
    this.topMembershipTargetGroupId = void 0;
    this.url = void 0;
    this.location = void 0;
    this.noticeId = noticeId;
    this.noticeType = noticeType;
    this.personalizedNoticeSetId = personalizedNoticeSetId;
    this.personalizedNoticeSetName = personalizedNoticeSetName;
    this.topMembershipTargetGroupId = topMembershipTargetGroupId;
    this.url = url;
    this.location = location;
  }
}
class SmartbarHideEvent extends ClientEvent {
  constructor(_ref19) {
    let {
      noticeId = 0,
      noticeType,
      personalizedNoticeSetId = null,
      personalizedNoticeSetName = null,
      topMembershipTargetGroupId = null,
    } = _ref19;
    super("SmartbarHideEvent");
    this.noticeId = void 0;
    this.noticeType = void 0;
    this.personalizedNoticeSetId = void 0;
    this.personalizedNoticeSetName = void 0;
    this.topMembershipTargetGroupId = void 0;
    this.noticeId = noticeId;
    this.noticeType = noticeType;
    this.personalizedNoticeSetId = personalizedNoticeSetId;
    this.personalizedNoticeSetName = personalizedNoticeSetName;
    this.topMembershipTargetGroupId = topMembershipTargetGroupId;
  }
}

/**
 * Fired when a user clicks on the CTA button on the smart bar on the logged-in-home-page
 * or on the CTA button on the smart bar in the shopping cart page, when a user is targeted with a
 * campaign that requires them to manually opt in to deals as part of pricing and legal compliance efforts.
 */

class DealOptInEvent extends ClientEvent {
  constructor() {
    let noticeId =
      arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
    super("DealOptInEvent");
    this.noticeId = void 0;
    this.noticeId = noticeId;
  }
}
class OccupationCardImpressionEvent extends ClientEvent {
  constructor(_ref20) {
    let { occupationId, occupationName, index, uiRegion } = _ref20;
    super("OccupationCardImpressionEvent");
    this.occupationId = void 0;
    this.occupationName = void 0;
    this.index = void 0;
    this.uiRegion = void 0;
    this.occupationId = occupationId;
    this.occupationName = occupationName;
    this.index = index;
    this.uiRegion = uiRegion;
  }
}
class OccupationCardClickEvent extends ClientEvent {
  constructor(_ref21) {
    let { occupationId, occupationName, index, uiRegion } = _ref21;
    super("OccupationCardClickEvent");
    this.occupationId = void 0;
    this.occupationName = void 0;
    this.index = void 0;
    this.uiRegion = void 0;
    this.occupationId = occupationId;
    this.occupationName = occupationName;
    this.index = index;
    this.uiRegion = uiRegion;
  }
}
class OccupationRelatedSearchesImpressionEvent extends ClientEvent {
  constructor(queryId) {
    super("OccupationRelatedSearchesImpressionEvent");
    this.queryId = void 0;
    this.queryId = queryId;
  }
}
class OccupationRelatedSearchesItemClickEvent extends ClientEvent {
  constructor(queryId, searchPhrase) {
    super("OccupationRelatedSearchesItemClickEvent");
    this.queryId = void 0;
    this.searchPhrase = void 0;
    this.queryId = queryId;
    this.searchPhrase = searchPhrase;
  }
}
class MFABannerImpressionEvent extends ClientEvent {
  constructor() {
    super("MFABannerImpressionEvent");
  }
}
class MFAFlowEnableEvent extends ClientEvent {
  constructor() {
    super("MFAFlowEnableEvent");
  }
}
class MFAModalLaunchEvent extends ClientEvent {
  constructor() {
    super("MFAModalLaunchEvent");
  }
}
class MFAFlowDisableEvent extends ClientEvent {
  constructor() {
    super("MFAFlowDisableEvent");
  }
}
class InstructorNoticeImpressionEvent extends ClientEvent {
  constructor(uiRegion) {
    super("InstructorNoticeImpressionEvent");
    this.uiRegion = void 0;
    this.uiRegion = uiRegion;
  }
}
class InstructorNoticeClickEvent extends ClientEvent {
  constructor(uiRegion) {
    super("InstructorNoticeClickEvent");
    this.uiRegion = void 0;
    this.uiRegion = uiRegion;
  }
}
class BlogCTAImpressionEvent extends ClientEvent {
  constructor(url) {
    super("BlogCTAImpressionEvent");
    this.url = void 0;
    this.url = url;
  }
}
class BlogCTAClickEvent extends ClientEvent {
  constructor(url) {
    super("BlogCTAClickEvent");
    this.url = void 0;
    this.url = url;
  }
}

/**
 * Fires when a user see Coding Exercise Count
 */
class CodingExerciseCountImpressionEvent extends ClientEvent {
  constructor(_ref22) {
    let { id = null, trackingId = null, numCodingExercises } = _ref22;
    super("CodingExerciseCountImpressionEvent");
    this.id = void 0;
    this.trackingId = void 0;
    this.numCodingExercises = void 0;
    this.id = id;
    this.trackingId = trackingId;
    this.numCodingExercises = numCodingExercises;
  }
}
/**
Fired when a user is presented with a testimonial
*/
class TestimonialImpressionEvent extends ClientEvent {
  constructor(_ref23) {
    let { id, type, uiRegion } = _ref23;
    super("TestimonialImpressionEvent");
    this.id = void 0;
    this.type = void 0;
    this.uiRegion = void 0;
    this.id = id;
    this.type = type;
    this.uiRegion = uiRegion;
  }
}

/**
Fired when a user clicks on a link in the testimonial
*/
class TestimonialClickEvent extends ClientEvent {
  constructor(_ref24) {
    let { id, type, uiRegion, url = null } = _ref24;
    super("TestimonialClickEvent");
    this.id = void 0;
    this.type = void 0;
    this.url = void 0;
    this.uiRegion = void 0;
    this.id = id;
    this.type = type;
    this.uiRegion = uiRegion;
    this.url = url;
  }
}
class InstructorProfileClickEvent extends ClientEvent {
  constructor(_ref25) {
    let { instructorId, uiRegion } = _ref25;
    super("InstructorProfileClickEvent");
    this.instructorId = void 0;
    this.uiRegion = void 0;
    this.instructorId = instructorId;
    this.uiRegion = uiRegion;
  }
}
class LectureDiscoveryCardClickEvent extends ClientEvent {
  constructor(_ref26) {
    let { backendSource, id, position, serveTrackingId, trackingId } = _ref26;
    super("LectureDiscoveryCardClickEvent");
    this.backendSource = void 0;
    this.id = void 0;
    this.position = void 0;
    this.serveTrackingId = void 0;
    this.trackingId = void 0;
    this.backendSource = backendSource;
    this.id = id;
    this.position = position;
    this.serveTrackingId = serveTrackingId;
    this.trackingId = trackingId;
  }
}
class LectureDiscoveryCardImpressionEvent extends ClientEvent {
  constructor(_ref27) {
    let { backendSource, id, position, serveTrackingId, trackingId } = _ref27;
    super("LectureDiscoveryCardImpressionEvent");
    this.backendSource = void 0;
    this.id = void 0;
    this.position = void 0;
    this.serveTrackingId = void 0;
    this.trackingId = void 0;
    this.backendSource = backendSource;
    this.id = id;
    this.position = position;
    this.serveTrackingId = serveTrackingId;
    this.trackingId = trackingId;
  }
}

/* export events in alphabetical order*/
export {
  AutoCompleteClearHistoryClickEvent,
  AutoCompleteItemClickEvent,
  AutoCompleteResultBounceEvent,
  AutoCompleteResultImpressionEvent,
  BannerClickEvent,
  BannerImpressionEvent,
  BlogCTAClickEvent,
  BlogCTAImpressionEvent,
  BuyNowEvent,
  CollectionTypeSwitchEvent,
  CouponApplyEvent,
  CouponRemoveEvent,
  CourseShareEvent,
  CourseShareToChannelEvent,
  DealOptInEvent,
  DirectoryFilterChangeEvent,
  DiscoveryItemClickEvent,
  DiscoveryItemImpressionEvent,
  DiscoveryUnitViewEvent,
  EnrollNowEvent,
  GiftBuyablesStartEvent,
  CodingExerciseCountImpressionEvent,
  InstructorNoticeClickEvent,
  InstructorNoticeImpressionEvent,
  InstructorProfileClickEvent,
  LectureDiscoveryCardClickEvent,
  LectureDiscoveryCardImpressionEvent,
  MFABannerImpressionEvent,
  MFAFlowDisableEvent,
  MFAFlowEnableEvent,
  MFAModalLaunchEvent,
  OccupationCardClickEvent,
  OccupationCardImpressionEvent,
  OccupationRelatedSearchesImpressionEvent,
  OccupationRelatedSearchesItemClickEvent,
  QuickViewBoxOpenEvent,
  RelatedSearchesImpressionEvent,
  RelatedSearchesItemClickEvent,
  SearchInferenceLanguageChangeEvent,
  SmartbarClickEvent,
  SmartbarHideEvent,
  SmartbarImpressionEvent,
  TestimonialClickEvent,
  TestimonialImpressionEvent,
  UFBNoticeClickEvent,
  UFBNoticeImpressionEvent,
  WishlistEvent,
};
//# sourceMappingURL=events.js.map
