import qs from "qs";
import React from "react";
import { getQueryParams } from "../env/query-params";
import { serverOrClient } from "../env/server-or-client";
function getFirstPageIndicators(queryParams, currentHref) {
  if (!queryParams.p) {
    queryParams.p = 1;
  }
  queryParams.p += 1;
  return /*#__PURE__*/ React.createElement("link", {
    key: "next",
    rel: "next",
    href: `${currentHref}?${qs.stringify(queryParams)}`,
  });
}
function getLastPageIndicators(queryParams, currentHref) {
  queryParams.p -= 1;
  return /*#__PURE__*/ React.createElement("link", {
    key: "prev",
    rel: "prev",
    href: `${currentHref}?${qs.stringify(queryParams)}`,
  });
}
function getSecondPageIndicators(queryParams, currentHref) {
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  const { p, ...prevQueryParams } = queryParams;
  const nextQueryParams = Object.assign({}, queryParams);
  nextQueryParams.p += 1;
  if (Object.keys(prevQueryParams).length === 0) {
    return [
      /*#__PURE__*/ React.createElement("link", {
        key: "prev",
        rel: "prev",
        href: currentHref,
      }),
      /*#__PURE__*/ React.createElement("link", {
        key: "next",
        rel: "next",
        href: `${currentHref}?${qs.stringify(nextQueryParams)}`,
      }),
    ];
  }
  return [
    /*#__PURE__*/ React.createElement("link", {
      key: "prev",
      rel: "prev",
      href: `${currentHref}?${qs.stringify(prevQueryParams)}`,
    }),
    /*#__PURE__*/ React.createElement("link", {
      key: "next",
      rel: "next",
      href: `${currentHref}?${qs.stringify(nextQueryParams)}`,
    }),
  ];
}
function getMiddlePageInidicators(queryParams, currentHref) {
  const nextQueryParams = Object.assign({}, queryParams);
  nextQueryParams.p += 1;
  const prevQueryParams = Object.assign({}, queryParams);
  prevQueryParams.p -= 1;
  return [
    /*#__PURE__*/ React.createElement("link", {
      key: "prev",
      rel: "prev",
      href: `${currentHref}?${qs.stringify(prevQueryParams)}`,
    }),
    /*#__PURE__*/ React.createElement("link", {
      key: "next",
      rel: "next",
      href: `${currentHref}?${qs.stringify(nextQueryParams)}`,
    }),
  ];
}
/**
 * Component that renders `<link>` tags for paginated content into the document head
 */
export const PaginatedContentIndicator = (_ref) => {
  var _location;
  let { currentPage, totalPages, location, renderTags } = _ref;
  location =
    (_location = location) !== null && _location !== void 0
      ? _location
      : serverOrClient.global.location;
  if (!currentPage || !totalPages) {
    return null;
  }
  let linkTags = [];
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const queryParams = getQueryParams(location);
  if (queryParams.p) {
    queryParams.p = parseInt(queryParams.p, 10);
  }
  const currentHref = location.origin + location.pathname;
  if (currentPage === 1 && totalPages === 1) {
    linkTags = [];
  } else if (currentPage === totalPages) {
    linkTags.push(getLastPageIndicators(queryParams, currentHref));
  } else if (currentPage === 1) {
    linkTags.push(getFirstPageIndicators(queryParams, currentHref));
  } else if (currentPage === 2) {
    linkTags.push(...getSecondPageIndicators(queryParams, currentHref));
  } else {
    linkTags.push(...getMiddlePageInidicators(queryParams, currentHref));
  }
  return renderTags(linkTags);
};
//# sourceMappingURL=paginated-content-indicator.js.map
