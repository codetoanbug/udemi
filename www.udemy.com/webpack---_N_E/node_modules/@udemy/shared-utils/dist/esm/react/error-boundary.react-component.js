import _initializerDefineProperty from "@babel/runtime/helpers/initializerDefineProperty";
import _applyDecoratedDescriptor from "@babel/runtime/helpers/applyDecoratedDescriptor";
import _initializerWarningHelper from "@babel/runtime/helpers/initializerWarningHelper";
var _class, _class2, _descriptor, _descriptor2;
import { action, observable } from "mobx";
import { observer } from "mobx-react";
import React, { Component } from "react";

/** React prop interface for `ErrorBoundary` component */

/**
 * ### ErrorBoundary
 *
 * A component that catches errors and displays a fallback UI (null).
 *
 * @remarks
 * The default component exported by this file is DjangoErrorBoundary, which is a wrapper around this component.
 */
export let ErrorBoundary =
  observer(
    (_class =
      ((_class2 = class ErrorBoundary extends Component {
        constructor() {
          super(...arguments);
          _initializerDefineProperty(this, "error", _descriptor, this);
          _initializerDefineProperty(this, "info", _descriptor2, this);
        }
        componentDidCatch(error, info) {
          var _this$props$captureEx, _this$props;
          this.setErrorState(error, info);
          (_this$props$captureEx = (_this$props = this.props)
            .captureException) === null || _this$props$captureEx === void 0
            ? void 0
            : _this$props$captureEx.call(_this$props, error);
        }
        setErrorState(error, info) {
          this.error = error;
          this.info = info;
        }
        render() {
          return this.error ? null : this.props.children;
        }
      }),
      ((_descriptor = _applyDecoratedDescriptor(
        _class2.prototype,
        "error",
        [observable],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return null;
          },
        }
      )),
      (_descriptor2 = _applyDecoratedDescriptor(
        _class2.prototype,
        "info",
        [observable],
        {
          configurable: true,
          enumerable: true,
          writable: true,
          initializer: function () {
            return null;
          },
        }
      )),
      _applyDecoratedDescriptor(
        _class2.prototype,
        "setErrorState",
        [action],
        Object.getOwnPropertyDescriptor(_class2.prototype, "setErrorState"),
        _class2.prototype
      )),
      _class2))
  ) || _class;

/**
 * ### withErrorBoundary
 *
 * A HOC that wraps a component with an ErrorBoundary
 *
 * @param WrappedComponent - The Component you are wrapping with the ErrorBoundary
 * @param captureException - The Sentry instance's captureException to trigger if an error is caught.
 * Note that this is default to `Raven.captureException` within the monolith
 */
export function withErrorBoundary(WrappedComponent, captureException) {
  var _WrappedComponent$dis;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  const ComponentWithErrorBoundary = /*#__PURE__*/ React.forwardRef(
    (props, ref) => {
      return /*#__PURE__*/ React.createElement(
        ErrorBoundary,
        {
          captureException: captureException,
        },
        /*#__PURE__*/ React.createElement(
          WrappedComponent,
          Object.assign(
            {
              ref: ref,
            },
            props
          )
        )
      );
    }
  );
  ComponentWithErrorBoundary.displayName = `WithErrorBoundary(${
    (_WrappedComponent$dis = WrappedComponent.displayName) !== null &&
    _WrappedComponent$dis !== void 0
      ? _WrappedComponent$dis
      : WrappedComponent.name
  })`;
  return ComponentWithErrorBoundary;
}
//# sourceMappingURL=error-boundary.react-component.js.map
