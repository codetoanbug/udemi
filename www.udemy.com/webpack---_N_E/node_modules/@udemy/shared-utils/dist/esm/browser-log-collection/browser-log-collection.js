import axios from "axios";
import { getConfigData } from "../data/get-config-data";

/**
 * The BrowserLogger class can be used to send log events to Datadog from the browser.
 *
 * Usage example:
 * import BrowserLogger from 'utils/browser-log-collection'
 *
 * const browserLogger = BrowserLogger('my-component');
 * browserLogger.info('some logging event', {otherData: 123, moreData: 'information'});
 *
 * To see the sent logs in Datadog:
 * 1. Go to the log search page https://app.datadoghq.com/logs
 * 2. Query for `source:browser` and `service:website-django.my-component`
 */
// eslint-disable-next-line import/no-default-export
export class BrowserLogger {
  constructor(service) {
    this._clientToken = void 0;
    this._url = void 0;
    this._service = void 0;
    this._clientToken = "pub4ecb41fd37fb63f77d38e05f54b0fb29";
    // Same endpoint as used by @datadog/browser-logs library
    this._url = `https://browser-http-intake.logs.datadoghq.com/v1/input/${this._clientToken}`;
    this._service = service ? `website-django.${service}` : "website-django";
  }
  get _env() {
    return getConfigData().env;
  }

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  _sendLog(level, message) {
    let data =
      arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    if (this._env !== "PROD") {
      return;
    }

    // Following the format described here https://docs.datadoghq.com/api/v1/logs/#send-logs
    const logData = Object.assign(
      {
        level,
        message,
        ddsource: "browser",
        service: this._service,
        ddtags: `env:${this._env}`,
      },
      data
    );
    axios.post(this._url, logData);
  }
  info() {
    for (
      var _len = arguments.length, args = new Array(_len), _key = 0;
      _key < _len;
      _key++
    ) {
      args[_key] = arguments[_key];
    }
    this._sendLog("info", ...args);
  }
  debug() {
    for (
      var _len2 = arguments.length, args = new Array(_len2), _key2 = 0;
      _key2 < _len2;
      _key2++
    ) {
      args[_key2] = arguments[_key2];
    }
    this._sendLog("debug", ...args);
  }
  warn() {
    for (
      var _len3 = arguments.length, args = new Array(_len3), _key3 = 0;
      _key3 < _len3;
      _key3++
    ) {
      args[_key3] = arguments[_key3];
    }
    this._sendLog("warn", ...args);
  }
  error() {
    for (
      var _len4 = arguments.length, args = new Array(_len4), _key4 = 0;
      _key4 < _len4;
      _key4++
    ) {
      args[_key4] = arguments[_key4];
    }
    this._sendLog("error", ...args);
  }
}
//# sourceMappingURL=browser-log-collection.js.map
