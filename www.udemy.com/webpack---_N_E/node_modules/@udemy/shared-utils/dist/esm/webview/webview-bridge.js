import { getOSName } from "../env/get-os-name";
import { isMobileApp } from "../env/is-mobile-app";

/**
 * Single interface that defines message passing bus to communicate with
 * native apps if the user is using navigating within a webview
 */

/**
 * Exposes both the WebviewBridge implementation and the LegacyWebviewBridge that
 * supports backwards compatibility for existing native apps in the wild.
 */
export class NativeAppWebviewBridge {
  constructor(argWindow) {
    this.argWindow = argWindow;
    if (typeof argWindow !== "undefined") {
      this.argWindow = argWindow;
      // Attempting to assgn window to argWindow during isomorphic rendering results in a TemplateSyntaxError.
      // So, check that the window exists (i.e, we are not in iso rendering) before assigning.
    } else if (typeof window !== "undefined") {
      this.argWindow = window;
    }
  }
  getAndroidClient() {
    var _this$argWindow, _this$argWindow$Andro;
    if (
      isAndroidNative() &&
      typeof ((_this$argWindow = this.argWindow) === null ||
      _this$argWindow === void 0
        ? void 0
        : (_this$argWindow$Andro = _this$argWindow.AndroidClient) === null ||
          _this$argWindow$Andro === void 0
        ? void 0
        : _this$argWindow$Andro.postMessage) === "function"
    ) {
      return this.argWindow.AndroidClient.postMessage.bind(
        this.argWindow.AndroidClient
      );
    }
    return null;
  }
  getiOSClient() {
    var _this$argWindow2, _this$argWindow2$webk;
    if (
      isiOSNative() &&
      typeof ((_this$argWindow2 = this.argWindow) === null ||
      _this$argWindow2 === void 0
        ? void 0
        : (_this$argWindow2$webk = _this$argWindow2.webkit) === null ||
          _this$argWindow2$webk === void 0
        ? void 0
        : _this$argWindow2$webk.messageHandlers.iOSClient.postMessage) ===
        "function"
    ) {
      return this.argWindow.webkit.messageHandlers.iOSClient.postMessage.bind(
        this.argWindow.webkit.messageHandlers.iOSClient
      );
    }
    return null;
  }

  /**
   * Generic method that sends any payload to the iOS or Android webview message handlers
   * that conforms to the WebviewMessage interface.
   */
  sendMessage(message) {
    const androidClient = this.getAndroidClient();
    if (androidClient) {
      var _this$argWindow3;
      androidClient(JSON.stringify(message));
      if (
        message.sendLegacyAndroidMessage &&
        (_this$argWindow3 = this.argWindow) !== null &&
        _this$argWindow3 !== void 0 &&
        _this$argWindow3.AndroidClient
      ) {
        var _this$argWindow4;
        message.sendLegacyAndroidMessage(
          (_this$argWindow4 = this.argWindow) === null ||
            _this$argWindow4 === void 0
            ? void 0
            : _this$argWindow4.AndroidClient
        );
      }
    } else {
      const iOSClient = this.getiOSClient();
      if (iOSClient) {
        iOSClient(JSON.stringify(message));
      }
    }
  }
}
function isAndroidNative() {
  return isMobileApp() && getOSName() === "android";
}
function isiOSNative() {
  return isMobileApp() && getOSName() === "ios";
}
//# sourceMappingURL=webview-bridge.js.map
