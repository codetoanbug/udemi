import { addGlobalEventProcessor, getCurrentHub } from '@sentry/browser';
import { getCurrentSessionURL, event } from '@fullstory/browser';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

/**
 * Get the project ID from a Sentry DSN
 * @param {string} dsn
 */
var getProjectIdFromSentryDsn = function (dsn) {
    return new URL(dsn).pathname.replace('/', '');
};
var isError = function (exception) {
    return exception.message !== undefined;
};
/**
 * Get the message and name properties from the original exception
 * @param {EventHint} hint
 */
var getOriginalExceptionProperties = function (hint) {
    if (hint && hint.originalException && isError(hint.originalException)) {
        var originalException = hint.originalException;
        var name_1 = originalException.name, message = originalException.message;
        return { name: name_1, message: message };
    }
    return {};
};

var SentryFullStory = /** @class */ (function () {
    function SentryFullStory(sentryOrg, options) {
        if (options === void 0) { options = {}; }
        this.name = SentryFullStory.id;
        this.sentryOrg = sentryOrg;
        this.baseSentryUrl = options.baseSentryUrl || 'https://sentry.io';
    }
    SentryFullStory.prototype.doesFullStoryExist = function () {
        return !!window[window['_fs_namespace']];
    };
    SentryFullStory.prototype.setupOnce = function () {
        var _this = this;
        addGlobalEventProcessor(function (event$1, hint) {
            //Returns the sentry URL of the error
            //If we cannot get the URL, return a string saying we cannot
            var getSentryUrl = function () {
                var _a;
                try {
                    //No docs on this but the SDK team assures me it works unless you bind another Sentry client
                    var dsn = (((_a = getCurrentHub().getClient()) === null || _a === void 0 ? void 0 : _a.getOptions()) || {}).dsn;
                    if (!dsn) {
                        console.error('No DSN');
                        return 'Could not retrieve url';
                    }
                    if (!hint) {
                        console.error('No event hint');
                        return 'Could not retrieve url';
                    }
                    var projectId = getProjectIdFromSentryDsn(dsn);
                    return _this.baseSentryUrl + "/organizations/" + _this.sentryOrg + "/issues/?project=" + projectId + "&query=" + hint.event_id;
                }
                catch (err) {
                    console.error('Error retrieving project ID from DSN', err);
                    //TODO: Could put link to a help here
                    return 'Could not retrieve url';
                }
            };
            var self = getCurrentHub().getIntegration(SentryFullStory);
            // Run the integration ONLY when it was installed on the current Hub AND isn't a transaction
            if (self && event$1.type !== 'transaction' && _this.doesFullStoryExist()) {
                // getCurrentSessionURL isn't available until after the FullStory script is fully bootstrapped.
                // If an error occurs before getCurrentSessionURL is ready, make a note in Sentry and move on.
                // More on getCurrentSessionURL here: https://help.fullstory.com/develop-js/getcurrentsessionurl
                event$1.contexts = __assign(__assign({}, event$1.contexts), { fullStory: {
                        fullStoryUrl: getCurrentSessionURL(true) ||
                            'current session URL API not ready',
                    } });
                // FS.event is immediately ready even if FullStory isn't fully bootstrapped
                event('Sentry Error', __assign({ sentryUrl: getSentryUrl() }, getOriginalExceptionProperties(hint)));
            }
            return event$1;
        });
    };
    SentryFullStory.id = 'SentryFullStory';
    return SentryFullStory;
}());

export default SentryFullStory;
