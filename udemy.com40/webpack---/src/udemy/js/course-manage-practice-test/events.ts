import {ClientEvent} from '@udemy/event-tracking';

interface Course {
    /**
     *ID of the course
     */
    id: number;
}

interface PracticeTest {
    /**
     *ID of the practice test.
     */
    id: number;

    /**
     *The number of questions in the practice test.
     */
    numberOfQuestions: number;

    /**
     * Indicates whether the practice test is published or not
     */
    isPublished: boolean | null;
}

interface PracticeTestQuestion {
    /**
     *ID of the practice test question.
     */
    id: number;

    /**
     *Title of the practice test question.
     */
    title: string;

    /**
     * The question type.
     */
    type: 'multiple_choice' | 'multiple_select';
}

export interface PTEventCtorArgs {
    practiceTest: PracticeTest;
    course: Course | null;
}

export type PTQuestionEventCtorArgs = PTEventCtorArgs & {
    question: PracticeTestQuestion;
};

export type PTAIGenerationRequestCtorArgs = PTQuestionEventCtorArgs & {
    isFirstRequest: boolean;
};

export type PTEditedEventCtorArgs = PTEventCtorArgs & {
    status: 'newly_created' | 'unpublished' | 'published'; // TODO couldn't detect newly_created no difference between published
};

export type PTCorrectQuestionSelectedCtorArgs = PTQuestionEventCtorArgs & {
    selectedAnswer: string[];
};

export type PTQuestionDomainEventCtorArgs = PTQuestionEventCtorArgs & {
    newlyCreated: boolean;
};

export type PTQuestionEditedEventCtorArgs = PTQuestionEventCtorArgs & {
    isAIGenerated: boolean;
    pctOfEditOnAIGeneratedFeedbacks: number[] | null;
};

export type PTQuestionMenuSelectedEventCtorArgs = PTEventCtorArgs & {
    selectionType: 'multiple_choice' | 'multiple_select' | 'fill_in_the_blanks' | 'bulk_upload';
};

export type PTQuestionResourceAddedEventCtorArgs = PTQuestionEventCtorArgs & {
    resourceType: 'link' | 'related_lecture' | 'file_from_library' | 'new_file';
};

abstract class PracticeTestEvent extends ClientEvent {
    practiceTest: PracticeTest;
    course: Course | null;

    protected constructor(eventName: string, data: PTEventCtorArgs) {
        super(eventName);
        this.practiceTest = data.practiceTest;
        this.course = data.course;
    }
}

abstract class PracticeTestQuestionEvent extends PracticeTestEvent {
    question: PracticeTestQuestion;

    protected constructor(eventName: string, data: PTQuestionEventCtorArgs) {
        super(eventName, data);
        this.question = data.question;
    }
}

/**
 * This event is fired when an instructor presented with error message (AI System not working etc.) while using AI Feedback Generation feature.
 */
class PracticeTestAIErrorPresentedEvent extends PracticeTestQuestionEvent {
    constructor(data: PTQuestionEventCtorArgs) {
        super('PracticeTestAIErrorPresented', data);
    }
}

/**
 *This event is fired when an instructor accepts the feedback generated by AI.
 */
class PracticeTestAIGenerationAcceptedEvent extends PracticeTestQuestionEvent {
    constructor(data: PTQuestionEventCtorArgs) {
        super('PracticeTestAIGenerationAccepted', data);
    }
}

/**
 * This event is fired when an instructor dismisses the feedback generated by AI.
 */
class PracticeTestAIGenerationDismissedEvent extends PracticeTestQuestionEvent {
    constructor(data: PTQuestionEventCtorArgs) {
        super('PracticeTestAIGenerationDismissed', data);
    }
}

/**
 *This event is fired when an instructor does not provide input to the AI generated feedback review prompt (Accept or Dismss)
 *and tries to save the question. Error toast is presented to the instructor.
 */
class PracticeTestAIGenerationNotAcceptedErrorPresentedEvent extends PracticeTestQuestionEvent {
    constructor(data: PTQuestionEventCtorArgs) {
        super('PracticeTestAIGenerationNotAcceptedErrorPresented', data);
    }
}

/**
 * This event is fired when an instructor generates feedbacks with AI for a practice test question.
 */
class PracticeTestAIGenerationRequestedEvent extends PracticeTestQuestionEvent {
    isFirstRequest: boolean;

    constructor(data: PTAIGenerationRequestCtorArgs) {
        super('PracticeTestAIGenerationRequested', data);
        this.isFirstRequest = data.isFirstRequest;
    }
}

/**
 *This event is fired when an instructor creates a practice test.
 */
class PracticeTestCreatedEvent extends PracticeTestEvent {
    constructor(data: PTEventCtorArgs) {
        super('PracticeTestCreated', data);
    }
}

/**
 *    This event is fired when an instructor makes a change to a practice test, however small.
 */
class PracticeTestEditedEvent extends PracticeTestEvent {
    status: 'newly_created' | 'unpublished' | 'published';
    constructor(data: PTEditedEventCtorArgs) {
        super('PracticeTestEdited', data);
        this.status = data.status;
    }
}

/**
 *This event is fired when an instructor previews a practice test.
 */
class PracticeTestPreviewedEvent extends PracticeTestEvent {
    constructor(data: PTEventCtorArgs) {
        super('PracticeTestPreviewed', data);
    }
}

/**
 *This event is fired when an instructor publishes a practice test.
 */
class PracticeTestPublishedEvent extends PracticeTestEvent {
    constructor(data: PTEventCtorArgs) {
        super('PracticeTestPublished', data);
    }
}

/**
 * This event is fired when an instructor adds a new answer to the practice test question.
 */
class PracticeTestQuestionAnswerAddedEvent extends PracticeTestQuestionEvent {
    constructor(data: PTQuestionEventCtorArgs) {
        super('PracticeTestQuestionAnswerAdded', data);
    }
}

/**
 *This event is fired when an instructor deletes an answer from a practice test question.
 */
class PracticeTestQuestionAnswerDeletedEvent extends PracticeTestQuestionEvent {
    constructor(data: PTQuestionEventCtorArgs) {
        super('PracticeTestQuestionAnswerDeleted', data);
    }
}

/**
 * This event is fired when an instructor cancels or closes the bulk upload questions modal.
 */
class PracticeTestQuestionBulkUploadCanceledEvent extends PracticeTestEvent {
    constructor(data: PTEventCtorArgs) {
        super('PracticeTestQuestionBulkUploadCanceled', data);
    }
}

/**
 * This event is fired when an instructor is presented with the bulk question upload fail message.
 */
class PracticeTestQuestionBulkUploadFailureModalPresentedEvent extends PracticeTestEvent {
    constructor(data: PTEventCtorArgs) {
        super('PracticeTestQuestionBulkUploadFailureModalPresented', data);
    }
}

/**
 * This event is fired when an instructor cancels the overwrite existing questions modal while using the bulk upload questions feature.
 */
class PracticeTestQuestionBulkUploadOverwriteCanceledEvent extends PracticeTestEvent {
    constructor(data: PTEventCtorArgs) {
        super('PracticeTestQuestionBulkUploadOverwriteCanceled', data);
    }
}

/**
 *This event is fired when an instructor confirms the overwrite existing questions modal while using the bulk upload questions feature.
 */
class PracticeTestQuestionBulkUploadOverwriteConfirmedEvent extends PracticeTestEvent {
    constructor(data: PTEventCtorArgs) {
        super('PracticeTestQuestionBulkUploadOverwriteConfirmed', data);
    }
}

/**
 *This event is fired when an instructor downloads the template file of the bulk upload questions feature.
 */
class PracticeTestQuestionBulkUploadTemplateDownloadedEvent extends PracticeTestEvent {
    constructor(data: PTEventCtorArgs) {
        super('PracticeTestQuestionBulkUploadTemplateDownloaded', data);
    }
}

/**
 *This event is fired when an instructor selects a correct answer for a practice test question.
 */
class PracticeTestQuestionCorrectAnswerSelectedEvent extends PracticeTestQuestionEvent {
    /**
     * List of selected answers.
     */
    selectedAnswers: string[];

    constructor(data: PTCorrectQuestionSelectedCtorArgs) {
        super('PracticeTestQuestionCorrectAnswerSelected', data);

        this.selectedAnswers = data.selectedAnswer;
    }
}

/**
 * This event is fired when an instructor deletes a question from a practice test.
 */
class PracticeTestQuestionDeletedEvent extends PracticeTestQuestionEvent {
    constructor(data: PTQuestionEventCtorArgs) {
        super('PracticeTestQuestionDeleted', data);
    }
}

/**
 *This event is fired when an instructor adds a new domain field to a practice test question.
 *Domain was named as Knowledge Area in the past. It represents the knowledge domain of the question (e.g. Cloud).
 */
class PracticeTestQuestionDomainAddedEvent extends PracticeTestQuestionEvent {
    /**
     * Indicates whether the domain is newly created or not.
     */
    newlyCreated: boolean;

    constructor(data: PTQuestionDomainEventCtorArgs) {
        super('PracticeTestQuestionDomainAdded', data);

        this.newlyCreated = data.newlyCreated;
    }
}

/**
 *This event is fired when an instructor deletes a domain from a practice test question.
 *  Domain was named as Knowledge Area in the past. It represents the knowledge domain of the question (e.g. Cloud).
 */
class PracticeTestQuestionDomainDeletedEvent extends PracticeTestQuestionEvent {
    constructor(data: PTQuestionEventCtorArgs) {
        super('PracticeTestQuestionDomainDeleted', data);
    }
}

/**
 *This event is fired when an instructor edits a practice test question.
 */
class PracticeTestQuestionEditedEvent extends PracticeTestQuestionEvent {
    /**
     *The flag that indicates if the AI assisted feedback generation is used before saving the question.
     */
    isAIGenerated: boolean;

    /**
     *Percentage of manual change/edit on each AI generated feedback. It is only available when isAIGenerated is true.
     *Otherwise, it is null.
     */
    pctOfEditOnAIGeneratedFeedbacks: number[] | null;

    constructor(data: PTQuestionEditedEventCtorArgs) {
        super('PracticeTestQuestionEdited', data);

        this.isAIGenerated = data.isAIGenerated;
        this.pctOfEditOnAIGeneratedFeedbacks = data.pctOfEditOnAIGeneratedFeedbacks;
    }
}

/**
 *This event is fired when an instructor selects a question adding option from the menu to add new questions to the practice test.
 */
class PracticeTestQuestionMenuSelectedEvent extends PracticeTestEvent {
    selectionType: string;

    constructor(data: PTQuestionMenuSelectedEventCtorArgs) {
        super('PracticeTestQuestionMenuSelected', data);
        this.selectionType = data.selectionType;
    }
}

/**
 *This event is fired when an instructor adds a resource to a practice test question.
 */
class PracticeTestQuestionResourceAddedEvent extends PracticeTestQuestionEvent {
    resourceType: string;

    constructor(data: PTQuestionResourceAddedEventCtorArgs) {
        super('PracticeTestQuestionResourceAdded', data);
        this.resourceType = data.resourceType;
    }
}

/**
 *This event is fired when an instructor uploads questions using the bulk upload questions feature.
 */
class PracticeTestQuestionBulkUploadedEvent extends PracticeTestEvent {
    constructor(data: PTEventCtorArgs) {
        super('PracticeTestQuestionsBulkUploaded', data);
    }
}

export type PTEventType<T extends PracticeTestEvent, U extends PTEventCtorArgs> = new (
    data: U,
) => T;

export function createEvent<T extends PracticeTestEvent, U extends PTEventCtorArgs>(
    Ctor: PTEventType<T, U>,
    data: U,
): T {
    return new Ctor(data);
}

export {
    PracticeTestEvent,
    PracticeTestAIErrorPresentedEvent,
    PracticeTestAIGenerationAcceptedEvent,
    PracticeTestAIGenerationDismissedEvent,
    PracticeTestAIGenerationNotAcceptedErrorPresentedEvent,
    PracticeTestAIGenerationRequestedEvent,
    PracticeTestCreatedEvent,
    PracticeTestEditedEvent,
    PracticeTestPreviewedEvent,
    PracticeTestPublishedEvent,
    PracticeTestQuestionAnswerAddedEvent,
    PracticeTestQuestionAnswerDeletedEvent,
    PracticeTestQuestionBulkUploadCanceledEvent,
    PracticeTestQuestionBulkUploadFailureModalPresentedEvent,
    PracticeTestQuestionBulkUploadOverwriteCanceledEvent,
    PracticeTestQuestionBulkUploadOverwriteConfirmedEvent,
    PracticeTestQuestionBulkUploadTemplateDownloadedEvent,
    PracticeTestQuestionCorrectAnswerSelectedEvent,
    PracticeTestQuestionDeletedEvent,
    PracticeTestQuestionDomainAddedEvent,
    PracticeTestQuestionDomainDeletedEvent,
    PracticeTestQuestionEditedEvent,
    PracticeTestQuestionMenuSelectedEvent,
    PracticeTestQuestionResourceAddedEvent,
    PracticeTestQuestionBulkUploadedEvent,
};
