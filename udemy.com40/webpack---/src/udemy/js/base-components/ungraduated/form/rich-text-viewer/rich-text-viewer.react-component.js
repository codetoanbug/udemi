import autobind from 'autobind-decorator';
import classNames from 'classnames';
import {observer} from 'mobx-react';
import PropTypes from 'prop-types';
import React, {Component} from 'react';

import CodeBlock from 'base-components/ungraduated/code/code-block.react-component';
import {safelySetInnerHTML} from 'utils/escape/safely-set-inner-html';
import udRenderReactComponents from 'utils/ud-render-react-components';

import OpenFullSizeImage from './open-full-size-image.react-component';
import './rich-text-scaffolding.global.less';

/**
 * This component renders an HTML string generated by rich-text-editor.react-component.js.
 */
@observer
export default class RichTextViewer extends Component {
    static propTypes = {
        unsafeHTML: PropTypes.string.isRequired,
        prettify: PropTypes.shape({
            preventClick: PropTypes.bool,
        }),
        wrapImages: PropTypes.bool,
        openBlankTarget: PropTypes.bool,
    };

    static defaultProps = {
        prettify: {},
        wrapImages: false,
        openBlankTarget: false,
    };

    componentDidMount() {
        this.fixupHtml();
    }

    componentDidUpdate(prevProps) {
        if (prevProps.unsafeHTML !== this.props.unsafeHTML) {
            this.fixupHtml();
        }
    }

    fixupHtml() {
        this.wrapCodeBlocks(this.node);
        if (this.props.wrapImages) {
            this.wrapImages(this.node);
        }
        if (this.props.openBlankTarget) {
            this.blankTargets(this.node);
        }
    }

    blankTargets(node) {
        Array.from(node.querySelectorAll('a')).forEach((anchor) => {
            anchor.setAttribute('target', '_blank');
            anchor.setAttribute('rel', 'noopener noreferrer');
        });
    }

    wrapCodeBlocks(node) {
        const reactClassName = 'ud-component--base-components--code-block';
        Array.from(node.querySelectorAll('pre.prettyprint')).forEach((codeBlock) => {
            const parent = codeBlock.parentNode;
            if (parent.classList.contains(reactClassName)) {
                // Already applied code-block.
                return;
            }
            const newParent = document.createElement('div');
            newParent.className = reactClassName;
            parent.insertBefore(newParent, codeBlock);

            // This moves codeBlock from its original position to inside newParent.
            newParent.appendChild(codeBlock);

            udRenderReactComponents(newParent, `.${reactClassName}`, CodeBlock, {
                ...this.props.prettify,
                value: codeBlock.textContent,
                className: codeBlock.className,
                showLineNumbers: codeBlock.classList.contains('linenums'),
            });
        });
    }

    wrapImages(node) {
        const reactClassName = 'ud-component--base-components--open-full-size-image';
        Array.from(node.querySelectorAll('img')).forEach((image) => {
            image.style.display = 'none';
            const nextSibling = image.nextSibling;
            if (
                nextSibling &&
                nextSibling.classList &&
                nextSibling.classList.contains(reactClassName)
            ) {
                // Already applied open-full-size-image.
                return;
            }
            const newNextSibling = document.createElement('span');
            newNextSibling.className = reactClassName;
            image.parentNode.insertBefore(newNextSibling, nextSibling);
            udRenderReactComponents(newNextSibling, `.${reactClassName}`, OpenFullSizeImage, {
                alt: image.getAttribute('alt') || '',
                src: image.getAttribute('src'),
                href: image.parentNode.getAttribute('href'),
            });
        });
    }

    @autobind
    setRefs(node) {
        this.node = node;
    }

    render() {
        const {prettify, wrapImages, unsafeHTML, openBlankTarget, ...props} = this.props;
        return (
            <div
                ref={this.setRefs}
                {...safelySetInnerHTML({
                    descriptionOfCaller: 'rich-text-viewer:html',
                    html: unsafeHTML,
                    domPurifyConfig: {ADD_ATTR: ['target']},
                })}
                {...props}
                className={classNames(props.className, 'rt-scaffolding')}
            />
        );
    }
}
