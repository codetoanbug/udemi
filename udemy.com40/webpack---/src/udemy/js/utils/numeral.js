import {roundNumber} from '@udemy/i18n';

import serverOrClient from 'utils/server-or-client';

export {roundNumber};

/**
 * This module contains utilities for formatting numbers.
 */

// JavaScript implementation of django.utils.numberformat#format.
export function formatNumber(number, options = {}) {
    // global.django.formats is defined in the jsi18n file, which is generated by Django.
    const djangoFormats = serverOrClient.global.django.formats;
    const decimalSep = djangoFormats.DECIMAL_SEPARATOR;
    const grouping = djangoFormats.NUMBER_GROUPING;
    const thousandSep = djangoFormats.THOUSAND_SEPARATOR;

    // The default values match django.contrib.humanize.templatetags.humanize#intcomma,
    // as that's the main use-case for formatting numbers on the frontend.
    const {decimalPos = null, forceGrouping = true} = options;

    const useGrouping = forceGrouping && grouping !== '0';
    if (!useGrouping && !decimalPos) {
        return `${number}`;
    }

    let sign = '';
    let strNumber = `${number}`;
    // The Django version has a case here to handle values with more than 200 digits.
    // For simplicity, we're omitting that case in the JS version.
    if (strNumber[0] === '-') {
        sign = '-';
        strNumber = strNumber.substring(1);
    }

    let intPart, decPart;
    if (strNumber.includes('.')) {
        [intPart, decPart] = strNumber.split('.');
        if (decimalPos !== null) {
            decPart = decPart.substring(0, decimalPos);
        }
    } else {
        [intPart, decPart] = [strNumber, ''];
    }
    if (decimalPos !== null) {
        for (let i = 0; i < decimalPos - decPart.length; i++) {
            decPart += '0';
        }
    }
    if (decPart) {
        decPart = decimalSep + decPart;
    }

    if (useGrouping) {
        let intervals;
        if (Array.isArray(grouping)) {
            intervals = grouping;
        } else {
            intervals = [grouping, 0];
        }
        let activeInterval = intervals.shift();
        let intPartGD = '';
        let cnt = 0;
        intPart
            .split('')
            .reverse()
            .forEach((digit) => {
                activeInterval = parseInt(activeInterval, 10);
                if (cnt && cnt === activeInterval) {
                    if (intervals.length > 0) {
                        activeInterval = intervals.shift() || activeInterval;
                    }
                    intPartGD += thousandSep.split('').reverse().join('');
                    cnt = 0;
                }
                intPartGD += digit;
                cnt += 1;
            });
        intPart = intPartGD.split('').reverse().join('');
    }

    return sign + intPart + decPart;
}

export function formatRoundNumber(number, precision = 0) {
    return formatNumber(roundNumber(number, precision).toFixed(precision));
}
